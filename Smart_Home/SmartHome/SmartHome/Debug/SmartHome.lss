
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000042e  00800060  00002b48  00002bdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000240  0080048e  0080048e  0000300a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000300a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003068  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007a0  00000000  00000000  000030a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000061df  00000000  00000000  00003844  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022a5  00000000  00000000  00009a23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003b98  00000000  00000000  0000bcc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011d4  00000000  00000000  0000f860  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000172e  00000000  00000000  00010a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000308e  00000000  00000000  00012162  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000610  00000000  00000000  000151f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 b8 04 	jmp	0x970	; 0x970 <__vector_1>
       8:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__vector_2>
       c:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__vector_3>
      10:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__vector_4>
      14:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__vector_9>
      28:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__vector_10>
      2c:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__vector_11>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 66 06 	jmp	0xccc	; 0xccc <__vector_13>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	f4 0b       	sbc	r31, r20
      56:	f6 0b       	sbc	r31, r22
      58:	fc 0b       	sbc	r31, r28
      5a:	fe 0b       	sbc	r31, r30
      5c:	00 0c       	add	r0, r0
      5e:	02 0c       	add	r0, r2
      60:	07 0c       	add	r0, r7
      62:	b3 0f       	add	r27, r19
      64:	b5 0f       	add	r27, r21
      66:	b9 0f       	add	r27, r25
      68:	bb 0f       	add	r27, r27
      6a:	bd 0f       	add	r27, r29
      6c:	bf 0f       	add	r27, r31
      6e:	c2 0f       	add	r28, r18

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf e5       	ldi	r28, 0x5F	; 95
      76:	d8 e0       	ldi	r29, 0x08	; 8
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	14 e0       	ldi	r17, 0x04	; 4
      7e:	a0 e6       	ldi	r26, 0x60	; 96
      80:	b0 e0       	ldi	r27, 0x00	; 0
      82:	e8 e4       	ldi	r30, 0x48	; 72
      84:	fb e2       	ldi	r31, 0x2B	; 43
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	ae 38       	cpi	r26, 0x8E	; 142
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	26 e0       	ldi	r18, 0x06	; 6
      94:	ae e8       	ldi	r26, 0x8E	; 142
      96:	b4 e0       	ldi	r27, 0x04	; 4
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ae 3c       	cpi	r26, 0xCE	; 206
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 57 00 	call	0xae	; 0xae <main>
      a6:	0c 94 a2 15 	jmp	0x2b44	; 0x2b44 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:
#include "buzzer.h"
#include "Stop.h"

int main(void)
{
	lcd_init();
      ae:	0e 94 82 01 	call	0x304	; 0x304 <lcd_init>
	airConditioner_init();
      b2:	0e 94 92 06 	call	0xd24	; 0xd24 <airConditioner_init>
	doorService_init();
      b6:	0e 94 d0 06 	call	0xda0	; 0xda0 <doorService_init>
	lamp_Dim_service_init();
      ba:	0e 94 1b 07 	call	0xe36	; 0xe36 <lamp_Dim_service_init>
	local_menu_init();
      be:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <local_menu_init>
	uart_init(BAUD_RATE_9600);
      c2:	87 e6       	ldi	r24, 0x67	; 103
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	0e 94 42 06 	call	0xc84	; 0xc84 <uart_init>
	remoteDB_init();
      ca:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <remoteDB_init>
	localDB_init();
      ce:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <localDB_init>
	lamp_init();
      d2:	0e 94 c7 00 	call	0x18e	; 0x18e <lamp_init>
	remote_menu_init();
      d6:	0e 94 cd 10 	call	0x219a	; 0x219a <remote_menu_init>
	buzzer_init();
      da:	0e 94 88 00 	call	0x110	; 0x110 <buzzer_init>
    while (1) 
    {
		switch(System_Stop())
      de:	0e 94 cf 10 	call	0x219e	; 0x219e <System_Stop>
      e2:	81 30       	cpi	r24, 0x01	; 1
      e4:	19 f4       	brne	.+6      	; 0xec <main+0x3e>
		{
			case TRUE:
				buzzer_on();
      e6:	0e 94 8d 00 	call	0x11a	; 0x11a <buzzer_on>
				break;
      ea:	04 c0       	rjmp	.+8      	; 0xf4 <main+0x46>
			default:
				local_menu_Service();
      ec:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <local_menu_Service>
				remote_menu_Service();
      f0:	0e 94 cb 10 	call	0x2196	; 0x2196 <remote_menu_Service>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f4:	2f ef       	ldi	r18, 0xFF	; 255
      f6:	89 ef       	ldi	r24, 0xF9	; 249
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	21 50       	subi	r18, 0x01	; 1
      fc:	80 40       	sbci	r24, 0x00	; 0
      fe:	90 40       	sbci	r25, 0x00	; 0
     100:	e1 f7       	brne	.-8      	; 0xfa <main+0x4c>
     102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x56>
     104:	00 00       	nop
				break;
		}
		_delay_ms(20);
		airConditioner_service();
     106:	0e 94 bb 06 	call	0xd76	; 0xd76 <airConditioner_service>
		lamp_Dim_service();
     10a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <lamp_Dim_service>
		
    }
     10e:	e7 cf       	rjmp	.-50     	; 0xde <main+0x30>

00000110 <buzzer_init>:
#include "dio.h"
#include "buzzer.h"

void buzzer_init(void)
{
	dio_setPinDirection(PORTB_ID,PIN2_ID,OUTPUT);
     110:	41 e0       	ldi	r20, 0x01	; 1
     112:	62 e0       	ldi	r22, 0x02	; 2
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <dio_setPinDirection>

0000011a <buzzer_on>:
}

void buzzer_on(void)
{
	dio_writeChannel(PORTB_ID,PIN2_ID,HIGH);
     11a:	41 e0       	ldi	r20, 0x01	; 1
     11c:	62 e0       	ldi	r22, 0x02	; 2
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <dio_writeChannel>

00000124 <dcMotor_init>:
#include "dc.h"
#include "dio.h"

void dcMotor_init(void)
{
	dio_setPinDirection(PORTA_ID,PIN6_ID,OUTPUT);
     124:	41 e0       	ldi	r20, 0x01	; 1
     126:	66 e0       	ldi	r22, 0x06	; 6
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <dio_setPinDirection>

0000012e <dcMotor_on>:
}

void dcMotor_on(void)
{
	dio_writeChannel(PORTA_ID,PIN6_ID,HIGH);
     12e:	41 e0       	ldi	r20, 0x01	; 1
     130:	66 e0       	ldi	r22, 0x06	; 6
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <dio_writeChannel>

00000138 <dcMotor_off>:
}

void dcMotor_off(void)
{
	dio_writeChannel(PORTA_ID,PIN6_ID,LOW);
     138:	40 e0       	ldi	r20, 0x00	; 0
     13a:	66 e0       	ldi	r22, 0x06	; 6
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <dio_writeChannel>

00000142 <dimmer_init>:
#include "timer0.h"
#include "dio.h"

void dimmer_init(void)
{
	pwm0_init(TIMER0_NON_INVERTED_PWM_FAST, PWM_F_61HZ);
     142:	65 e0       	ldi	r22, 0x05	; 5
     144:	88 e6       	ldi	r24, 0x68	; 104
     146:	0e 94 89 05 	call	0xb12	; 0xb12 <pwm0_init>
	POT_init();
     14a:	0e 94 8b 02 	call	0x516	; 0x516 <POT_init>
	dio_setPinDirection(PORTB_ID,PIN3_ID,OUTPUT);
     14e:	41 e0       	ldi	r20, 0x01	; 1
     150:	63 e0       	ldi	r22, 0x03	; 3
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <dio_setPinDirection>

00000158 <dimmer_setIntensity>:
}

void dimmer_setIntensity(void)
{
	u16 potRead = 0;
	potRead = POT_read();
     158:	0e 94 8d 02 	call	0x51a	; 0x51a <POT_read>
	potRead = (((f32)potRead/1023)*100);
     15c:	bc 01       	movw	r22, r24
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	0e 94 77 11 	call	0x22ee	; 0x22ee <__floatunsisf>
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	30 ec       	ldi	r19, 0xC0	; 192
     16a:	4f e7       	ldi	r20, 0x7F	; 127
     16c:	54 e4       	ldi	r21, 0x44	; 68
     16e:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__divsf3>
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	48 ec       	ldi	r20, 0xC8	; 200
     178:	52 e4       	ldi	r21, 0x42	; 66
     17a:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
	pwm0_setDutyCycle(potRead);
     17e:	0e 94 48 11 	call	0x2290	; 0x2290 <__fixunssfsi>
     182:	86 2f       	mov	r24, r22
     184:	0c 94 90 05 	jmp	0xb20	; 0xb20 <pwm0_setDutyCycle>

00000188 <dimmer_turnOff>:
}

void dimmer_turnOff(void)
{
	pwm0_setDutyCycle(DIMMER_TURN_OFF);
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	0c 94 90 05 	jmp	0xb20	; 0xb20 <pwm0_setDutyCycle>

0000018e <lamp_init>:

boolean lamp_state[5]={FALSE,FALSE,FALSE,FALSE,FALSE};

void lamp_init(void)
{
	relay_init();
     18e:	0c 94 90 02 	jmp	0x520	; 0x520 <relay_init>

00000192 <lamp_toggle>:
}

void lamp_toggle(u8 id)
{
     192:	cf 93       	push	r28
     194:	c8 2f       	mov	r28, r24
	relay_toggle(id);
     196:	0e 94 a9 02 	call	0x552	; 0x552 <relay_toggle>
	lamp_state[(id-1)] ^= TRUE;
     19a:	ec 2f       	mov	r30, r28
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	e3 57       	subi	r30, 0x73	; 115
     1a0:	fb 4f       	sbci	r31, 0xFB	; 251
     1a2:	90 81       	ld	r25, Z
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	89 27       	eor	r24, r25
     1a8:	80 83       	st	Z, r24
}
     1aa:	cf 91       	pop	r28
     1ac:	08 95       	ret

000001ae <lamp_Getstate>:

boolean lamp_Getstate(u8 id)
{
	return lamp_state[(id-1)];
     1ae:	e8 2f       	mov	r30, r24
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	e3 57       	subi	r30, 0x73	; 115
     1b4:	fb 4f       	sbci	r31, 0xFB	; 251
}
     1b6:	80 81       	ld	r24, Z
     1b8:	08 95       	ret

000001ba <enablePulse>:
     1ba:	8f e9       	ldi	r24, 0x9F	; 159
     1bc:	9f e0       	ldi	r25, 0x0F	; 15
     1be:	01 97       	sbiw	r24, 0x01	; 1
     1c0:	f1 f7       	brne	.-4      	; 0x1be <enablePulse+0x4>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <enablePulse+0xa>
     1c4:	00 00       	nop

static void enablePulse(void)
{
	/*Enable pulse*/
	_delay_ms(1);
	dio_writeChannel(LCD_CMD_PORT,LCD_EN,HIGH);
     1c6:	41 e0       	ldi	r20, 0x01	; 1
     1c8:	64 e0       	ldi	r22, 0x04	; 4
     1ca:	82 e0       	ldi	r24, 0x02	; 2
     1cc:	0e 94 53 03 	call	0x6a6	; 0x6a6 <dio_writeChannel>
     1d0:	8f e9       	ldi	r24, 0x9F	; 159
     1d2:	9f e0       	ldi	r25, 0x0F	; 15
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <enablePulse+0x1a>
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <enablePulse+0x20>
     1da:	00 00       	nop
	_delay_ms(1);
	dio_writeChannel(LCD_CMD_PORT,LCD_EN,LOW);
     1dc:	40 e0       	ldi	r20, 0x00	; 0
     1de:	64 e0       	ldi	r22, 0x04	; 4
     1e0:	82 e0       	ldi	r24, 0x02	; 2
     1e2:	0e 94 53 03 	call	0x6a6	; 0x6a6 <dio_writeChannel>
     1e6:	8f e9       	ldi	r24, 0x9F	; 159
     1e8:	9f e0       	ldi	r25, 0x0F	; 15
     1ea:	01 97       	sbiw	r24, 0x01	; 1
     1ec:	f1 f7       	brne	.-4      	; 0x1ea <enablePulse+0x30>
     1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <enablePulse+0x36>
     1f0:	00 00       	nop
     1f2:	08 95       	ret

000001f4 <lcd_sendCommand>:
	_delay_ms(1);
}

void lcd_sendCommand(u8 cmd)
{
     1f4:	cf 93       	push	r28
     1f6:	c8 2f       	mov	r28, r24
	/*MSB first*/
	/*Set RS--> 0 (Command) */
	dio_writeChannel(LCD_CMD_PORT,LCD_RS,LOW);
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	66 e0       	ldi	r22, 0x06	; 6
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	0e 94 53 03 	call	0x6a6	; 0x6a6 <dio_writeChannel>
	
	/*Set MSB data part*/
	dio_writeChannel(LCD_DATA_PORT,LCD_D4,CHECK_BIT(cmd,4));
     202:	c4 fb       	bst	r28, 4
     204:	44 27       	eor	r20, r20
     206:	40 f9       	bld	r20, 0
     208:	60 e0       	ldi	r22, 0x00	; 0
     20a:	82 e0       	ldi	r24, 0x02	; 2
     20c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <dio_writeChannel>
	dio_writeChannel(LCD_DATA_PORT,LCD_D5,CHECK_BIT(cmd,5));
     210:	c5 fb       	bst	r28, 5
     212:	44 27       	eor	r20, r20
     214:	40 f9       	bld	r20, 0
     216:	61 e0       	ldi	r22, 0x01	; 1
     218:	82 e0       	ldi	r24, 0x02	; 2
     21a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <dio_writeChannel>
	dio_writeChannel(LCD_DATA_PORT,LCD_D6,CHECK_BIT(cmd,6));
     21e:	c6 fb       	bst	r28, 6
     220:	44 27       	eor	r20, r20
     222:	40 f9       	bld	r20, 0
     224:	62 e0       	ldi	r22, 0x02	; 2
     226:	82 e0       	ldi	r24, 0x02	; 2
     228:	0e 94 53 03 	call	0x6a6	; 0x6a6 <dio_writeChannel>
	dio_writeChannel(LCD_DATA_PORT,LCD_D7,CHECK_BIT(cmd,7));
     22c:	4c 2f       	mov	r20, r28
     22e:	44 1f       	adc	r20, r20
     230:	44 27       	eor	r20, r20
     232:	44 1f       	adc	r20, r20
     234:	63 e0       	ldi	r22, 0x03	; 3
     236:	82 e0       	ldi	r24, 0x02	; 2
     238:	0e 94 53 03 	call	0x6a6	; 0x6a6 <dio_writeChannel>
	
	enablePulse();
     23c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enablePulse>
	
	/*Set LSB data part*/
	dio_writeChannel(LCD_DATA_PORT,LCD_D4,CHECK_BIT(cmd,0));
     240:	4c 2f       	mov	r20, r28
     242:	41 70       	andi	r20, 0x01	; 1
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	82 e0       	ldi	r24, 0x02	; 2
     248:	0e 94 53 03 	call	0x6a6	; 0x6a6 <dio_writeChannel>
	dio_writeChannel(LCD_DATA_PORT,LCD_D5,CHECK_BIT(cmd,1));
     24c:	c1 fb       	bst	r28, 1
     24e:	44 27       	eor	r20, r20
     250:	40 f9       	bld	r20, 0
     252:	61 e0       	ldi	r22, 0x01	; 1
     254:	82 e0       	ldi	r24, 0x02	; 2
     256:	0e 94 53 03 	call	0x6a6	; 0x6a6 <dio_writeChannel>
	dio_writeChannel(LCD_DATA_PORT,LCD_D6,CHECK_BIT(cmd,2));
     25a:	c2 fb       	bst	r28, 2
     25c:	44 27       	eor	r20, r20
     25e:	40 f9       	bld	r20, 0
     260:	62 e0       	ldi	r22, 0x02	; 2
     262:	82 e0       	ldi	r24, 0x02	; 2
     264:	0e 94 53 03 	call	0x6a6	; 0x6a6 <dio_writeChannel>
	dio_writeChannel(LCD_DATA_PORT,LCD_D7,CHECK_BIT(cmd,3));
     268:	c3 fb       	bst	r28, 3
     26a:	44 27       	eor	r20, r20
     26c:	40 f9       	bld	r20, 0
     26e:	63 e0       	ldi	r22, 0x03	; 3
     270:	82 e0       	ldi	r24, 0x02	; 2
     272:	0e 94 53 03 	call	0x6a6	; 0x6a6 <dio_writeChannel>
	
	enablePulse();
}
     276:	cf 91       	pop	r28
	dio_writeChannel(LCD_DATA_PORT,LCD_D4,CHECK_BIT(cmd,0));
	dio_writeChannel(LCD_DATA_PORT,LCD_D5,CHECK_BIT(cmd,1));
	dio_writeChannel(LCD_DATA_PORT,LCD_D6,CHECK_BIT(cmd,2));
	dio_writeChannel(LCD_DATA_PORT,LCD_D7,CHECK_BIT(cmd,3));
	
	enablePulse();
     278:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <enablePulse>

0000027c <lcd_writeData>:
}

void lcd_writeData(u8 data)
{
     27c:	cf 93       	push	r28
     27e:	c8 2f       	mov	r28, r24
	/*MSB first*/
	/*Set RS--> 1 (Data) */
	dio_writeChannel(LCD_CMD_PORT,LCD_RS,HIGH);
     280:	41 e0       	ldi	r20, 0x01	; 1
     282:	66 e0       	ldi	r22, 0x06	; 6
     284:	82 e0       	ldi	r24, 0x02	; 2
     286:	0e 94 53 03 	call	0x6a6	; 0x6a6 <dio_writeChannel>
	
	/*Set MSB data part*/
	dio_writeChannel(LCD_DATA_PORT,LCD_D4,CHECK_BIT(data,4));
     28a:	c4 fb       	bst	r28, 4
     28c:	44 27       	eor	r20, r20
     28e:	40 f9       	bld	r20, 0
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	82 e0       	ldi	r24, 0x02	; 2
     294:	0e 94 53 03 	call	0x6a6	; 0x6a6 <dio_writeChannel>
	dio_writeChannel(LCD_DATA_PORT,LCD_D5,CHECK_BIT(data,5));
     298:	c5 fb       	bst	r28, 5
     29a:	44 27       	eor	r20, r20
     29c:	40 f9       	bld	r20, 0
     29e:	61 e0       	ldi	r22, 0x01	; 1
     2a0:	82 e0       	ldi	r24, 0x02	; 2
     2a2:	0e 94 53 03 	call	0x6a6	; 0x6a6 <dio_writeChannel>
	dio_writeChannel(LCD_DATA_PORT,LCD_D6,CHECK_BIT(data,6));
     2a6:	c6 fb       	bst	r28, 6
     2a8:	44 27       	eor	r20, r20
     2aa:	40 f9       	bld	r20, 0
     2ac:	62 e0       	ldi	r22, 0x02	; 2
     2ae:	82 e0       	ldi	r24, 0x02	; 2
     2b0:	0e 94 53 03 	call	0x6a6	; 0x6a6 <dio_writeChannel>
	dio_writeChannel(LCD_DATA_PORT,LCD_D7,CHECK_BIT(data,7));
     2b4:	4c 2f       	mov	r20, r28
     2b6:	44 1f       	adc	r20, r20
     2b8:	44 27       	eor	r20, r20
     2ba:	44 1f       	adc	r20, r20
     2bc:	63 e0       	ldi	r22, 0x03	; 3
     2be:	82 e0       	ldi	r24, 0x02	; 2
     2c0:	0e 94 53 03 	call	0x6a6	; 0x6a6 <dio_writeChannel>
	
	enablePulse();
     2c4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enablePulse>
	
	/*Set LSB data part*/
	dio_writeChannel(LCD_DATA_PORT,LCD_D4,CHECK_BIT(data,0));
     2c8:	4c 2f       	mov	r20, r28
     2ca:	41 70       	andi	r20, 0x01	; 1
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	82 e0       	ldi	r24, 0x02	; 2
     2d0:	0e 94 53 03 	call	0x6a6	; 0x6a6 <dio_writeChannel>
	dio_writeChannel(LCD_DATA_PORT,LCD_D5,CHECK_BIT(data,1));
     2d4:	c1 fb       	bst	r28, 1
     2d6:	44 27       	eor	r20, r20
     2d8:	40 f9       	bld	r20, 0
     2da:	61 e0       	ldi	r22, 0x01	; 1
     2dc:	82 e0       	ldi	r24, 0x02	; 2
     2de:	0e 94 53 03 	call	0x6a6	; 0x6a6 <dio_writeChannel>
	dio_writeChannel(LCD_DATA_PORT,LCD_D6,CHECK_BIT(data,2));
     2e2:	c2 fb       	bst	r28, 2
     2e4:	44 27       	eor	r20, r20
     2e6:	40 f9       	bld	r20, 0
     2e8:	62 e0       	ldi	r22, 0x02	; 2
     2ea:	82 e0       	ldi	r24, 0x02	; 2
     2ec:	0e 94 53 03 	call	0x6a6	; 0x6a6 <dio_writeChannel>
	dio_writeChannel(LCD_DATA_PORT,LCD_D7,CHECK_BIT(data,3));
     2f0:	c3 fb       	bst	r28, 3
     2f2:	44 27       	eor	r20, r20
     2f4:	40 f9       	bld	r20, 0
     2f6:	63 e0       	ldi	r22, 0x03	; 3
     2f8:	82 e0       	ldi	r24, 0x02	; 2
     2fa:	0e 94 53 03 	call	0x6a6	; 0x6a6 <dio_writeChannel>
	
	enablePulse();
}
     2fe:	cf 91       	pop	r28
	dio_writeChannel(LCD_DATA_PORT,LCD_D4,CHECK_BIT(data,0));
	dio_writeChannel(LCD_DATA_PORT,LCD_D5,CHECK_BIT(data,1));
	dio_writeChannel(LCD_DATA_PORT,LCD_D6,CHECK_BIT(data,2));
	dio_writeChannel(LCD_DATA_PORT,LCD_D7,CHECK_BIT(data,3));
	
	enablePulse();
     300:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <enablePulse>

00000304 <lcd_init>:
extern u8 customChar[NO_CUSTOM_CHAR][NO_CUSTOM_CHAR_BYTES];

void lcd_init(void)
{
	/*Set LCD control lines direction --> output*/
	dio_setPinDirection(LCD_CMD_PORT,LCD_RS,OUTPUT);
     304:	41 e0       	ldi	r20, 0x01	; 1
     306:	66 e0       	ldi	r22, 0x06	; 6
     308:	82 e0       	ldi	r24, 0x02	; 2
     30a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <dio_setPinDirection>
	dio_setPinDirection(LCD_CMD_PORT,LCD_RW,OUTPUT);
     30e:	41 e0       	ldi	r20, 0x01	; 1
     310:	65 e0       	ldi	r22, 0x05	; 5
     312:	82 e0       	ldi	r24, 0x02	; 2
     314:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <dio_setPinDirection>
	dio_setPinDirection(LCD_CMD_PORT,LCD_EN,OUTPUT);
     318:	41 e0       	ldi	r20, 0x01	; 1
     31a:	64 e0       	ldi	r22, 0x04	; 4
     31c:	82 e0       	ldi	r24, 0x02	; 2
     31e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <dio_setPinDirection>
	
	/*Set LCD data lines direction --> output*/
	dio_setPinDirection(LCD_DATA_PORT,LCD_D4,OUTPUT);
     322:	41 e0       	ldi	r20, 0x01	; 1
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	82 e0       	ldi	r24, 0x02	; 2
     328:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <dio_setPinDirection>
	dio_setPinDirection(LCD_DATA_PORT,LCD_D5,OUTPUT);
     32c:	41 e0       	ldi	r20, 0x01	; 1
     32e:	61 e0       	ldi	r22, 0x01	; 1
     330:	82 e0       	ldi	r24, 0x02	; 2
     332:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <dio_setPinDirection>
	dio_setPinDirection(LCD_DATA_PORT,LCD_D6,OUTPUT);
     336:	41 e0       	ldi	r20, 0x01	; 1
     338:	62 e0       	ldi	r22, 0x02	; 2
     33a:	82 e0       	ldi	r24, 0x02	; 2
     33c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <dio_setPinDirection>
	dio_setPinDirection(LCD_DATA_PORT,LCD_D7,OUTPUT);
     340:	41 e0       	ldi	r20, 0x01	; 1
     342:	63 e0       	ldi	r22, 0x03	; 3
     344:	82 e0       	ldi	r24, 0x02	; 2
     346:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <dio_setPinDirection>
	
	/*Always write to LCD*/
	dio_writeChannel(LCD_CMD_PORT,LCD_RW,LOW);
     34a:	40 e0       	ldi	r20, 0x00	; 0
     34c:	65 e0       	ldi	r22, 0x05	; 5
     34e:	82 e0       	ldi	r24, 0x02	; 2
     350:	0e 94 53 03 	call	0x6a6	; 0x6a6 <dio_writeChannel>
	
	/*Initialization by instructions*/
	lcd_writeData(0x00);
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_writeData>
     35a:	2f ef       	ldi	r18, 0xFF	; 255
     35c:	86 e7       	ldi	r24, 0x76	; 118
     35e:	91 e0       	ldi	r25, 0x01	; 1
     360:	21 50       	subi	r18, 0x01	; 1
     362:	80 40       	sbci	r24, 0x00	; 0
     364:	90 40       	sbci	r25, 0x00	; 0
     366:	e1 f7       	brne	.-8      	; 0x360 <lcd_init+0x5c>
     368:	00 c0       	rjmp	.+0      	; 0x36a <lcd_init+0x66>
     36a:	00 00       	nop
	_delay_ms(30);
	lcd_sendCommand(0x03);
     36c:	83 e0       	ldi	r24, 0x03	; 3
     36e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
     372:	8f e1       	ldi	r24, 0x1F	; 31
     374:	9e e4       	ldi	r25, 0x4E	; 78
     376:	01 97       	sbiw	r24, 0x01	; 1
     378:	f1 f7       	brne	.-4      	; 0x376 <lcd_init+0x72>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <lcd_init+0x78>
     37c:	00 00       	nop
	_delay_ms(5);
	lcd_sendCommand(0x03);
     37e:	83 e0       	ldi	r24, 0x03	; 3
     380:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     384:	87 e5       	ldi	r24, 0x57	; 87
     386:	92 e0       	ldi	r25, 0x02	; 2
     388:	01 97       	sbiw	r24, 0x01	; 1
     38a:	f1 f7       	brne	.-4      	; 0x388 <lcd_init+0x84>
     38c:	00 c0       	rjmp	.+0      	; 0x38e <lcd_init+0x8a>
     38e:	00 00       	nop
	_delay_us(150);
	lcd_sendCommand(0x03);
     390:	83 e0       	ldi	r24, 0x03	; 3
     392:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
	lcd_sendCommand(0x02);
     396:	82 e0       	ldi	r24, 0x02	; 2
     398:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
	lcd_sendCommand(0x02);
     39c:	82 e0       	ldi	r24, 0x02	; 2
     39e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
	lcd_sendCommand(LCD_CMD_4BIT_MODE);
     3a2:	88 e2       	ldi	r24, 0x28	; 40
     3a4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
	lcd_sendCommand(0x08);
     3a8:	88 e0       	ldi	r24, 0x08	; 8
     3aa:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
	lcd_sendCommand(0x00);
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
	lcd_sendCommand(0x0C);
     3b4:	8c e0       	ldi	r24, 0x0C	; 12
     3b6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
	lcd_sendCommand(0x00);
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
	lcd_sendCommand(LCD_CMD_CURSOR_INCREMENT);
     3c0:	86 e0       	ldi	r24, 0x06	; 6
     3c2:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <lcd_sendCommand>

000003c6 <lcd_goTo>:
	enablePulse();
}

void lcd_goTo(u8 row, u8 col)
{
	switch (row)
     3c6:	88 23       	and	r24, r24
     3c8:	19 f0       	breq	.+6      	; 0x3d0 <lcd_goTo+0xa>
     3ca:	81 30       	cpi	r24, 0x01	; 1
     3cc:	19 f0       	breq	.+6      	; 0x3d4 <lcd_goTo+0xe>
     3ce:	08 95       	ret
	{
		case row0:
			lcd_sendCommand(0x80 + col);
     3d0:	80 e8       	ldi	r24, 0x80	; 128
     3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <lcd_goTo+0x10>
		break;
		
		case row1:
			lcd_sendCommand(0xC0 + col);		//0xC0 = 0x80 + 0x40
     3d4:	80 ec       	ldi	r24, 0xC0	; 192
     3d6:	86 0f       	add	r24, r22
     3d8:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <lcd_sendCommand>

000003dc <lcd_displayChar>:
	}
}

void lcd_displayChar(u8 character)
{
	lcd_writeData(character);
     3dc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <lcd_writeData>

000003e0 <lcd_displayStr>:
}

void lcd_displayStr(u8 str[])
{
     3e0:	0f 93       	push	r16
     3e2:	1f 93       	push	r17
     3e4:	cf 93       	push	r28
     3e6:	8c 01       	movw	r16, r24
	u8 i=0;
     3e8:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[i] != '\0')
     3ea:	f8 01       	movw	r30, r16
     3ec:	ec 0f       	add	r30, r28
     3ee:	f1 1d       	adc	r31, r1
     3f0:	80 81       	ld	r24, Z
     3f2:	88 23       	and	r24, r24
     3f4:	21 f0       	breq	.+8      	; 0x3fe <lcd_displayStr+0x1e>
	}
}

void lcd_displayChar(u8 character)
{
	lcd_writeData(character);
     3f6:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_writeData>
{
	u8 i=0;
	while (str[i] != '\0')
	{
		lcd_displayChar(str[i]);
		i++;
     3fa:	cf 5f       	subi	r28, 0xFF	; 255
     3fc:	f6 cf       	rjmp	.-20     	; 0x3ea <lcd_displayStr+0xa>
	}
}
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	08 95       	ret

00000406 <lcd_displayNums>:

void lcd_displayNums(u16 num)
{
     406:	0f 93       	push	r16
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	cd b7       	in	r28, 0x3d	; 61
     410:	de b7       	in	r29, 0x3e	; 62
     412:	a1 97       	sbiw	r28, 0x21	; 33
     414:	0f b6       	in	r0, 0x3f	; 63
     416:	f8 94       	cli
     418:	de bf       	out	0x3e, r29	; 62
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	cd bf       	out	0x3d, r28	; 61
	u8 buffer[33];
	sprintf(buffer,"%d",num);
     41e:	9f 93       	push	r25
     420:	8f 93       	push	r24
     422:	8f e0       	ldi	r24, 0x0F	; 15
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	9f 93       	push	r25
     428:	8f 93       	push	r24
     42a:	8e 01       	movw	r16, r28
     42c:	0f 5f       	subi	r16, 0xFF	; 255
     42e:	1f 4f       	sbci	r17, 0xFF	; 255
     430:	1f 93       	push	r17
     432:	0f 93       	push	r16
     434:	0e 94 b8 12 	call	0x2570	; 0x2570 <sprintf>
	lcd_displayStr(buffer);
     438:	c8 01       	movw	r24, r16
     43a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
}
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	a1 96       	adiw	r28, 0x21	; 33
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	f8 94       	cli
     450:	de bf       	out	0x3e, r29	; 62
     452:	0f be       	out	0x3f, r0	; 63
     454:	cd bf       	out	0x3d, r28	; 61
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	1f 91       	pop	r17
     45c:	0f 91       	pop	r16
     45e:	08 95       	ret

00000460 <LM35_init>:

#include "lm35.h"

void LM35_init(void)
{
	adc_init();
     460:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <adc_init>

00000464 <LM35_read>:
u16 LM35_read(void)
{
	u16 adcRead = 0;
	f32 volt = 0;
	u16 tempRead = 0;
	adcRead = adc_read(LM35_PIN);
     464:	85 e0       	ldi	r24, 0x05	; 5
     466:	0e 94 dd 02 	call	0x5ba	; 0x5ba <adc_read>
	volt = (f32)(adcRead*(VOLT_PER_STEP));
	tempRead = (u16)(volt/VOLT_PER_DEG);
	return tempRead;
     46a:	bc 01       	movw	r22, r24
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 77 11 	call	0x22ee	; 0x22ee <__floatunsisf>
     474:	2a e1       	ldi	r18, 0x1A	; 26
     476:	37 e6       	ldi	r19, 0x67	; 103
     478:	4c e9       	ldi	r20, 0x9C	; 156
     47a:	50 e4       	ldi	r21, 0x40	; 64
     47c:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	40 e2       	ldi	r20, 0x20	; 32
     486:	51 e4       	ldi	r21, 0x41	; 65
     488:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__divsf3>
     48c:	0e 94 48 11 	call	0x2290	; 0x2290 <__fixunssfsi>
}
     490:	cb 01       	movw	r24, r22
     492:	08 95       	ret

00000494 <MM74C922_Decode>:
	gie_enableAllInterrupts();
	
}

void MM74C922_Decode()
{
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	10 e0       	ldi	r17, 0x00	; 0
    u8 temp = 0;
     49e:	c0 e0       	ldi	r28, 0x00	; 0
    for (u8 i = 0; i < 4; i++)
    {
        temp |= (dio_readChannel(PORT_ID, PIN_S_ID + i) << i);
     4a0:	64 e0       	ldi	r22, 0x04	; 4
     4a2:	60 0f       	add	r22, r16
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <dio_readChannel>
     4aa:	00 2e       	mov	r0, r16
     4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <MM74C922_Decode+0x1c>
     4ae:	88 0f       	add	r24, r24
     4b0:	0a 94       	dec	r0
     4b2:	ea f7       	brpl	.-6      	; 0x4ae <MM74C922_Decode+0x1a>
     4b4:	c8 2b       	or	r28, r24
     4b6:	0f 5f       	subi	r16, 0xFF	; 255
     4b8:	1f 4f       	sbci	r17, 0xFF	; 255
}

void MM74C922_Decode()
{
    u8 temp = 0;
    for (u8 i = 0; i < 4; i++)
     4ba:	04 30       	cpi	r16, 0x04	; 4
     4bc:	11 05       	cpc	r17, r1
     4be:	81 f7       	brne	.-32     	; 0x4a0 <MM74C922_Decode+0xc>
    {
        temp |= (dio_readChannel(PORT_ID, PIN_S_ID + i) << i);
    }
    Last_key = Table[temp];
     4c0:	ec 2f       	mov	r30, r28
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	ef 58       	subi	r30, 0x8F	; 143
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	80 81       	ld	r24, Z
     4ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	local_menu_Idle_Reset();
}
     4ce:	cf 91       	pop	r28
     4d0:	1f 91       	pop	r17
     4d2:	0f 91       	pop	r16
    for (u8 i = 0; i < 4; i++)
    {
        temp |= (dio_readChannel(PORT_ID, PIN_S_ID + i) << i);
    }
    Last_key = Table[temp];
	local_menu_Idle_Reset();
     4d4:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <local_menu_Idle_Reset>

000004d8 <MM74C922_Init>:
                       1, 2, 3, KEY_C,
                       4, 5, 6, KEY_B,
                       7, 8, 9, KEY_A};

void MM74C922_Init()
{
     4d8:	cf 93       	push	r28
	for (u8 i = PIN_S_ID; i <= PIN_E_ID; i++)
     4da:	c4 e0       	ldi	r28, 0x04	; 4
    {
		dio_setPinDirection(PORT_ID, i, INPUT);
     4dc:	40 e0       	ldi	r20, 0x00	; 0
     4de:	6c 2f       	mov	r22, r28
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <dio_setPinDirection>
                       4, 5, 6, KEY_B,
                       7, 8, 9, KEY_A};

void MM74C922_Init()
{
	for (u8 i = PIN_S_ID; i <= PIN_E_ID; i++)
     4e6:	cf 5f       	subi	r28, 0xFF	; 255
     4e8:	c8 30       	cpi	r28, 0x08	; 8
     4ea:	c1 f7       	brne	.-16     	; 0x4dc <MM74C922_Init+0x4>
    {
		dio_setPinDirection(PORT_ID, i, INPUT);
    }
	extINT_setCallBack(EXT_INT0_ID, &MM74C922_Decode);
     4ec:	6a e4       	ldi	r22, 0x4A	; 74
     4ee:	72 e0       	ldi	r23, 0x02	; 2
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	0e 94 a3 04 	call	0x946	; 0x946 <extINT_setCallBack>
	extINT_setSenseControl(EXT_INT0_ID,FALLING_EDGE);
     4f6:	62 e0       	ldi	r22, 0x02	; 2
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	0e 94 5d 04 	call	0x8ba	; 0x8ba <extINT_setSenseControl>
	extINT_enable(EXT_INT0_ID);
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	0e 94 4d 04 	call	0x89a	; 0x89a <extINT_enable>
	gie_enableAllInterrupts();
	
}
     504:	cf 91       	pop	r28
		dio_setPinDirection(PORT_ID, i, INPUT);
    }
	extINT_setCallBack(EXT_INT0_ID, &MM74C922_Decode);
	extINT_setSenseControl(EXT_INT0_ID,FALLING_EDGE);
	extINT_enable(EXT_INT0_ID);
	gie_enableAllInterrupts();
     506:	0c 94 33 05 	jmp	0xa66	; 0xa66 <gie_enableAllInterrupts>

0000050a <MM74C922_GetKey>:
	local_menu_Idle_Reset();
}

u8 MM74C922_GetKey(void)
{
	u8 temp = Last_key;
     50a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
	Last_key = NO_DATA;
     50e:	9f ef       	ldi	r25, 0xFF	; 255
     510:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    return temp;
     514:	08 95       	ret

00000516 <POT_init>:

#include "pot.h"

void POT_init(void)
{
	adc_init();
     516:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <adc_init>

0000051a <POT_read>:
}

u16 POT_read(void)
{
	u16 adcRead = 0;
	adcRead = adc_read(POT_PIN);
     51a:	87 e0       	ldi	r24, 0x07	; 7
     51c:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <adc_read>

00000520 <relay_init>:
#include "dio.h"
#include "relay.h"

void relay_init(void)
{
	dio_setPinDirection(PORTA_ID,PIN0_ID,OUTPUT);
     520:	41 e0       	ldi	r20, 0x01	; 1
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <dio_setPinDirection>
	dio_setPinDirection(PORTA_ID,PIN1_ID,OUTPUT);
     52a:	41 e0       	ldi	r20, 0x01	; 1
     52c:	61 e0       	ldi	r22, 0x01	; 1
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <dio_setPinDirection>
	dio_setPinDirection(PORTA_ID,PIN2_ID,OUTPUT);
     534:	41 e0       	ldi	r20, 0x01	; 1
     536:	62 e0       	ldi	r22, 0x02	; 2
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <dio_setPinDirection>
	dio_setPinDirection(PORTA_ID,PIN3_ID,OUTPUT);
     53e:	41 e0       	ldi	r20, 0x01	; 1
     540:	63 e0       	ldi	r22, 0x03	; 3
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <dio_setPinDirection>
	dio_setPinDirection(PORTA_ID,PIN4_ID,OUTPUT);
     548:	41 e0       	ldi	r20, 0x01	; 1
     54a:	64 e0       	ldi	r22, 0x04	; 4
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <dio_setPinDirection>

00000552 <relay_toggle>:
}

void relay_toggle(u8 id)
{
	switch(id)
     552:	83 30       	cpi	r24, 0x03	; 3
     554:	79 f0       	breq	.+30     	; 0x574 <relay_toggle+0x22>
     556:	28 f4       	brcc	.+10     	; 0x562 <relay_toggle+0x10>
     558:	81 30       	cpi	r24, 0x01	; 1
     55a:	41 f0       	breq	.+16     	; 0x56c <relay_toggle+0x1a>
     55c:	82 30       	cpi	r24, 0x02	; 2
     55e:	41 f0       	breq	.+16     	; 0x570 <relay_toggle+0x1e>
     560:	08 95       	ret
     562:	84 30       	cpi	r24, 0x04	; 4
     564:	49 f0       	breq	.+18     	; 0x578 <relay_toggle+0x26>
     566:	85 30       	cpi	r24, 0x05	; 5
     568:	49 f0       	breq	.+18     	; 0x57c <relay_toggle+0x2a>
     56a:	08 95       	ret
	{
		case RELAY1_ID:
			dio_toggleChannel(PORTA_ID,PIN0_ID);
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	07 c0       	rjmp	.+14     	; 0x57e <relay_toggle+0x2c>
		break;
		
		case RELAY2_ID:
			dio_toggleChannel(PORTA_ID,PIN1_ID);
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	05 c0       	rjmp	.+10     	; 0x57e <relay_toggle+0x2c>
		break;
		
		case RELAY3_ID:
			dio_toggleChannel(PORTA_ID,PIN2_ID);
     574:	62 e0       	ldi	r22, 0x02	; 2
     576:	03 c0       	rjmp	.+6      	; 0x57e <relay_toggle+0x2c>
		break;
		
		case RELAY4_ID:
			dio_toggleChannel(PORTA_ID,PIN3_ID);
     578:	63 e0       	ldi	r22, 0x03	; 3
     57a:	01 c0       	rjmp	.+2      	; 0x57e <relay_toggle+0x2c>
		break;
		
		case RELAY5_ID:
			dio_toggleChannel(PORTA_ID,PIN4_ID);
     57c:	64 e0       	ldi	r22, 0x04	; 4
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	0c 94 bc 03 	jmp	0x778	; 0x778 <dio_toggleChannel>

00000584 <servo_init>:


#include "servo.h"

void servo_init(u8 portId, u8 pinId, u8 direction, u8 modeA, u8 modeB, u8 freq, u16 topValue)
{
     584:	cf 92       	push	r12
     586:	ef 92       	push	r14
     588:	0f 93       	push	r16
     58a:	cf 93       	push	r28
     58c:	c2 2f       	mov	r28, r18
	dio_setPinDirection(portId,pinId,direction);
     58e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <dio_setPinDirection>
	pwm1_setTopValue(topValue);
     592:	8c 2d       	mov	r24, r12
     594:	0e 94 d7 05 	call	0xbae	; 0xbae <pwm1_setTopValue>
	pwm1_init(modeA, modeB, freq);
     598:	4e 2d       	mov	r20, r14
     59a:	60 2f       	mov	r22, r16
     59c:	8c 2f       	mov	r24, r28
}
     59e:	cf 91       	pop	r28
     5a0:	0f 91       	pop	r16
     5a2:	ef 90       	pop	r14
     5a4:	cf 90       	pop	r12

void servo_init(u8 portId, u8 pinId, u8 direction, u8 modeA, u8 modeB, u8 freq, u16 topValue)
{
	dio_setPinDirection(portId,pinId,direction);
	pwm1_setTopValue(topValue);
	pwm1_init(modeA, modeB, freq);
     5a6:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <pwm1_init>

000005aa <servo_setAngleDegree>:
}

void servo_setAngleDegree(u16 degree)
{
	pwm1_setDutyCycle(degree);
     5aa:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <pwm1_setDutyCycle>

000005ae <adc_init>:
#include "bit_math.h"

void adc_init(void)
{
	/*Enable ADC*/
	SET_BIT(ADC_ADCSRA_REG,ADC_ENABLE_BIT_NO);
     5ae:	37 9a       	sbi	0x06, 7	; 6
	
	/*ADC clock*/
	ADC_ADCSRA_REG |= ADC_PRESCALER_128;
     5b0:	86 b1       	in	r24, 0x06	; 6
     5b2:	87 60       	ori	r24, 0x07	; 7
     5b4:	86 b9       	out	0x06, r24	; 6
	
	/*Select AREF*/
	ADC_ADMUX_REG |= ADC_VREF_AVCC;
     5b6:	3e 9a       	sbi	0x07, 6	; 7
     5b8:	08 95       	ret

000005ba <adc_read>:
}

u16 adc_read(u8 channelId)
{
	/*Select channel*/
	ADC_ADMUX_REG &= ADC_CHANNELID_CLEAR_MUSK;
     5ba:	97 b1       	in	r25, 0x07	; 7
     5bc:	90 7e       	andi	r25, 0xE0	; 224
     5be:	97 b9       	out	0x07, r25	; 7
	ADC_ADMUX_REG |= channelId;
     5c0:	97 b1       	in	r25, 0x07	; 7
     5c2:	89 2b       	or	r24, r25
     5c4:	87 b9       	out	0x07, r24	; 7
	
	/*Start conversion*/
	SET_BIT(ADC_ADCSRA_REG,ADC_START_CONVERSION_BIT_NO);
     5c6:	36 9a       	sbi	0x06, 6	; 6
	
	/*Wait until conversion finishes*/
	while (CHECK_BIT(ADC_ADCSRA_REG,ADC_INT_FLAG_BIT_NO) == 0){
     5c8:	34 9b       	sbis	0x06, 4	; 6
     5ca:	fe cf       	rjmp	.-4      	; 0x5c8 <adc_read+0xe>
		;
	}
	
	/*Clear conversion complete flag*/
	SET_BIT(ADC_ADCSRA_REG,ADC_INT_FLAG_BIT_NO);
     5cc:	34 9a       	sbi	0x06, 4	; 6
	
	/*Return channel ADC conversion value*/
	return ADC_ADCREAD_REG;
     5ce:	84 b1       	in	r24, 0x04	; 4
     5d0:	95 b1       	in	r25, 0x05	; 5
}
     5d2:	08 95       	ret

000005d4 <dio_setPinDirection>:
#include "dio.h"
#include "bit_math.h"

void dio_setPinDirection(u8 portId, u8 pinId, u8 direction)
{
	switch (portId)
     5d4:	81 30       	cpi	r24, 0x01	; 1
     5d6:	f9 f0       	breq	.+62     	; 0x616 <dio_setPinDirection+0x42>
     5d8:	30 f0       	brcs	.+12     	; 0x5e6 <dio_setPinDirection+0x12>
     5da:	82 30       	cpi	r24, 0x02	; 2
     5dc:	a1 f1       	breq	.+104    	; 0x646 <dio_setPinDirection+0x72>
     5de:	83 30       	cpi	r24, 0x03	; 3
     5e0:	09 f4       	brne	.+2      	; 0x5e4 <dio_setPinDirection+0x10>
     5e2:	49 c0       	rjmp	.+146    	; 0x676 <dio_setPinDirection+0xa2>
     5e4:	08 95       	ret
	{
		case PORTA_ID:
		//DDRA
			if (direction == OUTPUT) 
     5e6:	41 30       	cpi	r20, 0x01	; 1
     5e8:	49 f4       	brne	.+18     	; 0x5fc <dio_setPinDirection+0x28>
			{
				SET_BIT(DIO_DDRA_REG,pinId);
     5ea:	2a b3       	in	r18, 0x1a	; 26
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <dio_setPinDirection+0x20>
     5f2:	88 0f       	add	r24, r24
     5f4:	6a 95       	dec	r22
     5f6:	ea f7       	brpl	.-6      	; 0x5f2 <dio_setPinDirection+0x1e>
     5f8:	82 2b       	or	r24, r18
     5fa:	0b c0       	rjmp	.+22     	; 0x612 <dio_setPinDirection+0x3e>
			}
			else if (direction == INPUT)
     5fc:	41 11       	cpse	r20, r1
     5fe:	52 c0       	rjmp	.+164    	; 0x6a4 <dio_setPinDirection+0xd0>
			{
				CLEAR_BIT(DIO_DDRA_REG,pinId);
     600:	2a b3       	in	r18, 0x1a	; 26
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	01 c0       	rjmp	.+2      	; 0x60a <dio_setPinDirection+0x36>
     608:	88 0f       	add	r24, r24
     60a:	6a 95       	dec	r22
     60c:	ea f7       	brpl	.-6      	; 0x608 <dio_setPinDirection+0x34>
     60e:	80 95       	com	r24
     610:	82 23       	and	r24, r18
     612:	8a bb       	out	0x1a, r24	; 26
     614:	08 95       	ret
			}
		break;
		
		case PORTB_ID:
		//DDRB
			if (direction == OUTPUT)
     616:	41 30       	cpi	r20, 0x01	; 1
     618:	49 f4       	brne	.+18     	; 0x62c <dio_setPinDirection+0x58>
			{
				SET_BIT(DIO_DDRB_REG,pinId);
     61a:	27 b3       	in	r18, 0x17	; 23
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	01 c0       	rjmp	.+2      	; 0x624 <dio_setPinDirection+0x50>
     622:	88 0f       	add	r24, r24
     624:	6a 95       	dec	r22
     626:	ea f7       	brpl	.-6      	; 0x622 <dio_setPinDirection+0x4e>
     628:	82 2b       	or	r24, r18
     62a:	0b c0       	rjmp	.+22     	; 0x642 <dio_setPinDirection+0x6e>
			}
			else if (direction == INPUT)
     62c:	41 11       	cpse	r20, r1
     62e:	3a c0       	rjmp	.+116    	; 0x6a4 <dio_setPinDirection+0xd0>
			{
				CLEAR_BIT(DIO_DDRB_REG,pinId);
     630:	27 b3       	in	r18, 0x17	; 23
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	01 c0       	rjmp	.+2      	; 0x63a <dio_setPinDirection+0x66>
     638:	88 0f       	add	r24, r24
     63a:	6a 95       	dec	r22
     63c:	ea f7       	brpl	.-6      	; 0x638 <dio_setPinDirection+0x64>
     63e:	80 95       	com	r24
     640:	82 23       	and	r24, r18
     642:	87 bb       	out	0x17, r24	; 23
     644:	08 95       	ret
			}
		break;
		
		case PORTC_ID:
		//DDRC
			if (direction == OUTPUT)
     646:	41 30       	cpi	r20, 0x01	; 1
     648:	49 f4       	brne	.+18     	; 0x65c <dio_setPinDirection+0x88>
			{
				SET_BIT(DIO_DDRC_REG,pinId);
     64a:	24 b3       	in	r18, 0x14	; 20
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	01 c0       	rjmp	.+2      	; 0x654 <dio_setPinDirection+0x80>
     652:	88 0f       	add	r24, r24
     654:	6a 95       	dec	r22
     656:	ea f7       	brpl	.-6      	; 0x652 <dio_setPinDirection+0x7e>
     658:	82 2b       	or	r24, r18
     65a:	0b c0       	rjmp	.+22     	; 0x672 <dio_setPinDirection+0x9e>
			}
			else if (direction == INPUT)
     65c:	41 11       	cpse	r20, r1
     65e:	22 c0       	rjmp	.+68     	; 0x6a4 <dio_setPinDirection+0xd0>
			{
				CLEAR_BIT(DIO_DDRC_REG,pinId);
     660:	24 b3       	in	r18, 0x14	; 20
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	01 c0       	rjmp	.+2      	; 0x66a <dio_setPinDirection+0x96>
     668:	88 0f       	add	r24, r24
     66a:	6a 95       	dec	r22
     66c:	ea f7       	brpl	.-6      	; 0x668 <dio_setPinDirection+0x94>
     66e:	80 95       	com	r24
     670:	82 23       	and	r24, r18
     672:	84 bb       	out	0x14, r24	; 20
     674:	08 95       	ret
			}
		break;
		
		case PORTD_ID:
		//DDRD
			if (direction == OUTPUT)
     676:	41 30       	cpi	r20, 0x01	; 1
     678:	49 f4       	brne	.+18     	; 0x68c <dio_setPinDirection+0xb8>
			{
				SET_BIT(DIO_DDRD_REG,pinId);
     67a:	21 b3       	in	r18, 0x11	; 17
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	01 c0       	rjmp	.+2      	; 0x684 <dio_setPinDirection+0xb0>
     682:	88 0f       	add	r24, r24
     684:	6a 95       	dec	r22
     686:	ea f7       	brpl	.-6      	; 0x682 <dio_setPinDirection+0xae>
     688:	82 2b       	or	r24, r18
     68a:	0b c0       	rjmp	.+22     	; 0x6a2 <dio_setPinDirection+0xce>
			}
			else if (direction == INPUT)
     68c:	41 11       	cpse	r20, r1
     68e:	0a c0       	rjmp	.+20     	; 0x6a4 <dio_setPinDirection+0xd0>
			{
				CLEAR_BIT(DIO_DDRD_REG,pinId);
     690:	21 b3       	in	r18, 0x11	; 17
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	01 c0       	rjmp	.+2      	; 0x69a <dio_setPinDirection+0xc6>
     698:	88 0f       	add	r24, r24
     69a:	6a 95       	dec	r22
     69c:	ea f7       	brpl	.-6      	; 0x698 <dio_setPinDirection+0xc4>
     69e:	80 95       	com	r24
     6a0:	82 23       	and	r24, r18
     6a2:	81 bb       	out	0x11, r24	; 17
     6a4:	08 95       	ret

000006a6 <dio_writeChannel>:
	}
}

void dio_writeChannel(u8 portId, u8 pinId, u8 level)
{
	switch (portId)
     6a6:	81 30       	cpi	r24, 0x01	; 1
     6a8:	f9 f0       	breq	.+62     	; 0x6e8 <dio_writeChannel+0x42>
     6aa:	30 f0       	brcs	.+12     	; 0x6b8 <dio_writeChannel+0x12>
     6ac:	82 30       	cpi	r24, 0x02	; 2
     6ae:	a1 f1       	breq	.+104    	; 0x718 <dio_writeChannel+0x72>
     6b0:	83 30       	cpi	r24, 0x03	; 3
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <dio_writeChannel+0x10>
     6b4:	49 c0       	rjmp	.+146    	; 0x748 <dio_writeChannel+0xa2>
     6b6:	08 95       	ret
	{
		case PORTA_ID:
		//PORTA
			if (level == HIGH)
     6b8:	41 30       	cpi	r20, 0x01	; 1
     6ba:	49 f4       	brne	.+18     	; 0x6ce <dio_writeChannel+0x28>
			{
				SET_BIT(DIO_PORTA_REG,pinId);
     6bc:	2b b3       	in	r18, 0x1b	; 27
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <dio_writeChannel+0x20>
     6c4:	88 0f       	add	r24, r24
     6c6:	6a 95       	dec	r22
     6c8:	ea f7       	brpl	.-6      	; 0x6c4 <dio_writeChannel+0x1e>
     6ca:	82 2b       	or	r24, r18
     6cc:	0b c0       	rjmp	.+22     	; 0x6e4 <dio_writeChannel+0x3e>
			}
			else if (level == LOW)
     6ce:	41 11       	cpse	r20, r1
     6d0:	52 c0       	rjmp	.+164    	; 0x776 <dio_writeChannel+0xd0>
			{
				CLEAR_BIT(DIO_PORTA_REG,pinId);
     6d2:	2b b3       	in	r18, 0x1b	; 27
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	01 c0       	rjmp	.+2      	; 0x6dc <dio_writeChannel+0x36>
     6da:	88 0f       	add	r24, r24
     6dc:	6a 95       	dec	r22
     6de:	ea f7       	brpl	.-6      	; 0x6da <dio_writeChannel+0x34>
     6e0:	80 95       	com	r24
     6e2:	82 23       	and	r24, r18
     6e4:	8b bb       	out	0x1b, r24	; 27
     6e6:	08 95       	ret
			}
		break;
		
		case PORTB_ID:
		//PORTB
			if (level == HIGH)
     6e8:	41 30       	cpi	r20, 0x01	; 1
     6ea:	49 f4       	brne	.+18     	; 0x6fe <dio_writeChannel+0x58>
			{
				SET_BIT(DIO_PORTB_REG,pinId);
     6ec:	28 b3       	in	r18, 0x18	; 24
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <dio_writeChannel+0x50>
     6f4:	88 0f       	add	r24, r24
     6f6:	6a 95       	dec	r22
     6f8:	ea f7       	brpl	.-6      	; 0x6f4 <dio_writeChannel+0x4e>
     6fa:	82 2b       	or	r24, r18
     6fc:	0b c0       	rjmp	.+22     	; 0x714 <dio_writeChannel+0x6e>
			}
			else if (level == LOW)
     6fe:	41 11       	cpse	r20, r1
     700:	3a c0       	rjmp	.+116    	; 0x776 <dio_writeChannel+0xd0>
			{
				CLEAR_BIT(DIO_PORTB_REG,pinId);
     702:	28 b3       	in	r18, 0x18	; 24
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	01 c0       	rjmp	.+2      	; 0x70c <dio_writeChannel+0x66>
     70a:	88 0f       	add	r24, r24
     70c:	6a 95       	dec	r22
     70e:	ea f7       	brpl	.-6      	; 0x70a <dio_writeChannel+0x64>
     710:	80 95       	com	r24
     712:	82 23       	and	r24, r18
     714:	88 bb       	out	0x18, r24	; 24
     716:	08 95       	ret
			}
		break;
		
		case PORTC_ID:
		//PORTC
			if (level == HIGH)
     718:	41 30       	cpi	r20, 0x01	; 1
     71a:	49 f4       	brne	.+18     	; 0x72e <dio_writeChannel+0x88>
			{
				SET_BIT(DIO_PORTC_REG,pinId);
     71c:	25 b3       	in	r18, 0x15	; 21
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	01 c0       	rjmp	.+2      	; 0x726 <dio_writeChannel+0x80>
     724:	88 0f       	add	r24, r24
     726:	6a 95       	dec	r22
     728:	ea f7       	brpl	.-6      	; 0x724 <dio_writeChannel+0x7e>
     72a:	82 2b       	or	r24, r18
     72c:	0b c0       	rjmp	.+22     	; 0x744 <dio_writeChannel+0x9e>
			}
			else if (level == LOW)
     72e:	41 11       	cpse	r20, r1
     730:	22 c0       	rjmp	.+68     	; 0x776 <dio_writeChannel+0xd0>
			{
				CLEAR_BIT(DIO_PORTC_REG,pinId);
     732:	25 b3       	in	r18, 0x15	; 21
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	01 c0       	rjmp	.+2      	; 0x73c <dio_writeChannel+0x96>
     73a:	88 0f       	add	r24, r24
     73c:	6a 95       	dec	r22
     73e:	ea f7       	brpl	.-6      	; 0x73a <dio_writeChannel+0x94>
     740:	80 95       	com	r24
     742:	82 23       	and	r24, r18
     744:	85 bb       	out	0x15, r24	; 21
     746:	08 95       	ret
			}
		break;
		
		case PORTD_ID:
		//PORTD
			if (level == HIGH)
     748:	41 30       	cpi	r20, 0x01	; 1
     74a:	49 f4       	brne	.+18     	; 0x75e <dio_writeChannel+0xb8>
			{
				SET_BIT(DIO_PORTD_REG,pinId);
     74c:	22 b3       	in	r18, 0x12	; 18
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	01 c0       	rjmp	.+2      	; 0x756 <dio_writeChannel+0xb0>
     754:	88 0f       	add	r24, r24
     756:	6a 95       	dec	r22
     758:	ea f7       	brpl	.-6      	; 0x754 <dio_writeChannel+0xae>
     75a:	82 2b       	or	r24, r18
     75c:	0b c0       	rjmp	.+22     	; 0x774 <dio_writeChannel+0xce>
			}
			else if (level == LOW)
     75e:	41 11       	cpse	r20, r1
     760:	0a c0       	rjmp	.+20     	; 0x776 <dio_writeChannel+0xd0>
			{
				CLEAR_BIT(DIO_PORTD_REG,pinId);
     762:	22 b3       	in	r18, 0x12	; 18
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	01 c0       	rjmp	.+2      	; 0x76c <dio_writeChannel+0xc6>
     76a:	88 0f       	add	r24, r24
     76c:	6a 95       	dec	r22
     76e:	ea f7       	brpl	.-6      	; 0x76a <dio_writeChannel+0xc4>
     770:	80 95       	com	r24
     772:	82 23       	and	r24, r18
     774:	82 bb       	out	0x12, r24	; 18
     776:	08 95       	ret

00000778 <dio_toggleChannel>:
	}
}

void dio_toggleChannel(u8 portId, u8 pinId)
{
	switch (portId)
     778:	81 30       	cpi	r24, 0x01	; 1
     77a:	81 f0       	breq	.+32     	; 0x79c <dio_toggleChannel+0x24>
     77c:	28 f0       	brcs	.+10     	; 0x788 <dio_toggleChannel+0x10>
     77e:	82 30       	cpi	r24, 0x02	; 2
     780:	b9 f0       	breq	.+46     	; 0x7b0 <dio_toggleChannel+0x38>
     782:	83 30       	cpi	r24, 0x03	; 3
     784:	f9 f0       	breq	.+62     	; 0x7c4 <dio_toggleChannel+0x4c>
     786:	08 95       	ret
	{
		case PORTA_ID:
		//PORTA
			TOGGLE_BIT(DIO_PORTA_REG,pinId);
     788:	2b b3       	in	r18, 0x1b	; 27
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	01 c0       	rjmp	.+2      	; 0x792 <dio_toggleChannel+0x1a>
     790:	88 0f       	add	r24, r24
     792:	6a 95       	dec	r22
     794:	ea f7       	brpl	.-6      	; 0x790 <dio_toggleChannel+0x18>
     796:	82 27       	eor	r24, r18
     798:	8b bb       	out	0x1b, r24	; 27
		break;
     79a:	08 95       	ret
		
		case PORTB_ID:
		//PORTB
			TOGGLE_BIT(DIO_PORTB_REG,pinId);
     79c:	28 b3       	in	r18, 0x18	; 24
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <dio_toggleChannel+0x2e>
     7a4:	88 0f       	add	r24, r24
     7a6:	6a 95       	dec	r22
     7a8:	ea f7       	brpl	.-6      	; 0x7a4 <dio_toggleChannel+0x2c>
     7aa:	82 27       	eor	r24, r18
     7ac:	88 bb       	out	0x18, r24	; 24
		break;
     7ae:	08 95       	ret
		
		case PORTC_ID:
		//PORTC
			TOGGLE_BIT(DIO_PORTC_REG,pinId);
     7b0:	25 b3       	in	r18, 0x15	; 21
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <dio_toggleChannel+0x42>
     7b8:	88 0f       	add	r24, r24
     7ba:	6a 95       	dec	r22
     7bc:	ea f7       	brpl	.-6      	; 0x7b8 <dio_toggleChannel+0x40>
     7be:	82 27       	eor	r24, r18
     7c0:	85 bb       	out	0x15, r24	; 21
		break;
     7c2:	08 95       	ret
		
		case PORTD_ID:
		//PORTD
			TOGGLE_BIT(DIO_PORTD_REG,pinId);
     7c4:	22 b3       	in	r18, 0x12	; 18
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	01 c0       	rjmp	.+2      	; 0x7ce <dio_toggleChannel+0x56>
     7cc:	88 0f       	add	r24, r24
     7ce:	6a 95       	dec	r22
     7d0:	ea f7       	brpl	.-6      	; 0x7cc <dio_toggleChannel+0x54>
     7d2:	82 27       	eor	r24, r18
     7d4:	82 bb       	out	0x12, r24	; 18
     7d6:	08 95       	ret

000007d8 <dio_readChannel>:
}

u8 dio_readChannel(u8 portId, u8 pinId)
{
	u8 pinRead = LOW;
	switch (portId)
     7d8:	81 30       	cpi	r24, 0x01	; 1
     7da:	49 f0       	breq	.+18     	; 0x7ee <dio_readChannel+0x16>
     7dc:	30 f0       	brcs	.+12     	; 0x7ea <dio_readChannel+0x12>
     7de:	82 30       	cpi	r24, 0x02	; 2
     7e0:	41 f0       	breq	.+16     	; 0x7f2 <dio_readChannel+0x1a>
     7e2:	83 30       	cpi	r24, 0x03	; 3
     7e4:	79 f4       	brne	.+30     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
		case PORTC_ID:
			pinRead = CHECK_BIT(DIO_PINC_REG,pinId);
		break;
		
		case PORTD_ID:
			pinRead = CHECK_BIT(DIO_PIND_REG,pinId);
     7e6:	80 b3       	in	r24, 0x10	; 16
     7e8:	05 c0       	rjmp	.+10     	; 0x7f4 <dio_readChannel+0x1c>
{
	u8 pinRead = LOW;
	switch (portId)
	{
		case PORTA_ID:
			pinRead = CHECK_BIT(DIO_PINA_REG,pinId);
     7ea:	89 b3       	in	r24, 0x19	; 25
     7ec:	03 c0       	rjmp	.+6      	; 0x7f4 <dio_readChannel+0x1c>
		break;
		
		case PORTB_ID:
			pinRead = CHECK_BIT(DIO_PINB_REG,pinId);
     7ee:	86 b3       	in	r24, 0x16	; 22
     7f0:	01 c0       	rjmp	.+2      	; 0x7f4 <dio_readChannel+0x1c>
		break;
		
		case PORTC_ID:
			pinRead = CHECK_BIT(DIO_PINC_REG,pinId);
     7f2:	83 b3       	in	r24, 0x13	; 19
		break;
		
		case PORTD_ID:
			pinRead = CHECK_BIT(DIO_PIND_REG,pinId);
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	02 c0       	rjmp	.+4      	; 0x7fc <dio_readChannel+0x24>
     7f8:	95 95       	asr	r25
     7fa:	87 95       	ror	r24
     7fc:	6a 95       	dec	r22
     7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <dio_readChannel+0x20>
     800:	81 70       	andi	r24, 0x01	; 1
		break;
     802:	08 95       	ret
	}
}

u8 dio_readChannel(u8 portId, u8 pinId)
{
	u8 pinRead = LOW;
     804:	80 e0       	ldi	r24, 0x00	; 0
		case PORTD_ID:
			pinRead = CHECK_BIT(DIO_PIND_REG,pinId);
		break;
	}
	return pinRead;
}
     806:	08 95       	ret

00000808 <EEPROM_write>:
#include "eeprom.h"
#include "avr/io.h"
void EEPROM_write(u16 address, u8 data)
{
	/* Wait for completion of previous write */
	while(EEPROM_EECR_REG & (1<<EEPROM_WRITE_ENABLE_BIT_NO));
     808:	e1 99       	sbic	0x1c, 1	; 28
     80a:	fe cf       	rjmp	.-4      	; 0x808 <EEPROM_write>
	/* Set up address and data registers */
	EEAR = address;
     80c:	9f bb       	out	0x1f, r25	; 31
     80e:	8e bb       	out	0x1e, r24	; 30
	EEPROM_EEDR_REG = data;
     810:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EEPROM_EECR_REG |= (1<<EEPROM_MASTER_WRITE_ENABLE_BIT_NO);
     812:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start EEPROM write by setting EEWE */
	EEPROM_EECR_REG |= (1<<EEPROM_WRITE_ENABLE_BIT_NO);
     814:	e1 9a       	sbi	0x1c, 1	; 28
     816:	08 95       	ret

00000818 <EEPROM_read>:
}

u8 EEPROM_read(u16 address)
{
	/* Wait for completion of previous write */
	while(EEPROM_EECR_REG & (1<<EEPROM_WRITE_ENABLE_BIT_NO));
     818:	e1 99       	sbic	0x1c, 1	; 28
     81a:	fe cf       	rjmp	.-4      	; 0x818 <EEPROM_read>
	/* Set up address register */
	EEAR = address;
     81c:	9f bb       	out	0x1f, r25	; 31
     81e:	8e bb       	out	0x1e, r24	; 30
	/* Start EEPROM read by writing EERE */
	EEPROM_EECR_REG |= (1<<EEPROM_READ_ENABLE_BIT_NO);
     820:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEPROM_EEDR_REG;
     822:	8d b3       	in	r24, 0x1d	; 29
}
     824:	08 95       	ret

00000826 <EEPROM_write_block>:

void EEPROM_write_block(u8 *str, u16 start_byte_adr,u8 n_byte)
{
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	8c 01       	movw	r16, r24
     834:	eb 01       	movw	r28, r22
	u16 end_byte_adr = start_byte_adr + n_byte;
     836:	7b 01       	movw	r14, r22
     838:	e4 0e       	add	r14, r20
     83a:	f1 1c       	adc	r15, r1
	while(start_byte_adr < end_byte_adr) /* Loop For Counts And Copy */
     83c:	ce 15       	cp	r28, r14
     83e:	df 05       	cpc	r29, r15
     840:	40 f4       	brcc	.+16     	; 0x852 <EEPROM_write_block+0x2c>
	{
		EEPROM_write(start_byte_adr, str[0]);
     842:	f8 01       	movw	r30, r16
     844:	61 91       	ld	r22, Z+
     846:	8f 01       	movw	r16, r30
     848:	ce 01       	movw	r24, r28
     84a:	0e 94 04 04 	call	0x808	; 0x808 <EEPROM_write>
		str++;
		start_byte_adr++;
     84e:	21 96       	adiw	r28, 0x01	; 1
     850:	f5 cf       	rjmp	.-22     	; 0x83c <EEPROM_write_block+0x16>
	}
}
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	ff 90       	pop	r15
     85c:	ef 90       	pop	r14
     85e:	08 95       	ret

00000860 <EEPROM_read_block>:

void EEPROM_read_block(u8 *str, u16 start_byte_adr, u8 n_byte)
{
     860:	ef 92       	push	r14
     862:	ff 92       	push	r15
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	8c 01       	movw	r16, r24
     86e:	eb 01       	movw	r28, r22
	u16 end_byte_adr = start_byte_adr + n_byte;
     870:	7b 01       	movw	r14, r22
     872:	e4 0e       	add	r14, r20
     874:	f1 1c       	adc	r15, r1
	while (start_byte_adr < end_byte_adr) /* Loop For Counts And Copy */
     876:	ce 15       	cp	r28, r14
     878:	df 05       	cpc	r29, r15
     87a:	40 f4       	brcc	.+16     	; 0x88c <EEPROM_read_block+0x2c>
	{
		*str = EEPROM_read(start_byte_adr);
     87c:	ce 01       	movw	r24, r28
     87e:	0e 94 0c 04 	call	0x818	; 0x818 <EEPROM_read>
     882:	f8 01       	movw	r30, r16
     884:	81 93       	st	Z+, r24
     886:	8f 01       	movw	r16, r30
		str++;
		start_byte_adr++;
     888:	21 96       	adiw	r28, 0x01	; 1
     88a:	f5 cf       	rjmp	.-22     	; 0x876 <EEPROM_read_block+0x16>
	}
}
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	0f 91       	pop	r16
     894:	ff 90       	pop	r15
     896:	ef 90       	pop	r14
     898:	08 95       	ret

0000089a <extINT_enable>:
		case EXT_INT1_ID:
			CLEAR_BIT(EXT_INT_GICR_REG,GICR_EXT_INT1_EN_BIT);
		break;
		
		case EXT_INT2_ID:
			CLEAR_BIT(EXT_INT_GICR_REG,GICR_EXT_INT2_EN_BIT);
     89a:	81 30       	cpi	r24, 0x01	; 1
     89c:	39 f0       	breq	.+14     	; 0x8ac <extINT_enable+0x12>
     89e:	18 f0       	brcs	.+6      	; 0x8a6 <extINT_enable+0xc>
     8a0:	82 30       	cpi	r24, 0x02	; 2
     8a2:	39 f0       	breq	.+14     	; 0x8b2 <extINT_enable+0x18>
     8a4:	08 95       	ret
     8a6:	8b b7       	in	r24, 0x3b	; 59
     8a8:	80 64       	ori	r24, 0x40	; 64
     8aa:	05 c0       	rjmp	.+10     	; 0x8b6 <extINT_enable+0x1c>
     8ac:	8b b7       	in	r24, 0x3b	; 59
     8ae:	80 68       	ori	r24, 0x80	; 128
     8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <extINT_enable+0x1c>
     8b2:	8b b7       	in	r24, 0x3b	; 59
     8b4:	80 62       	ori	r24, 0x20	; 32
     8b6:	8b bf       	out	0x3b, r24	; 59
     8b8:	08 95       	ret

000008ba <extINT_setSenseControl>:
	}
}

void extINT_setSenseControl(u8 interruptId, u8 senseControl)
{
	switch (interruptId)
     8ba:	81 30       	cpi	r24, 0x01	; 1
     8bc:	f9 f0       	breq	.+62     	; 0x8fc <extINT_setSenseControl+0x42>
     8be:	18 f0       	brcs	.+6      	; 0x8c6 <extINT_setSenseControl+0xc>
     8c0:	82 30       	cpi	r24, 0x02	; 2
     8c2:	b1 f1       	breq	.+108    	; 0x930 <extINT_setSenseControl+0x76>
     8c4:	08 95       	ret
	{
		case EXT_INT0_ID:
			if (senseControl == LOW_LEVEL)
     8c6:	61 11       	cpse	r22, r1
     8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <extINT_setSenseControl+0x16>
			{
				CLEAR_BIT(EXT_INT_MCUCR_REG,MCUCR_ISC00_BIT_NO);
     8ca:	85 b7       	in	r24, 0x35	; 53
     8cc:	8e 7f       	andi	r24, 0xFE	; 254
     8ce:	04 c0       	rjmp	.+8      	; 0x8d8 <extINT_setSenseControl+0x1e>
				CLEAR_BIT(EXT_INT_MCUCR_REG,MCUCR_ISC01_BIT_NO);
			}
			else if (senseControl == ANY_LOGICAL_CHANGE)
     8d0:	61 30       	cpi	r22, 0x01	; 1
     8d2:	39 f4       	brne	.+14     	; 0x8e2 <extINT_setSenseControl+0x28>
			{
				SET_BIT(EXT_INT_MCUCR_REG,MCUCR_ISC00_BIT_NO);
     8d4:	85 b7       	in	r24, 0x35	; 53
     8d6:	81 60       	ori	r24, 0x01	; 1
     8d8:	85 bf       	out	0x35, r24	; 53
				CLEAR_BIT(EXT_INT_MCUCR_REG,MCUCR_ISC01_BIT_NO);
     8da:	85 b7       	in	r24, 0x35	; 53
     8dc:	8d 7f       	andi	r24, 0xFD	; 253
     8de:	85 bf       	out	0x35, r24	; 53
     8e0:	08 95       	ret
			}
			else if (senseControl == FALLING_EDGE)
     8e2:	62 30       	cpi	r22, 0x02	; 2
     8e4:	19 f4       	brne	.+6      	; 0x8ec <extINT_setSenseControl+0x32>
			{
				CLEAR_BIT(EXT_INT_MCUCR_REG,MCUCR_ISC00_BIT_NO);
     8e6:	85 b7       	in	r24, 0x35	; 53
     8e8:	8e 7f       	andi	r24, 0xFE	; 254
     8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <extINT_setSenseControl+0x3a>
				SET_BIT(EXT_INT_MCUCR_REG,MCUCR_ISC01_BIT_NO);
			}
			else if (senseControl == RISING_EDGE)
     8ec:	63 30       	cpi	r22, 0x03	; 3
     8ee:	51 f5       	brne	.+84     	; 0x944 <extINT_setSenseControl+0x8a>
			{
				SET_BIT(EXT_INT_MCUCR_REG,MCUCR_ISC00_BIT_NO);
     8f0:	85 b7       	in	r24, 0x35	; 53
     8f2:	81 60       	ori	r24, 0x01	; 1
     8f4:	85 bf       	out	0x35, r24	; 53
				SET_BIT(EXT_INT_MCUCR_REG,MCUCR_ISC01_BIT_NO);
     8f6:	85 b7       	in	r24, 0x35	; 53
     8f8:	82 60       	ori	r24, 0x02	; 2
     8fa:	f1 cf       	rjmp	.-30     	; 0x8de <extINT_setSenseControl+0x24>
				/*Do Nothing*/
			}
		break;
		
		case EXT_INT1_ID:
			if (senseControl == LOW_LEVEL)
     8fc:	61 11       	cpse	r22, r1
     8fe:	03 c0       	rjmp	.+6      	; 0x906 <extINT_setSenseControl+0x4c>
			{
				CLEAR_BIT(EXT_INT_MCUCR_REG,MCUCR_ISC10_BIT_NO);
     900:	85 b7       	in	r24, 0x35	; 53
     902:	8b 7f       	andi	r24, 0xFB	; 251
     904:	04 c0       	rjmp	.+8      	; 0x90e <extINT_setSenseControl+0x54>
				CLEAR_BIT(EXT_INT_MCUCR_REG,MCUCR_ISC11_BIT_NO);
			}
			else if (senseControl == ANY_LOGICAL_CHANGE)
     906:	61 30       	cpi	r22, 0x01	; 1
     908:	31 f4       	brne	.+12     	; 0x916 <extINT_setSenseControl+0x5c>
			{
				SET_BIT(EXT_INT_MCUCR_REG,MCUCR_ISC10_BIT_NO);
     90a:	85 b7       	in	r24, 0x35	; 53
     90c:	84 60       	ori	r24, 0x04	; 4
     90e:	85 bf       	out	0x35, r24	; 53
				CLEAR_BIT(EXT_INT_MCUCR_REG,MCUCR_ISC11_BIT_NO);
     910:	85 b7       	in	r24, 0x35	; 53
     912:	87 7f       	andi	r24, 0xF7	; 247
     914:	e4 cf       	rjmp	.-56     	; 0x8de <extINT_setSenseControl+0x24>
			}
			else if (senseControl == FALLING_EDGE)
     916:	62 30       	cpi	r22, 0x02	; 2
     918:	19 f4       	brne	.+6      	; 0x920 <extINT_setSenseControl+0x66>
			{
				CLEAR_BIT(EXT_INT_MCUCR_REG,MCUCR_ISC10_BIT_NO);
     91a:	85 b7       	in	r24, 0x35	; 53
     91c:	8b 7f       	andi	r24, 0xFB	; 251
     91e:	04 c0       	rjmp	.+8      	; 0x928 <extINT_setSenseControl+0x6e>
				SET_BIT(EXT_INT_MCUCR_REG,MCUCR_ISC11_BIT_NO);
			}
			else if (senseControl == RISING_EDGE)
     920:	63 30       	cpi	r22, 0x03	; 3
     922:	81 f4       	brne	.+32     	; 0x944 <extINT_setSenseControl+0x8a>
			{
				SET_BIT(EXT_INT_MCUCR_REG,MCUCR_ISC10_BIT_NO);
     924:	85 b7       	in	r24, 0x35	; 53
     926:	84 60       	ori	r24, 0x04	; 4
     928:	85 bf       	out	0x35, r24	; 53
				SET_BIT(EXT_INT_MCUCR_REG,MCUCR_ISC11_BIT_NO);
     92a:	85 b7       	in	r24, 0x35	; 53
     92c:	88 60       	ori	r24, 0x08	; 8
     92e:	d7 cf       	rjmp	.-82     	; 0x8de <extINT_setSenseControl+0x24>
				/*Do Nothing*/
			}
		break;
		
		case EXT_INT2_ID:
			if (senseControl == FALLING_EDGE)
     930:	62 30       	cpi	r22, 0x02	; 2
     932:	19 f4       	brne	.+6      	; 0x93a <extINT_setSenseControl+0x80>
			{
				CLEAR_BIT(EXT_INT_MCUCSR_REG,MCUCSR_ISC2_BIT_NO);
     934:	84 b7       	in	r24, 0x34	; 52
     936:	8f 7b       	andi	r24, 0xBF	; 191
     938:	04 c0       	rjmp	.+8      	; 0x942 <extINT_setSenseControl+0x88>
			}
			else if (senseControl == RISING_EDGE)
     93a:	63 30       	cpi	r22, 0x03	; 3
     93c:	19 f4       	brne	.+6      	; 0x944 <extINT_setSenseControl+0x8a>
			{
				SET_BIT(EXT_INT_MCUCSR_REG,MCUCSR_ISC2_BIT_NO);
     93e:	84 b7       	in	r24, 0x34	; 52
     940:	80 64       	ori	r24, 0x40	; 64
     942:	84 bf       	out	0x34, r24	; 52
     944:	08 95       	ret

00000946 <extINT_setCallBack>:
	}
}

void extINT_setCallBack(u8 interruptId, void(*fptr)(void))
{
	switch (interruptId)
     946:	81 30       	cpi	r24, 0x01	; 1
     948:	49 f0       	breq	.+18     	; 0x95c <extINT_setCallBack+0x16>
     94a:	18 f0       	brcs	.+6      	; 0x952 <extINT_setCallBack+0xc>
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	59 f0       	breq	.+22     	; 0x966 <extINT_setCallBack+0x20>
     950:	08 95       	ret
	{
		case EXT_INT0_ID:
			int0ClbkPtr = fptr;
     952:	70 93 98 04 	sts	0x0498, r23	; 0x800498 <int0ClbkPtr+0x1>
     956:	60 93 97 04 	sts	0x0497, r22	; 0x800497 <int0ClbkPtr>
		break;
     95a:	08 95       	ret
		
		case EXT_INT1_ID:
			int1ClbkPtr = fptr;
     95c:	70 93 96 04 	sts	0x0496, r23	; 0x800496 <int1ClbkPtr+0x1>
     960:	60 93 95 04 	sts	0x0495, r22	; 0x800495 <int1ClbkPtr>
		break;
     964:	08 95       	ret
		
		case EXT_INT2_ID:
			int2ClbkPtr = fptr;
     966:	70 93 94 04 	sts	0x0494, r23	; 0x800494 <int2ClbkPtr+0x1>
     96a:	60 93 93 04 	sts	0x0493, r22	; 0x800493 <int2ClbkPtr>
     96e:	08 95       	ret

00000970 <__vector_1>:
		break;
	}
}

ISR(INT0_vect)
{
     970:	1f 92       	push	r1
     972:	0f 92       	push	r0
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	0f 92       	push	r0
     978:	11 24       	eor	r1, r1
     97a:	2f 93       	push	r18
     97c:	3f 93       	push	r19
     97e:	4f 93       	push	r20
     980:	5f 93       	push	r21
     982:	6f 93       	push	r22
     984:	7f 93       	push	r23
     986:	8f 93       	push	r24
     988:	9f 93       	push	r25
     98a:	af 93       	push	r26
     98c:	bf 93       	push	r27
     98e:	ef 93       	push	r30
     990:	ff 93       	push	r31
	if (int0ClbkPtr != NULL)
     992:	e0 91 97 04 	lds	r30, 0x0497	; 0x800497 <int0ClbkPtr>
     996:	f0 91 98 04 	lds	r31, 0x0498	; 0x800498 <int0ClbkPtr+0x1>
     99a:	30 97       	sbiw	r30, 0x00	; 0
     99c:	09 f0       	breq	.+2      	; 0x9a0 <__vector_1+0x30>
	{
		int0ClbkPtr();
     99e:	09 95       	icall
	}
}
     9a0:	ff 91       	pop	r31
     9a2:	ef 91       	pop	r30
     9a4:	bf 91       	pop	r27
     9a6:	af 91       	pop	r26
     9a8:	9f 91       	pop	r25
     9aa:	8f 91       	pop	r24
     9ac:	7f 91       	pop	r23
     9ae:	6f 91       	pop	r22
     9b0:	5f 91       	pop	r21
     9b2:	4f 91       	pop	r20
     9b4:	3f 91       	pop	r19
     9b6:	2f 91       	pop	r18
     9b8:	0f 90       	pop	r0
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	0f 90       	pop	r0
     9be:	1f 90       	pop	r1
     9c0:	18 95       	reti

000009c2 <__vector_2>:

ISR(INT1_vect)
{
     9c2:	1f 92       	push	r1
     9c4:	0f 92       	push	r0
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	0f 92       	push	r0
     9ca:	11 24       	eor	r1, r1
     9cc:	2f 93       	push	r18
     9ce:	3f 93       	push	r19
     9d0:	4f 93       	push	r20
     9d2:	5f 93       	push	r21
     9d4:	6f 93       	push	r22
     9d6:	7f 93       	push	r23
     9d8:	8f 93       	push	r24
     9da:	9f 93       	push	r25
     9dc:	af 93       	push	r26
     9de:	bf 93       	push	r27
     9e0:	ef 93       	push	r30
     9e2:	ff 93       	push	r31
	if (int1ClbkPtr != NULL)
     9e4:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <int1ClbkPtr>
     9e8:	f0 91 96 04 	lds	r31, 0x0496	; 0x800496 <int1ClbkPtr+0x1>
     9ec:	30 97       	sbiw	r30, 0x00	; 0
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <__vector_2+0x30>
	{
		int1ClbkPtr();
     9f0:	09 95       	icall
	}
}
     9f2:	ff 91       	pop	r31
     9f4:	ef 91       	pop	r30
     9f6:	bf 91       	pop	r27
     9f8:	af 91       	pop	r26
     9fa:	9f 91       	pop	r25
     9fc:	8f 91       	pop	r24
     9fe:	7f 91       	pop	r23
     a00:	6f 91       	pop	r22
     a02:	5f 91       	pop	r21
     a04:	4f 91       	pop	r20
     a06:	3f 91       	pop	r19
     a08:	2f 91       	pop	r18
     a0a:	0f 90       	pop	r0
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	0f 90       	pop	r0
     a10:	1f 90       	pop	r1
     a12:	18 95       	reti

00000a14 <__vector_3>:

ISR(INT2_vect)
{
     a14:	1f 92       	push	r1
     a16:	0f 92       	push	r0
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	0f 92       	push	r0
     a1c:	11 24       	eor	r1, r1
     a1e:	2f 93       	push	r18
     a20:	3f 93       	push	r19
     a22:	4f 93       	push	r20
     a24:	5f 93       	push	r21
     a26:	6f 93       	push	r22
     a28:	7f 93       	push	r23
     a2a:	8f 93       	push	r24
     a2c:	9f 93       	push	r25
     a2e:	af 93       	push	r26
     a30:	bf 93       	push	r27
     a32:	ef 93       	push	r30
     a34:	ff 93       	push	r31
	if (int2ClbkPtr != NULL)
     a36:	e0 91 93 04 	lds	r30, 0x0493	; 0x800493 <int2ClbkPtr>
     a3a:	f0 91 94 04 	lds	r31, 0x0494	; 0x800494 <int2ClbkPtr+0x1>
     a3e:	30 97       	sbiw	r30, 0x00	; 0
     a40:	09 f0       	breq	.+2      	; 0xa44 <__vector_3+0x30>
	{
		int2ClbkPtr();
     a42:	09 95       	icall
	}
     a44:	ff 91       	pop	r31
     a46:	ef 91       	pop	r30
     a48:	bf 91       	pop	r27
     a4a:	af 91       	pop	r26
     a4c:	9f 91       	pop	r25
     a4e:	8f 91       	pop	r24
     a50:	7f 91       	pop	r23
     a52:	6f 91       	pop	r22
     a54:	5f 91       	pop	r21
     a56:	4f 91       	pop	r20
     a58:	3f 91       	pop	r19
     a5a:	2f 91       	pop	r18
     a5c:	0f 90       	pop	r0
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	0f 90       	pop	r0
     a62:	1f 90       	pop	r1
     a64:	18 95       	reti

00000a66 <gie_enableAllInterrupts>:
#include "gie.h"
#include "bit_math.h"

void gie_enableAllInterrupts(void)
{
	SET_BIT(GIE_SREG,I_BIT_NO);
     a66:	8f b7       	in	r24, 0x3f	; 63
     a68:	80 68       	ori	r24, 0x80	; 128
     a6a:	8f bf       	out	0x3f, r24	; 63
     a6c:	08 95       	ret

00000a6e <__vector_11>:
	CLEAR_BIT(TIMER0_TIMSK_REG,OCIE_BIT_NO);
}

void timer0_setCTCCallBack(void (*fptr) (void))
{
	timer0CTCClbkPtr = fptr;
     a6e:	1f 92       	push	r1
     a70:	0f 92       	push	r0
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	0f 92       	push	r0
     a76:	11 24       	eor	r1, r1
     a78:	2f 93       	push	r18
     a7a:	3f 93       	push	r19
     a7c:	4f 93       	push	r20
     a7e:	5f 93       	push	r21
     a80:	6f 93       	push	r22
     a82:	7f 93       	push	r23
     a84:	8f 93       	push	r24
     a86:	9f 93       	push	r25
     a88:	af 93       	push	r26
     a8a:	bf 93       	push	r27
     a8c:	ef 93       	push	r30
     a8e:	ff 93       	push	r31
     a90:	e0 91 9b 04 	lds	r30, 0x049B	; 0x80049b <timer0OvClbkPtr>
     a94:	f0 91 9c 04 	lds	r31, 0x049C	; 0x80049c <timer0OvClbkPtr+0x1>
     a98:	30 97       	sbiw	r30, 0x00	; 0
     a9a:	09 f0       	breq	.+2      	; 0xa9e <__vector_11+0x30>
     a9c:	09 95       	icall
     a9e:	ff 91       	pop	r31
     aa0:	ef 91       	pop	r30
     aa2:	bf 91       	pop	r27
     aa4:	af 91       	pop	r26
     aa6:	9f 91       	pop	r25
     aa8:	8f 91       	pop	r24
     aaa:	7f 91       	pop	r23
     aac:	6f 91       	pop	r22
     aae:	5f 91       	pop	r21
     ab0:	4f 91       	pop	r20
     ab2:	3f 91       	pop	r19
     ab4:	2f 91       	pop	r18
     ab6:	0f 90       	pop	r0
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	0f 90       	pop	r0
     abc:	1f 90       	pop	r1
     abe:	18 95       	reti

00000ac0 <__vector_10>:
}

ISR(TIMER0_COMP_vect)
{
     ac0:	1f 92       	push	r1
     ac2:	0f 92       	push	r0
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	0f 92       	push	r0
     ac8:	11 24       	eor	r1, r1
     aca:	2f 93       	push	r18
     acc:	3f 93       	push	r19
     ace:	4f 93       	push	r20
     ad0:	5f 93       	push	r21
     ad2:	6f 93       	push	r22
     ad4:	7f 93       	push	r23
     ad6:	8f 93       	push	r24
     ad8:	9f 93       	push	r25
     ada:	af 93       	push	r26
     adc:	bf 93       	push	r27
     ade:	ef 93       	push	r30
     ae0:	ff 93       	push	r31
	if (timer0CTCClbkPtr != NULL)
     ae2:	e0 91 99 04 	lds	r30, 0x0499	; 0x800499 <timer0CTCClbkPtr>
     ae6:	f0 91 9a 04 	lds	r31, 0x049A	; 0x80049a <timer0CTCClbkPtr+0x1>
     aea:	30 97       	sbiw	r30, 0x00	; 0
     aec:	09 f0       	breq	.+2      	; 0xaf0 <__vector_10+0x30>
	{
		timer0CTCClbkPtr();
     aee:	09 95       	icall
	}
}
     af0:	ff 91       	pop	r31
     af2:	ef 91       	pop	r30
     af4:	bf 91       	pop	r27
     af6:	af 91       	pop	r26
     af8:	9f 91       	pop	r25
     afa:	8f 91       	pop	r24
     afc:	7f 91       	pop	r23
     afe:	6f 91       	pop	r22
     b00:	5f 91       	pop	r21
     b02:	4f 91       	pop	r20
     b04:	3f 91       	pop	r19
     b06:	2f 91       	pop	r18
     b08:	0f 90       	pop	r0
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	0f 90       	pop	r0
     b0e:	1f 90       	pop	r1
     b10:	18 95       	reti

00000b12 <pwm0_init>:


void pwm0_init(u8 mode, u8 freq)
{
	/*Set mode*/
	TIMER0_TCCR0_REG |= mode;
     b12:	93 b7       	in	r25, 0x33	; 51
     b14:	89 2b       	or	r24, r25
     b16:	83 bf       	out	0x33, r24	; 51
	/*Set frequency*/
	TIMER0_TCCR0_REG |= freq;
     b18:	83 b7       	in	r24, 0x33	; 51
     b1a:	68 2b       	or	r22, r24
     b1c:	63 bf       	out	0x33, r22	; 51
     b1e:	08 95       	ret

00000b20 <pwm0_setDutyCycle>:
}


void pwm0_setDutyCycle(u8 dutyCycle)
{
	TIMER0_OCR0_REG = ((f32)dutyCycle/100)*(TIMER0_TOP);
     b20:	68 2f       	mov	r22, r24
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	0e 94 77 11 	call	0x22ee	; 0x22ee <__floatunsisf>
     b2c:	20 e0       	ldi	r18, 0x00	; 0
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	48 ec       	ldi	r20, 0xC8	; 200
     b32:	52 e4       	ldi	r21, 0x42	; 66
     b34:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__divsf3>
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	4f e7       	ldi	r20, 0x7F	; 127
     b3e:	53 e4       	ldi	r21, 0x43	; 67
     b40:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
     b44:	0e 94 48 11 	call	0x2290	; 0x2290 <__fixunssfsi>
     b48:	6c bf       	out	0x3c, r22	; 60
     b4a:	08 95       	ret

00000b4c <__vector_9>:
{
	timer1OvClbkPtr = fptr;
}

ISR(TIMER1_OVF_vect)
{
     b4c:	1f 92       	push	r1
     b4e:	0f 92       	push	r0
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	0f 92       	push	r0
     b54:	11 24       	eor	r1, r1
     b56:	2f 93       	push	r18
     b58:	3f 93       	push	r19
     b5a:	4f 93       	push	r20
     b5c:	5f 93       	push	r21
     b5e:	6f 93       	push	r22
     b60:	7f 93       	push	r23
     b62:	8f 93       	push	r24
     b64:	9f 93       	push	r25
     b66:	af 93       	push	r26
     b68:	bf 93       	push	r27
     b6a:	ef 93       	push	r30
     b6c:	ff 93       	push	r31
	if (timer1OvClbkPtr != NULL)
     b6e:	e0 91 9d 04 	lds	r30, 0x049D	; 0x80049d <timer1OvClbkPtr>
     b72:	f0 91 9e 04 	lds	r31, 0x049E	; 0x80049e <timer1OvClbkPtr+0x1>
     b76:	30 97       	sbiw	r30, 0x00	; 0
     b78:	09 f0       	breq	.+2      	; 0xb7c <__vector_9+0x30>
	{
		timer1OvClbkPtr();
     b7a:	09 95       	icall
	}
}
     b7c:	ff 91       	pop	r31
     b7e:	ef 91       	pop	r30
     b80:	bf 91       	pop	r27
     b82:	af 91       	pop	r26
     b84:	9f 91       	pop	r25
     b86:	8f 91       	pop	r24
     b88:	7f 91       	pop	r23
     b8a:	6f 91       	pop	r22
     b8c:	5f 91       	pop	r21
     b8e:	4f 91       	pop	r20
     b90:	3f 91       	pop	r19
     b92:	2f 91       	pop	r18
     b94:	0f 90       	pop	r0
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	0f 90       	pop	r0
     b9a:	1f 90       	pop	r1
     b9c:	18 95       	reti

00000b9e <pwm1_init>:

void pwm1_init(u8 modeA, u8 modeB, u8 freq)
{
	/*Set mode*/
	TIMER1_TCCR1A_REG |= modeA;
     b9e:	9f b5       	in	r25, 0x2f	; 47
     ba0:	89 2b       	or	r24, r25
     ba2:	8f bd       	out	0x2f, r24	; 47
	/*Set mode & freq*/
	TIMER1_TCCR1B_REG |= (modeB | freq);
     ba4:	8e b5       	in	r24, 0x2e	; 46
     ba6:	48 2b       	or	r20, r24
     ba8:	64 2b       	or	r22, r20
     baa:	6e bd       	out	0x2e, r22	; 46
     bac:	08 95       	ret

00000bae <pwm1_setTopValue>:
// 	TIMER1_TCCR1B_REG |= freq;
}

void pwm1_setTopValue(u8 topValue)
{
	ICR1 = topValue;
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	97 bd       	out	0x27, r25	; 39
     bb2:	86 bd       	out	0x26, r24	; 38
     bb4:	08 95       	ret

00000bb6 <pwm1_setDutyCycle>:
}

void pwm1_setDutyCycle(u8 dutyCycle)
{
	OCR1A = dutyCycle;
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	9b bd       	out	0x2b, r25	; 43
     bba:	8a bd       	out	0x2a, r24	; 42
     bbc:	08 95       	ret

00000bbe <timer2_start>:
	CLEAR_BIT(TIMER2_TIMSK_REG,OCIE_BIT_NO);
}

void timer2_setCTCCallBack(void (*fptr) (void))
{
	timer2CTCClbkPtr = fptr;
     bbe:	95 b5       	in	r25, 0x25	; 37
     bc0:	89 2b       	or	r24, r25
     bc2:	85 bd       	out	0x25, r24	; 37
     bc4:	08 95       	ret

00000bc6 <timer2_init>:
     bc6:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <timer2_start>

00000bca <timer2_setPreLoad>:
     bca:	84 bd       	out	0x24, r24	; 36
     bcc:	08 95       	ret

00000bce <timer2_enableOvInterrupt>:
     bce:	89 b7       	in	r24, 0x39	; 57
     bd0:	80 64       	ori	r24, 0x40	; 64
     bd2:	89 bf       	out	0x39, r24	; 57
     bd4:	08 95       	ret

00000bd6 <timer2_setOvCallBack>:
     bd6:	90 93 a2 04 	sts	0x04A2, r25	; 0x8004a2 <timer2OvClbkPtr+0x1>
     bda:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <timer2OvClbkPtr>
     bde:	08 95       	ret

00000be0 <__vector_5>:
     be0:	1f 92       	push	r1
     be2:	0f 92       	push	r0
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	0f 92       	push	r0
     be8:	11 24       	eor	r1, r1
     bea:	2f 93       	push	r18
     bec:	3f 93       	push	r19
     bee:	4f 93       	push	r20
     bf0:	5f 93       	push	r21
     bf2:	6f 93       	push	r22
     bf4:	7f 93       	push	r23
     bf6:	8f 93       	push	r24
     bf8:	9f 93       	push	r25
     bfa:	af 93       	push	r26
     bfc:	bf 93       	push	r27
     bfe:	ef 93       	push	r30
     c00:	ff 93       	push	r31
     c02:	e0 91 a1 04 	lds	r30, 0x04A1	; 0x8004a1 <timer2OvClbkPtr>
     c06:	f0 91 a2 04 	lds	r31, 0x04A2	; 0x8004a2 <timer2OvClbkPtr+0x1>
     c0a:	30 97       	sbiw	r30, 0x00	; 0
     c0c:	09 f0       	breq	.+2      	; 0xc10 <__vector_5+0x30>
     c0e:	09 95       	icall
     c10:	ff 91       	pop	r31
     c12:	ef 91       	pop	r30
     c14:	bf 91       	pop	r27
     c16:	af 91       	pop	r26
     c18:	9f 91       	pop	r25
     c1a:	8f 91       	pop	r24
     c1c:	7f 91       	pop	r23
     c1e:	6f 91       	pop	r22
     c20:	5f 91       	pop	r21
     c22:	4f 91       	pop	r20
     c24:	3f 91       	pop	r19
     c26:	2f 91       	pop	r18
     c28:	0f 90       	pop	r0
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	0f 90       	pop	r0
     c2e:	1f 90       	pop	r1
     c30:	18 95       	reti

00000c32 <__vector_4>:
}

ISR(TIMER2_COMP_vect)
{
     c32:	1f 92       	push	r1
     c34:	0f 92       	push	r0
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	0f 92       	push	r0
     c3a:	11 24       	eor	r1, r1
     c3c:	2f 93       	push	r18
     c3e:	3f 93       	push	r19
     c40:	4f 93       	push	r20
     c42:	5f 93       	push	r21
     c44:	6f 93       	push	r22
     c46:	7f 93       	push	r23
     c48:	8f 93       	push	r24
     c4a:	9f 93       	push	r25
     c4c:	af 93       	push	r26
     c4e:	bf 93       	push	r27
     c50:	ef 93       	push	r30
     c52:	ff 93       	push	r31
	if (timer2CTCClbkPtr != NULL)
     c54:	e0 91 9f 04 	lds	r30, 0x049F	; 0x80049f <timer2CTCClbkPtr>
     c58:	f0 91 a0 04 	lds	r31, 0x04A0	; 0x8004a0 <timer2CTCClbkPtr+0x1>
     c5c:	30 97       	sbiw	r30, 0x00	; 0
     c5e:	09 f0       	breq	.+2      	; 0xc62 <__vector_4+0x30>
	{
		timer2CTCClbkPtr();
     c60:	09 95       	icall
	}
}
     c62:	ff 91       	pop	r31
     c64:	ef 91       	pop	r30
     c66:	bf 91       	pop	r27
     c68:	af 91       	pop	r26
     c6a:	9f 91       	pop	r25
     c6c:	8f 91       	pop	r24
     c6e:	7f 91       	pop	r23
     c70:	6f 91       	pop	r22
     c72:	5f 91       	pop	r21
     c74:	4f 91       	pop	r20
     c76:	3f 91       	pop	r19
     c78:	2f 91       	pop	r18
     c7a:	0f 90       	pop	r0
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	0f 90       	pop	r0
     c80:	1f 90       	pop	r1
     c82:	18 95       	reti

00000c84 <uart_init>:
volatile boolean new_rx_data = FALSE;

void uart_init(u16 baud)
{
	/*Set baud rate*/
	UART_UBRRL_REG = baud;
     c84:	89 b9       	out	0x09, r24	; 9
	UART_UBRRH_REG = baud >> 8;
     c86:	90 bd       	out	0x20, r25	; 32
	
	/*Enable Tx, Rx*/
	SET_BIT(UART_UCSRB_REG,TX_ENABLE_BIT_NO);
     c88:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UART_UCSRB_REG,RX_ENABLE_BIT_NO);
     c8a:	54 9a       	sbi	0x0a, 4	; 10
	
	/*Enable RXCIE Receive Complete Interrupt Enable*/
	SET_BIT(UART_UCSRB_REG,RX_COMPLETE_INTERRUPT_ENABLE_BIT_NOT);
     c8c:	57 9a       	sbi	0x0a, 7	; 10
	
	/*Set data size=8, parity=off, stop=1*/
	UART_UCSRC_REG = URSEL_SET|DATA_8BIT|PARITY_OFF|STOP_BIT1;
     c8e:	86 e8       	ldi	r24, 0x86	; 134
     c90:	80 bd       	out	0x20, r24	; 32
	gie_enableAllInterrupts();
     c92:	0c 94 33 05 	jmp	0xa66	; 0xa66 <gie_enableAllInterrupts>

00000c96 <uart_sendByte>:
}

void uart_sendByte(u8 byte)
{
	/*Make sure UDRE is empty*/
	while(CHECK_BIT(UART_UCSRA_REG,UDR_EMPTY_FLAG)==0);
     c96:	5d 9b       	sbis	0x0b, 5	; 11
     c98:	fe cf       	rjmp	.-4      	; 0xc96 <uart_sendByte>
	
	/*Set UDR with data*/
	UART_UDR_REG = byte;
     c9a:	8c b9       	out	0x0c, r24	; 12
     c9c:	08 95       	ret

00000c9e <uart_sendString>:
}

void uart_sendString(u8 *str)
{
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	ec 01       	movw	r28, r24
	while(*str != '\0')
     ca4:	89 91       	ld	r24, Y+
     ca6:	88 23       	and	r24, r24
     ca8:	19 f0       	breq	.+6      	; 0xcb0 <uart_sendString+0x12>
	{
		uart_sendByte(*str);
     caa:	0e 94 4b 06 	call	0xc96	; 0xc96 <uart_sendByte>
     cae:	fa cf       	rjmp	.-12     	; 0xca4 <uart_sendString+0x6>
		str++;
	}
}
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	08 95       	ret

00000cb6 <uart_receiveByte>:

u8 uart_receiveByte(void)
{
	if (new_rx_data) {
     cb6:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <new_rx_data>
     cba:	88 23       	and	r24, r24
     cbc:	29 f0       	breq	.+10     	; 0xcc8 <uart_receiveByte+0x12>
		new_rx_data = FALSE;
     cbe:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <new_rx_data>
		return rx_data;
     cc2:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <rx_data>
     cc6:	08 95       	ret
	}
	else
	{
		return 255;
     cc8:	8f ef       	ldi	r24, 0xFF	; 255
	}
	//u8 temp = rx_data;
	//rx_data = 255;
	//return temp;
}
     cca:	08 95       	ret

00000ccc <__vector_13>:

ISR(USART_RXC_vect)
{
     ccc:	1f 92       	push	r1
     cce:	0f 92       	push	r0
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	0f 92       	push	r0
     cd4:	11 24       	eor	r1, r1
     cd6:	8f 93       	push	r24
	rx_data = UART_UDR_REG;
     cd8:	8c b1       	in	r24, 0x0c	; 12
     cda:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <rx_data>
	new_rx_data = TRUE; // Set flag to indicate new data
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <new_rx_data>
}
     ce4:	8f 91       	pop	r24
     ce6:	0f 90       	pop	r0
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	0f 90       	pop	r0
     cec:	1f 90       	pop	r1
     cee:	18 95       	reti

00000cf0 <uart_receiveString>:
// 		*receivedStr = uart_receiveByte();
// 		receivedStr++;
// 	}
// }
void uart_receiveString(u8 *receivedStr)
{
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	ec 01       	movw	r28, r24
	u8 i = 0, RX_Byte=255;
	RX_Byte = uart_receiveByte();
     cf8:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <uart_receiveByte>
// 		receivedStr++;
// 	}
// }
void uart_receiveString(u8 *receivedStr)
{
	u8 i = 0, RX_Byte=255;
     cfc:	10 e0       	ldi	r17, 0x00	; 0
	RX_Byte = uart_receiveByte();
	while(RX_Byte != '#')
     cfe:	83 32       	cpi	r24, 0x23	; 35
     d00:	51 f0       	breq	.+20     	; 0xd16 <uart_receiveString+0x26>
	{
		if (RX_Byte != 255)
     d02:	8f 3f       	cpi	r24, 0xFF	; 255
     d04:	29 f0       	breq	.+10     	; 0xd10 <uart_receiveString+0x20>
		{
			receivedStr[i] = RX_Byte;
     d06:	fe 01       	movw	r30, r28
     d08:	e1 0f       	add	r30, r17
     d0a:	f1 1d       	adc	r31, r1
     d0c:	80 83       	st	Z, r24
			i++;
     d0e:	1f 5f       	subi	r17, 0xFF	; 255
		}
		RX_Byte = uart_receiveByte();
     d10:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <uart_receiveByte>
     d14:	f4 cf       	rjmp	.-24     	; 0xcfe <uart_receiveString+0xe>
	}
	receivedStr[i] = '\0';
     d16:	c1 0f       	add	r28, r17
     d18:	d1 1d       	adc	r29, r1
     d1a:	18 82       	st	Y, r1
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	08 95       	ret

00000d24 <airConditioner_init>:
	AC_CFG.AC_Stop_Temperature_threshold=21;
}

u16 airConditioner_Temperature(void)
{
	u16 current_temperature = LM35_read();  // Get temp sensor reading
     d24:	0e 94 92 00 	call	0x124	; 0x124 <dcMotor_init>
     d28:	0e 94 30 02 	call	0x460	; 0x460 <LM35_init>
     d2c:	e1 ec       	ldi	r30, 0xC1	; 193
     d2e:	f4 e0       	ldi	r31, 0x04	; 4
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	80 83       	st	Z, r24
     d34:	8c e1       	ldi	r24, 0x1C	; 28
     d36:	81 83       	std	Z+1, r24	; 0x01
     d38:	85 e1       	ldi	r24, 0x15	; 21
     d3a:	82 83       	std	Z+2, r24	; 0x02
     d3c:	08 95       	ret

00000d3e <airConditioner_Toggle>:
	return current_temperature;
}

void airConditioner_Toggle(void)
{
	AC_CFG.AC_Status^= TRUE;
     d3e:	e1 ec       	ldi	r30, 0xC1	; 193
     d40:	f4 e0       	ldi	r31, 0x04	; 4
     d42:	90 81       	ld	r25, Z
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	89 27       	eor	r24, r25
     d48:	80 83       	st	Z, r24
     d4a:	08 95       	ret

00000d4c <airConditioner_Set_Config>:
}

void airConditioner_Set_Config(AC *ac_config)
{
	AC_CFG.AC_Run_Temperature_threshold = ac_config->AC_Run_Temperature_threshold;
     d4c:	dc 01       	movw	r26, r24
     d4e:	11 96       	adiw	r26, 0x01	; 1
     d50:	2c 91       	ld	r18, X
     d52:	11 97       	sbiw	r26, 0x01	; 1
     d54:	e1 ec       	ldi	r30, 0xC1	; 193
     d56:	f4 e0       	ldi	r31, 0x04	; 4
     d58:	21 83       	std	Z+1, r18	; 0x01
	AC_CFG.AC_Stop_Temperature_threshold = ac_config->AC_Stop_Temperature_threshold;
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8c 91       	ld	r24, X
     d5e:	82 83       	std	Z+2, r24	; 0x02
     d60:	08 95       	ret

00000d62 <airConditioner_Status>:
}

AC airConditioner_Status(void)
{
	return AC_CFG;
     d62:	60 91 c1 04 	lds	r22, 0x04C1	; 0x8004c1 <AC_CFG>
     d66:	70 91 c2 04 	lds	r23, 0x04C2	; 0x8004c2 <AC_CFG+0x1>
     d6a:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <AC_CFG+0x2>
}
     d6e:	08 95       	ret

00000d70 <airConditioner_State>:

boolean airConditioner_State(void)
{
	return AC_CFG.AC_Status;
}
     d70:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <AC_CFG>
     d74:	08 95       	ret

00000d76 <airConditioner_service>:

void airConditioner_service(void){
	u8 current_temperature = 0;
	switch (AC_CFG.AC_Status)
     d76:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <AC_CFG>
     d7a:	88 23       	and	r24, r24
     d7c:	71 f0       	breq	.+28     	; 0xd9a <airConditioner_service+0x24>
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	71 f4       	brne	.+28     	; 0xd9e <airConditioner_service+0x28>
	{
	case 1:
		// Sample temperature value
		 current_temperature = LM35_read();  // Get temp sensor reading
     d82:	0e 94 32 02 	call	0x464	; 0x464 <LM35_read>

		// Check if the current temperature is above the turn on threshold
		if (current_temperature > AC_CFG.AC_Run_Temperature_threshold) {
     d86:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <AC_CFG+0x1>
     d8a:	98 17       	cp	r25, r24
     d8c:	10 f4       	brcc	.+4      	; 0xd92 <airConditioner_service+0x1c>
	}

}
void airConditioner_on(void)
{
	dcMotor_on();
     d8e:	0c 94 97 00 	jmp	0x12e	; 0x12e <dcMotor_on>
		if (current_temperature > AC_CFG.AC_Run_Temperature_threshold) {
			airConditioner_on(); // Turn on the DC motor for the air conditioner
		}

		// Check if the current temperature is below the turn off threshold
		else if (current_temperature < AC_CFG.AC_Stop_Temperature_threshold) {
     d92:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <AC_CFG+0x2>
     d96:	89 17       	cp	r24, r25
     d98:	10 f4       	brcc	.+4      	; 0xd9e <airConditioner_service+0x28>
	dcMotor_on();
}

void airConditioner_off(void)
{
	dcMotor_off();
     d9a:	0c 94 9c 00 	jmp	0x138	; 0x138 <dcMotor_off>
     d9e:	08 95       	ret

00000da0 <doorService_init>:
boolean get_Choice = TRUE,
		Display_door_menu = TRUE;
	

void doorService_init()
{
     da0:	cf 92       	push	r12
     da2:	df 92       	push	r13
     da4:	ef 92       	push	r14
     da6:	0f 93       	push	r16
	servo_init(PORTD_ID,PIN5_ID,OUTPUT,TIMER1_NON_INVERTED_PWM_FAST_OC1A,TIMER1_PWM_FAST_ICR,TIMER1_F_CPU_DIV_64,SERVO_TOP_VALUE_50_HZ);
     da8:	87 e8       	ldi	r24, 0x87	; 135
     daa:	c8 2e       	mov	r12, r24
     dac:	83 e1       	ldi	r24, 0x13	; 19
     dae:	d8 2e       	mov	r13, r24
     db0:	93 e0       	ldi	r25, 0x03	; 3
     db2:	e9 2e       	mov	r14, r25
     db4:	08 e1       	ldi	r16, 0x18	; 24
     db6:	22 e8       	ldi	r18, 0x82	; 130
     db8:	41 e0       	ldi	r20, 0x01	; 1
     dba:	65 e0       	ldi	r22, 0x05	; 5
     dbc:	83 e0       	ldi	r24, 0x03	; 3
     dbe:	0e 94 c2 02 	call	0x584	; 0x584 <servo_init>
}
     dc2:	0f 91       	pop	r16
     dc4:	ef 90       	pop	r14
     dc6:	df 90       	pop	r13
     dc8:	cf 90       	pop	r12
     dca:	08 95       	ret

00000dcc <doorOpen>:

void doorOpen()
{
	servo_setAngleDegree(1900);
     dcc:	8c e6       	ldi	r24, 0x6C	; 108
     dce:	97 e0       	ldi	r25, 0x07	; 7
     dd0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <servo_setAngleDegree>

00000dd4 <doorClose>:
	//doorState = DOOR_OPENED;
}

void doorClose()
{
	servo_setAngleDegree(950);
     dd4:	86 eb       	ldi	r24, 0xB6	; 182
     dd6:	93 e0       	ldi	r25, 0x03	; 3
     dd8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <servo_setAngleDegree>

00000ddc <doorService>:
// }

void doorService()
{
	static u8 choice;
	if (Display_door_menu)
     ddc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Display_door_menu>
     de0:	88 23       	and	r24, r24
     de2:	31 f0       	breq	.+12     	; 0xdf0 <doorService+0x14>
	{
		uart_sendString("\nPress 'o' to open the door, 'c' to close the door, 'b' to go back: \n");
     de4:	81 e8       	ldi	r24, 0x81	; 129
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		Display_door_menu = FALSE;
     dec:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Display_door_menu>
	}
	if (get_Choice)
     df0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <get_Choice>
     df4:	88 23       	and	r24, r24
     df6:	21 f0       	breq	.+8      	; 0xe00 <doorService+0x24>
	{
		choice = uart_receiveByte();
     df8:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <uart_receiveByte>
     dfc:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <choice.1654>
	}
	if (choice != 255)
     e00:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <choice.1654>
     e04:	8f 3f       	cpi	r24, 0xFF	; 255
     e06:	b1 f0       	breq	.+44     	; 0xe34 <doorService+0x58>
	{
		get_Choice = FALSE;
     e08:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <get_Choice>
		switch (choice) {
     e0c:	83 36       	cpi	r24, 0x63	; 99
     e0e:	41 f0       	breq	.+16     	; 0xe20 <doorService+0x44>
     e10:	8f 36       	cpi	r24, 0x6F	; 111
     e12:	19 f0       	breq	.+6      	; 0xe1a <doorService+0x3e>
     e14:	82 36       	cpi	r24, 0x62	; 98
     e16:	39 f4       	brne	.+14     	; 0xe26 <doorService+0x4a>
     e18:	08 95       	ret
			case 'o':
			doorOpen();
     e1a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <doorOpen>
     e1e:	07 c0       	rjmp	.+14     	; 0xe2e <doorService+0x52>
			get_Choice = TRUE;
			break;
			case 'c':
			doorClose();
     e20:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <doorClose>
     e24:	04 c0       	rjmp	.+8      	; 0xe2e <doorService+0x52>
			get_Choice = TRUE;
			break;
			case 'b':
			return;
			default:
			uart_sendString("Invalid choice.\n");
     e26:	87 ec       	ldi	r24, 0xC7	; 199
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
			get_Choice = TRUE;
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <get_Choice>
     e34:	08 95       	ret

00000e36 <lamp_Dim_service_init>:

boolean Dim_Service_state = TRUE;

void lamp_Dim_service_init()
{
	dimmer_init();
     e36:	0c 94 a1 00 	jmp	0x142	; 0x142 <dimmer_init>

00000e3a <lamp_Dim_service>:
}

void lamp_Dim_service()
{
	switch(Dim_Service_state)
     e3a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Dim_Service_state>
     e3e:	88 23       	and	r24, r24
     e40:	21 f0       	breq	.+8      	; 0xe4a <lamp_Dim_service+0x10>
     e42:	81 30       	cpi	r24, 0x01	; 1
     e44:	21 f4       	brne	.+8      	; 0xe4e <lamp_Dim_service+0x14>
	{
		case TRUE:
			dimmer_setIntensity();
     e46:	0c 94 ac 00 	jmp	0x158	; 0x158 <dimmer_setIntensity>
			break;
		case FALSE:
			dimmer_turnOff();
     e4a:	0c 94 c4 00 	jmp	0x188	; 0x188 <dimmer_turnOff>
     e4e:	08 95       	ret

00000e50 <Lamp_Service_Dim_Toggle>:
	}
}

void Lamp_Service_Dim_Toggle()
{
	Dim_Service_state^= TRUE;
     e50:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Dim_Service_state>
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	89 27       	eor	r24, r25
     e58:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <Dim_Service_state>
     e5c:	08 95       	ret

00000e5e <Lamp_Service_Dim_state>:
}

boolean Lamp_Service_Dim_state()
{
	return Dim_Service_state;
     e5e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Dim_Service_state>
     e62:	08 95       	ret

00000e64 <getPassword_local>:
	}
}

// Function to get an 8-digit password from the user securely
void getPassword_local(u8* password, u8 maxLength)
{
     e64:	cf 92       	push	r12
     e66:	df 92       	push	r13
     e68:	ef 92       	push	r14
     e6a:	ff 92       	push	r15
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	6c 01       	movw	r12, r24
     e76:	e6 2e       	mov	r14, r22
	u8 index = 0;

	lcd_displayStr("Enter Password:");
     e78:	88 ed       	ldi	r24, 0xD8	; 216
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
}

// Function to get an 8-digit password from the user securely
void getPassword_local(u8* password, u8 maxLength)
{
	u8 index = 0;
     e80:	c0 e0       	ldi	r28, 0x00	; 0

	lcd_displayStr("Enter Password:");

	// Simulate getting user input for the password
	while (index < maxLength - 1)
     e82:	f1 2c       	mov	r15, r1
     e84:	21 e0       	ldi	r18, 0x01	; 1
     e86:	e2 1a       	sub	r14, r18
     e88:	f1 08       	sbc	r15, r1
     e8a:	0c 2f       	mov	r16, r28
     e8c:	10 e0       	ldi	r17, 0x00	; 0
     e8e:	0e 15       	cp	r16, r14
     e90:	1f 05       	cpc	r17, r15
     e92:	0c f0       	brlt	.+2      	; 0xe96 <getPassword_local+0x32>
     e94:	49 c0       	rjmp	.+146    	; 0xf28 <getPassword_local+0xc4>
	{
		u8 key = MM74C922_GetKey();
     e96:	0e 94 85 02 	call	0x50a	; 0x50a <MM74C922_GetKey>
     e9a:	d8 2f       	mov	r29, r24

		// Check for Enter key
		if (key == 'D')
     e9c:	84 34       	cpi	r24, 0x44	; 68
     e9e:	f1 f4       	brne	.+60     	; 0xedc <getPassword_local+0x78>
		{
			// Check if the password is exactly 8 digits
			if (index == 8)
			{
				lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
     ea0:	81 e0       	ldi	r24, 0x01	; 1

		// Check for Enter key
		if (key == 'D')
		{
			// Check if the password is exactly 8 digits
			if (index == 8)
     ea2:	c8 30       	cpi	r28, 0x08	; 8
     ea4:	19 f4       	brne	.+6      	; 0xeac <getPassword_local+0x48>
			{
				lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
     ea6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
				break;
     eaa:	3e c0       	rjmp	.+124    	; 0xf28 <getPassword_local+0xc4>
			}
			else
			{
				// Password length is incorrect, clear and ask again
				lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
     eac:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
				lcd_displayStr("Invalid Password");
     eb0:	88 ee       	ldi	r24, 0xE8	; 232
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     eb8:	8f ef       	ldi	r24, 0xFF	; 255
     eba:	93 ed       	ldi	r25, 0xD3	; 211
     ebc:	20 e3       	ldi	r18, 0x30	; 48
     ebe:	81 50       	subi	r24, 0x01	; 1
     ec0:	90 40       	sbci	r25, 0x00	; 0
     ec2:	20 40       	sbci	r18, 0x00	; 0
     ec4:	e1 f7       	brne	.-8      	; 0xebe <getPassword_local+0x5a>
     ec6:	00 c0       	rjmp	.+0      	; 0xec8 <getPassword_local+0x64>
     ec8:	00 00       	nop
				_delay_ms(1000);  // Wait for 1 second
				lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
				lcd_displayStr("Enter Password:");
     ed0:	88 ed       	ldi	r24, 0xD8	; 216
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
				index = 0;
     ed8:	c0 e0       	ldi	r28, 0x00	; 0
				continue;
     eda:	d7 cf       	rjmp	.-82     	; 0xe8a <getPassword_local+0x26>
			}
		}
		else if (key == 'C' && index > 0)
     edc:	83 34       	cpi	r24, 0x43	; 67
     ede:	99 f4       	brne	.+38     	; 0xf06 <getPassword_local+0xa2>
     ee0:	cc 23       	and	r28, r28
     ee2:	99 f2       	breq	.-90     	; 0xe8a <getPassword_local+0x26>
		{  // Backspace
			index--;
     ee4:	c1 50       	subi	r28, 0x01	; 1
			password[index] = '\0';
     ee6:	f6 01       	movw	r30, r12
     ee8:	ec 0f       	add	r30, r28
     eea:	f1 1d       	adc	r31, r1
     eec:	10 82       	st	Z, r1
			lcd_goTo(1,index);
     eee:	6c 2f       	mov	r22, r28
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_goTo>
			lcd_displayChar(' ');
     ef6:	80 e2       	ldi	r24, 0x20	; 32
     ef8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <lcd_displayChar>
			lcd_goTo(1,index);
     efc:	6c 2f       	mov	r22, r28
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_goTo>
     f04:	c2 cf       	rjmp	.-124    	; 0xe8a <getPassword_local+0x26>
		}
		else if (key >= 0 && key <= 9)
     f06:	8a 30       	cpi	r24, 0x0A	; 10
     f08:	08 f0       	brcs	.+2      	; 0xf0c <getPassword_local+0xa8>
     f0a:	bf cf       	rjmp	.-130    	; 0xe8a <getPassword_local+0x26>
		{  // Numeric keys
			key += '0';
			lcd_goTo(1,index);
     f0c:	6c 2f       	mov	r22, r28
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_goTo>
			lcd_displayChar('*');
     f14:	8a e2       	ldi	r24, 0x2A	; 42
     f16:	0e 94 ee 01 	call	0x3dc	; 0x3dc <lcd_displayChar>
			password[index] = key;
     f1a:	f6 01       	movw	r30, r12
     f1c:	e0 0f       	add	r30, r16
     f1e:	f1 1f       	adc	r31, r17
     f20:	d0 5d       	subi	r29, 0xD0	; 208
     f22:	d0 83       	st	Z, r29
			index++;
     f24:	cf 5f       	subi	r28, 0xFF	; 255
     f26:	b1 cf       	rjmp	.-158    	; 0xe8a <getPassword_local+0x26>
		}
		// Add more conditions for other keys as needed
	}
	password[index] = '\0';  // Null-terminate the password
     f28:	f6 01       	movw	r30, r12
     f2a:	e0 0f       	add	r30, r16
     f2c:	f1 1f       	adc	r31, r17
     f2e:	10 82       	st	Z, r1
}
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	ff 90       	pop	r15
     f3a:	ef 90       	pop	r14
     f3c:	df 90       	pop	r13
     f3e:	cf 90       	pop	r12
     f40:	08 95       	ret

00000f42 <writeUserToEEPROM_local>:

void writeUserToEEPROM_local(user_local *user) {
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	8c 01       	movw	r16, r24
	u16 startAddress = EEPROM_USER_DATA_ADDR_LOCAL + (userCount_local * 26);
     f4c:	c0 91 a8 04 	lds	r28, 0x04A8	; 0x8004a8 <userCount_local>
     f50:	8a e1       	ldi	r24, 0x1A	; 26
     f52:	c8 9f       	mul	r28, r24
     f54:	e0 01       	movw	r28, r0
     f56:	11 24       	eor	r1, r1
     f58:	be 01       	movw	r22, r28
     f5a:	6f 5f       	subi	r22, 0xFF	; 255
     f5c:	7f 4f       	sbci	r23, 0xFF	; 255
	EEPROM_write_block(user->uname, startAddress, 16);
     f5e:	40 e1       	ldi	r20, 0x10	; 16
     f60:	c8 01       	movw	r24, r16
     f62:	0e 94 13 04 	call	0x826	; 0x826 <EEPROM_write_block>
	startAddress+=16;
	EEPROM_write_block(user->password,startAddress, 9);
     f66:	be 01       	movw	r22, r28
     f68:	6f 5e       	subi	r22, 0xEF	; 239
     f6a:	7f 4f       	sbci	r23, 0xFF	; 255
     f6c:	49 e0       	ldi	r20, 0x09	; 9
     f6e:	c8 01       	movw	r24, r16
     f70:	40 96       	adiw	r24, 0x10	; 16
     f72:	0e 94 13 04 	call	0x826	; 0x826 <EEPROM_write_block>
	startAddress+=9;
	EEPROM_write(startAddress,user->id);
     f76:	f8 01       	movw	r30, r16
     f78:	61 8d       	ldd	r22, Z+25	; 0x19
     f7a:	ce 01       	movw	r24, r28
     f7c:	4a 96       	adiw	r24, 0x1a	; 26
}
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
	u16 startAddress = EEPROM_USER_DATA_ADDR_LOCAL + (userCount_local * 26);
	EEPROM_write_block(user->uname, startAddress, 16);
	startAddress+=16;
	EEPROM_write_block(user->password,startAddress, 9);
	startAddress+=9;
	EEPROM_write(startAddress,user->id);
     f86:	0c 94 04 04 	jmp	0x808	; 0x808 <EEPROM_write>

00000f8a <readUserFromEEPROM_local>:
}

void readUserFromEEPROM_local(user_local *user, u8 userId) {
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	8c 01       	movw	r16, r24
	u16 startAddress = EEPROM_USER_DATA_ADDR_LOCAL + (userId * 26);
     f94:	8a e1       	ldi	r24, 0x1A	; 26
     f96:	68 9f       	mul	r22, r24
     f98:	e0 01       	movw	r28, r0
     f9a:	11 24       	eor	r1, r1
     f9c:	be 01       	movw	r22, r28
     f9e:	6f 5f       	subi	r22, 0xFF	; 255
     fa0:	7f 4f       	sbci	r23, 0xFF	; 255
	EEPROM_read_block(user->uname, startAddress, 16);
     fa2:	40 e1       	ldi	r20, 0x10	; 16
     fa4:	c8 01       	movw	r24, r16
     fa6:	0e 94 30 04 	call	0x860	; 0x860 <EEPROM_read_block>
	startAddress+=16;
	EEPROM_read_block(user->password, startAddress, 9);
     faa:	be 01       	movw	r22, r28
     fac:	6f 5e       	subi	r22, 0xEF	; 239
     fae:	7f 4f       	sbci	r23, 0xFF	; 255
     fb0:	49 e0       	ldi	r20, 0x09	; 9
     fb2:	c8 01       	movw	r24, r16
     fb4:	40 96       	adiw	r24, 0x10	; 16
     fb6:	0e 94 30 04 	call	0x860	; 0x860 <EEPROM_read_block>
	startAddress+=9;
	user->id = EEPROM_read(startAddress);
     fba:	ce 01       	movw	r24, r28
     fbc:	4a 96       	adiw	r24, 0x1a	; 26
     fbe:	0e 94 0c 04 	call	0x818	; 0x818 <EEPROM_read>
     fc2:	f8 01       	movw	r30, r16
     fc4:	81 8f       	std	Z+25, r24	; 0x19
}
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	08 95       	ret

00000fd0 <localDB_init>:
void logout_local();



void localDB_init()
{
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
	if (EEPROM_read(EEPROM_USER_COUNT_ADDR_LOCAL) == 0xFF)
     fd4:	8c e2       	ldi	r24, 0x2C	; 44
     fd6:	91 e0       	ldi	r25, 0x01	; 1
     fd8:	0e 94 0c 04 	call	0x818	; 0x818 <EEPROM_read>
     fdc:	8f 3f       	cpi	r24, 0xFF	; 255
     fde:	41 f4       	brne	.+16     	; 0xff0 <localDB_init+0x20>
	{
		EEPROM_write(EEPROM_USER_COUNT_ADDR_LOCAL, userCount_local);
     fe0:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <userCount_local>
     fe4:	8c e2       	ldi	r24, 0x2C	; 44
     fe6:	91 e0       	ldi	r25, 0x01	; 1
			readUserFromEEPROM_local(&localUsers[i], i);
			
		}
		
	}
}
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28

void localDB_init()
{
	if (EEPROM_read(EEPROM_USER_COUNT_ADDR_LOCAL) == 0xFF)
	{
		EEPROM_write(EEPROM_USER_COUNT_ADDR_LOCAL, userCount_local);
     fec:	0c 94 04 04 	jmp	0x808	; 0x808 <EEPROM_write>
	}
	else
	{
		userCount_local = EEPROM_read(EEPROM_USER_COUNT_ADDR_LOCAL);
     ff0:	8c e2       	ldi	r24, 0x2C	; 44
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	0e 94 0c 04 	call	0x818	; 0x818 <EEPROM_read>
     ff8:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <userCount_local>
		for (u8 i = 0; i < userCount_local; i++) {
     ffc:	c0 e0       	ldi	r28, 0x00	; 0
			readUserFromEEPROM_local(&localUsers[i], i);
     ffe:	da e1       	ldi	r29, 0x1A	; 26
		EEPROM_write(EEPROM_USER_COUNT_ADDR_LOCAL, userCount_local);
	}
	else
	{
		userCount_local = EEPROM_read(EEPROM_USER_COUNT_ADDR_LOCAL);
		for (u8 i = 0; i < userCount_local; i++) {
    1000:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <userCount_local>
    1004:	c8 17       	cp	r28, r24
    1006:	50 f4       	brcc	.+20     	; 0x101c <localDB_init+0x4c>
			readUserFromEEPROM_local(&localUsers[i], i);
    1008:	dc 9f       	mul	r29, r28
    100a:	c0 01       	movw	r24, r0
    100c:	11 24       	eor	r1, r1
    100e:	6c 2f       	mov	r22, r28
    1010:	8c 53       	subi	r24, 0x3C	; 60
    1012:	9b 4f       	sbci	r25, 0xFB	; 251
    1014:	0e 94 c5 07 	call	0xf8a	; 0xf8a <readUserFromEEPROM_local>
		EEPROM_write(EEPROM_USER_COUNT_ADDR_LOCAL, userCount_local);
	}
	else
	{
		userCount_local = EEPROM_read(EEPROM_USER_COUNT_ADDR_LOCAL);
		for (u8 i = 0; i < userCount_local; i++) {
    1018:	cf 5f       	subi	r28, 0xFF	; 255
    101a:	f2 cf       	rjmp	.-28     	; 0x1000 <localDB_init+0x30>
			readUserFromEEPROM_local(&localUsers[i], i);
			
		}
		
	}
}
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	08 95       	ret

00001022 <addUserToEEPROM_local>:
	startAddress+=9;
	user->id = EEPROM_read(startAddress);
}

u8 addUserToEEPROM_local(const u8 *username, const u8* password)
{
    1022:	cf 92       	push	r12
    1024:	df 92       	push	r13
    1026:	ef 92       	push	r14
    1028:	ff 92       	push	r15
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	cf 93       	push	r28
	if (userCount_local < 10) {  // Assuming a maximum of 10 users
    1030:	c0 91 a8 04 	lds	r28, 0x04A8	; 0x8004a8 <userCount_local>
    1034:	ca 30       	cpi	r28, 0x0A	; 10
    1036:	18 f5       	brcc	.+70     	; 0x107e <addUserToEEPROM_local+0x5c>
    1038:	7b 01       	movw	r14, r22
    103a:	bc 01       	movw	r22, r24
		strcpy(&localUsers[userCount_local].uname, username);
    103c:	8a e1       	ldi	r24, 0x1A	; 26
    103e:	c8 9f       	mul	r28, r24
    1040:	60 01       	movw	r12, r0
    1042:	11 24       	eor	r1, r1
    1044:	86 01       	movw	r16, r12
    1046:	0c 53       	subi	r16, 0x3C	; 60
    1048:	1b 4f       	sbci	r17, 0xFB	; 251
    104a:	c8 01       	movw	r24, r16
    104c:	0e 94 81 12 	call	0x2502	; 0x2502 <strcpy>
		strcpy(&localUsers[userCount_local].password, password);
    1050:	b7 01       	movw	r22, r14
    1052:	c6 01       	movw	r24, r12
    1054:	8c 52       	subi	r24, 0x2C	; 44
    1056:	9b 4f       	sbci	r25, 0xFB	; 251
    1058:	0e 94 81 12 	call	0x2502	; 0x2502 <strcpy>
		localUsers[userCount_local].id = userCount_local + 1;
    105c:	cf 5f       	subi	r28, 0xFF	; 255
    105e:	f8 01       	movw	r30, r16
    1060:	c1 8f       	std	Z+25, r28	; 0x19

		writeUserToEEPROM_local(&localUsers[userCount_local]);
    1062:	c8 01       	movw	r24, r16
    1064:	0e 94 a1 07 	call	0xf42	; 0xf42 <writeUserToEEPROM_local>

		userCount_local++;
    1068:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <userCount_local>
    106c:	6f 5f       	subi	r22, 0xFF	; 255
    106e:	60 93 a8 04 	sts	0x04A8, r22	; 0x8004a8 <userCount_local>
		EEPROM_write(EEPROM_USER_COUNT_ADDR_LOCAL, userCount_local);
    1072:	8c e2       	ldi	r24, 0x2C	; 44
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	0e 94 04 04 	call	0x808	; 0x808 <EEPROM_write>
		return REGISTRATION_SUCCESS;
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <addUserToEEPROM_local+0x5e>
		} else {
		// Handle error: User array is full
		return ERROR_USER_ARRAY_FULL;
    107e:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	ff 90       	pop	r15
    1088:	ef 90       	pop	r14
    108a:	df 90       	pop	r13
    108c:	cf 90       	pop	r12
    108e:	08 95       	ret

00001090 <displayUsersOnLCD>:
		//}
	//}
//}

void displayUsersOnLCD(u8 startIndex, u8 endIndex)
{
    1090:	af 92       	push	r10
    1092:	bf 92       	push	r11
    1094:	cf 92       	push	r12
    1096:	df 92       	push	r13
    1098:	ef 92       	push	r14
    109a:	ff 92       	push	r15
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	e2 97       	sbiw	r28, 0x32	; 50
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	18 2f       	mov	r17, r24
    10b6:	06 2f       	mov	r16, r22
	lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
	if (userCount_local == 0)
    10be:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <userCount_local>
    10c2:	81 11       	cpse	r24, r1
    10c4:	04 c0       	rjmp	.+8      	; 0x10ce <displayUsersOnLCD+0x3e>
	{lcd_displayStr("No Local Users");
    10c6:	89 ef       	ldi	r24, 0xF9	; 249
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
	}
	for (u8 i = startIndex; i < endIndex && i < userCount_local; i++) {  // Assuming a maximum of 10 users
		char displayText[50];
		snprintf(displayText, sizeof(displayText), "%s,ID: %d", localUsers[i].uname, localUsers[i].id);
    10ce:	8a e1       	ldi	r24, 0x1A	; 26
    10d0:	b8 2e       	mov	r11, r24
    10d2:	98 e0       	ldi	r25, 0x08	; 8
    10d4:	e9 2e       	mov	r14, r25
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	f9 2e       	mov	r15, r25
    10da:	22 e3       	ldi	r18, 0x32	; 50
    10dc:	a2 2e       	mov	r10, r18
    10de:	ce 01       	movw	r24, r28
    10e0:	01 96       	adiw	r24, 0x01	; 1
    10e2:	6c 01       	movw	r12, r24
{
	lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
	if (userCount_local == 0)
	{lcd_displayStr("No Local Users");
	}
	for (u8 i = startIndex; i < endIndex && i < userCount_local; i++) {  // Assuming a maximum of 10 users
    10e4:	10 17       	cp	r17, r16
    10e6:	20 f5       	brcc	.+72     	; 0x1130 <displayUsersOnLCD+0xa0>
    10e8:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <userCount_local>
    10ec:	18 17       	cp	r17, r24
    10ee:	00 f5       	brcc	.+64     	; 0x1130 <displayUsersOnLCD+0xa0>
		char displayText[50];
		snprintf(displayText, sizeof(displayText), "%s,ID: %d", localUsers[i].uname, localUsers[i].id);
    10f0:	b1 9e       	mul	r11, r17
    10f2:	f0 01       	movw	r30, r0
    10f4:	11 24       	eor	r1, r1
    10f6:	ec 53       	subi	r30, 0x3C	; 60
    10f8:	fb 4f       	sbci	r31, 0xFB	; 251
    10fa:	81 8d       	ldd	r24, Z+25	; 0x19
    10fc:	1f 92       	push	r1
    10fe:	8f 93       	push	r24
    1100:	ff 93       	push	r31
    1102:	ef 93       	push	r30
    1104:	ff 92       	push	r15
    1106:	ef 92       	push	r14
    1108:	1f 92       	push	r1
    110a:	af 92       	push	r10
    110c:	df 92       	push	r13
    110e:	cf 92       	push	r12
    1110:	0e 94 88 12 	call	0x2510	; 0x2510 <snprintf>
		lcd_displayStr(displayText);
    1114:	c6 01       	movw	r24, r12
    1116:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
		lcd_goTo(1,0);
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_goTo>
{
	lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
	if (userCount_local == 0)
	{lcd_displayStr("No Local Users");
	}
	for (u8 i = startIndex; i < endIndex && i < userCount_local; i++) {  // Assuming a maximum of 10 users
    1122:	1f 5f       	subi	r17, 0xFF	; 255
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	da cf       	rjmp	.-76     	; 0x10e4 <displayUsersOnLCD+0x54>
		char displayText[50];
		snprintf(displayText, sizeof(displayText), "%s,ID: %d", localUsers[i].uname, localUsers[i].id);
		lcd_displayStr(displayText);
		lcd_goTo(1,0);
	}
}
    1130:	e2 96       	adiw	r28, 0x32	; 50
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	cd bf       	out	0x3d, r28	; 61
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
    1144:	ff 90       	pop	r15
    1146:	ef 90       	pop	r14
    1148:	df 90       	pop	r13
    114a:	cf 90       	pop	r12
    114c:	bf 90       	pop	r11
    114e:	af 90       	pop	r10
    1150:	08 95       	ret

00001152 <selectUserAndLogin_local>:
	//}
//}


void selectUserAndLogin_local()
{
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	29 97       	sbiw	r28, 0x09	; 9
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
	static boolean Show_Display_ID = TRUE;
	static u8 selectedID = NO_DATA;
	static u8 Try = 0;
	if (Show_Display_ID)
    1166:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Show_Display_ID.2204>
    116a:	88 23       	and	r24, r24
    116c:	49 f0       	breq	.+18     	; 0x1180 <selectUserAndLogin_local+0x2e>
	{
		lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
		lcd_displayStr("Enter User ID:");
    1174:	82 e1       	ldi	r24, 0x12	; 18
    1176:	91 e0       	ldi	r25, 0x01	; 1
    1178:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
		Show_Display_ID = FALSE;
    117c:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <Show_Display_ID.2204>
	}

	selectedID = MM74C922_GetKey();
    1180:	0e 94 85 02 	call	0x50a	; 0x50a <MM74C922_GetKey>
    1184:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <selectedID.2205>

	if (selectedID >= 1 && selectedID <= 10)
    1188:	9f ef       	ldi	r25, 0xFF	; 255
    118a:	98 0f       	add	r25, r24
    118c:	9a 30       	cpi	r25, 0x0A	; 10
    118e:	08 f0       	brcs	.+2      	; 0x1192 <selectUserAndLogin_local+0x40>
    1190:	71 c0       	rjmp	.+226    	; 0x1274 <selectUserAndLogin_local+0x122>
	{  // Assuming a maximum of 10 users
		char enteredPassword[9];
		lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>

		getPassword_local(enteredPassword,9);
    1198:	69 e0       	ldi	r22, 0x09	; 9
    119a:	ce 01       	movw	r24, r28
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	0e 94 32 07 	call	0xe64	; 0xe64 <getPassword_local>

		if (strcmp(enteredPassword, localUsers[selectedID-1].password) == 0)
    11a2:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <selectedID.2205>
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	2a e1       	ldi	r18, 0x1A	; 26
    11ac:	28 9f       	mul	r18, r24
    11ae:	b0 01       	movw	r22, r0
    11b0:	29 9f       	mul	r18, r25
    11b2:	70 0d       	add	r23, r0
    11b4:	11 24       	eor	r1, r1
    11b6:	6c 52       	subi	r22, 0x2C	; 44
    11b8:	7b 4f       	sbci	r23, 0xFB	; 251
    11ba:	ce 01       	movw	r24, r28
    11bc:	01 96       	adiw	r24, 0x01	; 1
    11be:	0e 94 78 12 	call	0x24f0	; 0x24f0 <strcmp>
    11c2:	89 2b       	or	r24, r25
    11c4:	e1 f4       	brne	.+56     	; 0x11fe <selectUserAndLogin_local+0xac>
		{
			lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
			lcd_displayStr("Login Successful");
    11cc:	81 e2       	ldi	r24, 0x21	; 33
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
			login_flag_local = TRUE;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <login_flag_local>
			selectedID = NO_DATA;
    11da:	9f ef       	ldi	r25, 0xFF	; 255
    11dc:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <selectedID.2205>
			Show_Display_ID = TRUE;
    11e0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <Show_Display_ID.2204>
    11e4:	2f ef       	ldi	r18, 0xFF	; 255
    11e6:	83 ed       	ldi	r24, 0xD3	; 211
    11e8:	90 e3       	ldi	r25, 0x30	; 48
    11ea:	21 50       	subi	r18, 0x01	; 1
    11ec:	80 40       	sbci	r24, 0x00	; 0
    11ee:	90 40       	sbci	r25, 0x00	; 0
    11f0:	e1 f7       	brne	.-8      	; 0x11ea <selectUserAndLogin_local+0x98>
    11f2:	00 c0       	rjmp	.+0      	; 0x11f4 <selectUserAndLogin_local+0xa2>
    11f4:	00 00       	nop
			_delay_ms(1000);
			lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
    11fc:	41 c0       	rjmp	.+130    	; 0x1280 <selectUserAndLogin_local+0x12e>
		}
		else
		{
			lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
			lcd_displayStr("Error: Incorrect");
    1204:	82 e3       	ldi	r24, 0x32	; 50
    1206:	91 e0       	ldi	r25, 0x01	; 1
    1208:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
			Try++;
    120c:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <Try.2206>
    1210:	8f 5f       	subi	r24, 0xFF	; 255
    1212:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <Try.2206>
			lcd_goTo(1,3);
    1216:	63 e0       	ldi	r22, 0x03	; 3
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_goTo>
			lcd_displayStr("Password");
    121e:	80 ef       	ldi	r24, 0xF0	; 240
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
			if (Try==3)
    1226:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <Try.2206>
    122a:	83 30       	cpi	r24, 0x03	; 3
    122c:	81 f4       	brne	.+32     	; 0x124e <selectUserAndLogin_local+0xfc>
			{
				Set_System_Stop();
    122e:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <Set_System_Stop>
				lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
				lcd_displayStr("<<Error>>");
    1238:	83 e4       	ldi	r24, 0x43	; 67
    123a:	91 e0       	ldi	r25, 0x01	; 1
    123c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
				lcd_goTo(1,0);
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_goTo>
				lcd_displayStr("<System  Halted>");
    1248:	8d e4       	ldi	r24, 0x4D	; 77
    124a:	91 e0       	ldi	r25, 0x01	; 1
    124c:	17 c0       	rjmp	.+46     	; 0x127c <selectUserAndLogin_local+0x12a>
    124e:	2f ef       	ldi	r18, 0xFF	; 255
    1250:	83 ed       	ldi	r24, 0xD3	; 211
    1252:	90 e3       	ldi	r25, 0x30	; 48
    1254:	21 50       	subi	r18, 0x01	; 1
    1256:	80 40       	sbci	r24, 0x00	; 0
    1258:	90 40       	sbci	r25, 0x00	; 0
    125a:	e1 f7       	brne	.-8      	; 0x1254 <selectUserAndLogin_local+0x102>
    125c:	00 c0       	rjmp	.+0      	; 0x125e <selectUserAndLogin_local+0x10c>
    125e:	00 00       	nop
				return;
			}
			_delay_ms(1000);
			lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
			selectedID = NO_DATA;
    1266:	8f ef       	ldi	r24, 0xFF	; 255
    1268:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <selectedID.2205>
			Show_Display_ID = TRUE;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <Show_Display_ID.2204>
    1272:	06 c0       	rjmp	.+12     	; 0x1280 <selectUserAndLogin_local+0x12e>
		}
	}
	else if (selectedID == NO_DATA)
    1274:	8f 3f       	cpi	r24, 0xFF	; 255
    1276:	21 f0       	breq	.+8      	; 0x1280 <selectUserAndLogin_local+0x12e>
	{
		return;
	}
	else
	{
		lcd_displayStr("Error: Invalid User Order");
    1278:	8e e5       	ldi	r24, 0x5E	; 94
    127a:	91 e0       	ldi	r25, 0x01	; 1
    127c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
	}
}
    1280:	29 96       	adiw	r28, 0x09	; 9
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	08 95       	ret

00001292 <scrollUsersOnLCD>:
	static u8 startIndex = 0;
	static u8 endIndex = 2;  // Display two users at a time
	static u8 key = NO_DATA;
	static boolean login = FALSE;
	static boolean Show_Data = TRUE;
	if (Show_Data)
    1292:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Show_Data.2214>
    1296:	88 23       	and	r24, r24
    1298:	59 f0       	breq	.+22     	; 0x12b0 <scrollUsersOnLCD+0x1e>
	{
		lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
		displayUsersOnLCD(startIndex, endIndex);
    12a0:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <endIndex.2211>
    12a4:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <startIndex.2210>
    12a8:	0e 94 48 08 	call	0x1090	; 0x1090 <displayUsersOnLCD>
		Show_Data = FALSE;
    12ac:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Show_Data.2214>
	}
	if (!login)
    12b0:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <login.2213>
    12b4:	81 11       	cpse	r24, r1
    12b6:	04 c0       	rjmp	.+8      	; 0x12c0 <scrollUsersOnLCD+0x2e>
	{
		key = MM74C922_GetKey();
    12b8:	0e 94 85 02 	call	0x50a	; 0x50a <MM74C922_GetKey>
    12bc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <key.2212>
	}
	
	switch(key)
    12c0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <key.2212>
    12c4:	82 34       	cpi	r24, 0x42	; 66
    12c6:	79 f0       	breq	.+30     	; 0x12e6 <scrollUsersOnLCD+0x54>
    12c8:	83 34       	cpi	r24, 0x43	; 67
    12ca:	e9 f0       	breq	.+58     	; 0x1306 <scrollUsersOnLCD+0x74>
    12cc:	81 34       	cpi	r24, 0x41	; 65
    12ce:	69 f5       	brne	.+90     	; 0x132a <scrollUsersOnLCD+0x98>
	{
		case KEY_A:
			if (startIndex >= 2)
    12d0:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <startIndex.2210>
    12d4:	82 30       	cpi	r24, 0x02	; 2
    12d6:	48 f1       	brcs	.+82     	; 0x132a <scrollUsersOnLCD+0x98>
			{
				startIndex -= 2;
    12d8:	82 50       	subi	r24, 0x02	; 2
    12da:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <startIndex.2210>
				endIndex -= 2;
    12de:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <endIndex.2211>
    12e2:	82 50       	subi	r24, 0x02	; 2
    12e4:	0a c0       	rjmp	.+20     	; 0x12fa <scrollUsersOnLCD+0x68>
				Show_Data = TRUE;
			}
			break;
		case KEY_B:
			if (endIndex < 11)
    12e6:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <endIndex.2211>
    12ea:	8b 30       	cpi	r24, 0x0B	; 11
    12ec:	f0 f4       	brcc	.+60     	; 0x132a <scrollUsersOnLCD+0x98>
			{  // Assuming a maximum of 10 users
				startIndex += 2;
    12ee:	90 91 a6 04 	lds	r25, 0x04A6	; 0x8004a6 <startIndex.2210>
    12f2:	9e 5f       	subi	r25, 0xFE	; 254
    12f4:	90 93 a6 04 	sts	0x04A6, r25	; 0x8004a6 <startIndex.2210>
				endIndex += 2;
    12f8:	8e 5f       	subi	r24, 0xFE	; 254
    12fa:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <endIndex.2211>
				Show_Data = TRUE;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Show_Data.2214>
    1304:	08 95       	ret
					break;
				}
			}
			break;
		case KEY_C:
			selectUserAndLogin_local();
    1306:	0e 94 a9 08 	call	0x1152	; 0x1152 <selectUserAndLogin_local>
			login = TRUE;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <login.2213>
			startIndex = 0;
    1310:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <startIndex.2210>
			endIndex = 2;
    1314:	92 e0       	ldi	r25, 0x02	; 2
    1316:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <endIndex.2211>
			if (login_flag_local)
    131a:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <login_flag_local>
    131e:	99 23       	and	r25, r25
    1320:	21 f0       	breq	.+8      	; 0x132a <scrollUsersOnLCD+0x98>
			{Show_Data = TRUE;
    1322:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Show_Data.2214>
			 login = FALSE;}
    1326:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <login.2213>
    132a:	08 95       	ret

0000132c <loginAck_local>:
}

boolean loginAck_local()
{
	return login_flag_local;
}
    132c:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <login_flag_local>
    1330:	08 95       	ret

00001332 <logout_local>:

void logout_local()
{
	login_flag_local = FALSE;
    1332:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <login_flag_local>
    1336:	08 95       	ret

00001338 <local_menu_Idle_timer>:
        break;
    default:
        break;
    }
    airConditioner_Set_Config(&ac_config);
}
    1338:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <Idle_timerCounter>
    133c:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <Idle_timerCounter+0x1>
    1340:	01 96       	adiw	r24, 0x01	; 1
    1342:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <Idle_timerCounter+0x1>
    1346:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <Idle_timerCounter>
    134a:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <Idle_timer_displayCounter>
    134e:	90 91 c9 05 	lds	r25, 0x05C9	; 0x8005c9 <Idle_timer_displayCounter+0x1>
    1352:	01 96       	adiw	r24, 0x01	; 1
    1354:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <Idle_timer_displayCounter+0x1>
    1358:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <Idle_timer_displayCounter>
    135c:	86 e0       	ldi	r24, 0x06	; 6
    135e:	0e 94 e5 05 	call	0xbca	; 0xbca <timer2_setPreLoad>
    1362:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <Idle_timerCounter>
    1366:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <Idle_timerCounter+0x1>
    136a:	80 37       	cpi	r24, 0x70	; 112
    136c:	92 40       	sbci	r25, 0x02	; 2
    136e:	39 f4       	brne	.+14     	; 0x137e <local_menu_Idle_timer+0x46>
    1370:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <Idle_timerCounter+0x1>
    1374:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <Idle_timerCounter>
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <local_idle>
    137e:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <Idle_timer_displayCounter>
    1382:	90 91 c9 05 	lds	r25, 0x05C9	; 0x8005c9 <Idle_timer_displayCounter+0x1>
    1386:	8c 39       	cpi	r24, 0x9C	; 156
    1388:	91 05       	cpc	r25, r1
    138a:	39 f4       	brne	.+14     	; 0x139a <local_menu_Idle_timer+0x62>
    138c:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <Idle_timer_displayCounter+0x1>
    1390:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <Idle_timer_displayCounter>
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <local_idle_Show_display>
    139a:	08 95       	ret

0000139c <local_Menu_Slector_Display>:
    139c:	fc 01       	movw	r30, r24
    139e:	80 81       	ld	r24, Z
    13a0:	88 23       	and	r24, r24
    13a2:	19 f0       	breq	.+6      	; 0x13aa <local_Menu_Slector_Display+0xe>
    13a4:	81 30       	cpi	r24, 0x01	; 1
    13a6:	21 f0       	breq	.+8      	; 0x13b0 <local_Menu_Slector_Display+0x14>
    13a8:	08 95       	ret
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <local_Menu_Slector_Display+0x18>
    13b0:	60 e0       	ldi	r22, 0x00	; 0
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_goTo>
    13b8:	8e e3       	ldi	r24, 0x3E	; 62
    13ba:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <lcd_displayChar>

000013be <local_Menu_Display>:
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	ec 01       	movw	r28, r24
    13c4:	61 e0       	ldi	r22, 0x01	; 1
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_goTo>
    13cc:	88 81       	ld	r24, Y
    13ce:	88 23       	and	r24, r24
    13d0:	69 f0       	breq	.+26     	; 0x13ec <local_Menu_Display+0x2e>
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	c9 f4       	brne	.+50     	; 0x1408 <local_Menu_Display+0x4a>
    13d6:	83 e8       	ldi	r24, 0x83	; 131
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    13de:	61 e0       	ldi	r22, 0x01	; 1
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_goTo>
    13e6:	8e e8       	ldi	r24, 0x8E	; 142
    13e8:	91 e0       	ldi	r25, 0x01	; 1
    13ea:	0a c0       	rjmp	.+20     	; 0x1400 <local_Menu_Display+0x42>
    13ec:	88 e7       	ldi	r24, 0x78	; 120
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    13f4:	61 e0       	ldi	r22, 0x01	; 1
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_goTo>
    13fc:	83 e8       	ldi	r24, 0x83	; 131
    13fe:	91 e0       	ldi	r25, 0x01	; 1
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <lcd_displayStr>
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	08 95       	ret

0000140e <local_Menu_LED_Display>:
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	ec 01       	movw	r28, r24
    1414:	61 e0       	ldi	r22, 0x01	; 1
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_goTo>
    141c:	88 81       	ld	r24, Y
    141e:	82 30       	cpi	r24, 0x02	; 2
    1420:	09 f4       	brne	.+2      	; 0x1424 <local_Menu_LED_Display+0x16>
    1422:	43 c0       	rjmp	.+134    	; 0x14aa <local_Menu_LED_Display+0x9c>
    1424:	28 f4       	brcc	.+10     	; 0x1430 <local_Menu_LED_Display+0x22>
    1426:	88 23       	and	r24, r24
    1428:	61 f0       	breq	.+24     	; 0x1442 <local_Menu_LED_Display+0x34>
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	21 f1       	breq	.+72     	; 0x1476 <local_Menu_LED_Display+0x68>
    142e:	ab c0       	rjmp	.+342    	; 0x1586 <local_Menu_LED_Display+0x178>
    1430:	84 30       	cpi	r24, 0x04	; 4
    1432:	09 f4       	brne	.+2      	; 0x1436 <local_Menu_LED_Display+0x28>
    1434:	6d c0       	rjmp	.+218    	; 0x1510 <local_Menu_LED_Display+0x102>
    1436:	08 f4       	brcc	.+2      	; 0x143a <local_Menu_LED_Display+0x2c>
    1438:	4f c0       	rjmp	.+158    	; 0x14d8 <local_Menu_LED_Display+0xca>
    143a:	85 30       	cpi	r24, 0x05	; 5
    143c:	09 f4       	brne	.+2      	; 0x1440 <local_Menu_LED_Display+0x32>
    143e:	8a c0       	rjmp	.+276    	; 0x1554 <local_Menu_LED_Display+0x146>
    1440:	a2 c0       	rjmp	.+324    	; 0x1586 <local_Menu_LED_Display+0x178>
    1442:	82 ea       	ldi	r24, 0xA2	; 162
    1444:	91 e0       	ldi	r25, 0x01	; 1
    1446:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lamp_Getstate>
    1450:	81 11       	cpse	r24, r1
    1452:	03 c0       	rjmp	.+6      	; 0x145a <local_Menu_LED_Display+0x4c>
    1454:	8c e9       	ldi	r24, 0x9C	; 156
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	02 c0       	rjmp	.+4      	; 0x145e <local_Menu_LED_Display+0x50>
    145a:	86 e9       	ldi	r24, 0x96	; 150
    145c:	91 e0       	ldi	r25, 0x01	; 1
    145e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    1462:	61 e0       	ldi	r22, 0x01	; 1
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_goTo>
    146a:	89 ea       	ldi	r24, 0xA9	; 169
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    1472:	82 e0       	ldi	r24, 0x02	; 2
    1474:	4a c0       	rjmp	.+148    	; 0x150a <local_Menu_LED_Display+0xfc>
    1476:	89 ea       	ldi	r24, 0xA9	; 169
    1478:	91 e0       	ldi	r25, 0x01	; 1
    147a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    147e:	82 e0       	ldi	r24, 0x02	; 2
    1480:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lamp_Getstate>
    1484:	81 11       	cpse	r24, r1
    1486:	03 c0       	rjmp	.+6      	; 0x148e <local_Menu_LED_Display+0x80>
    1488:	8c e9       	ldi	r24, 0x9C	; 156
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <local_Menu_LED_Display+0x84>
    148e:	86 e9       	ldi	r24, 0x96	; 150
    1490:	91 e0       	ldi	r25, 0x01	; 1
    1492:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    1496:	61 e0       	ldi	r22, 0x01	; 1
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_goTo>
    149e:	80 eb       	ldi	r24, 0xB0	; 176
    14a0:	91 e0       	ldi	r25, 0x01	; 1
    14a2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    14a6:	83 e0       	ldi	r24, 0x03	; 3
    14a8:	30 c0       	rjmp	.+96     	; 0x150a <local_Menu_LED_Display+0xfc>
    14aa:	80 eb       	ldi	r24, 0xB0	; 176
    14ac:	91 e0       	ldi	r25, 0x01	; 1
    14ae:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    14b2:	83 e0       	ldi	r24, 0x03	; 3
    14b4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lamp_Getstate>
    14b8:	81 11       	cpse	r24, r1
    14ba:	03 c0       	rjmp	.+6      	; 0x14c2 <local_Menu_LED_Display+0xb4>
    14bc:	8c e9       	ldi	r24, 0x9C	; 156
    14be:	91 e0       	ldi	r25, 0x01	; 1
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <local_Menu_LED_Display+0xb8>
    14c2:	86 e9       	ldi	r24, 0x96	; 150
    14c4:	91 e0       	ldi	r25, 0x01	; 1
    14c6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    14ca:	61 e0       	ldi	r22, 0x01	; 1
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_goTo>
    14d2:	87 eb       	ldi	r24, 0xB7	; 183
    14d4:	91 e0       	ldi	r25, 0x01	; 1
    14d6:	16 c0       	rjmp	.+44     	; 0x1504 <local_Menu_LED_Display+0xf6>
    14d8:	87 eb       	ldi	r24, 0xB7	; 183
    14da:	91 e0       	ldi	r25, 0x01	; 1
    14dc:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    14e0:	84 e0       	ldi	r24, 0x04	; 4
    14e2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lamp_Getstate>
    14e6:	81 11       	cpse	r24, r1
    14e8:	03 c0       	rjmp	.+6      	; 0x14f0 <local_Menu_LED_Display+0xe2>
    14ea:	8c e9       	ldi	r24, 0x9C	; 156
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <local_Menu_LED_Display+0xe6>
    14f0:	86 e9       	ldi	r24, 0x96	; 150
    14f2:	91 e0       	ldi	r25, 0x01	; 1
    14f4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    14f8:	61 e0       	ldi	r22, 0x01	; 1
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_goTo>
    1500:	8e eb       	ldi	r24, 0xBE	; 190
    1502:	91 e0       	ldi	r25, 0x01	; 1
    1504:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    1508:	84 e0       	ldi	r24, 0x04	; 4
    150a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lamp_Getstate>
    150e:	1a c0       	rjmp	.+52     	; 0x1544 <local_Menu_LED_Display+0x136>
    1510:	8e eb       	ldi	r24, 0xBE	; 190
    1512:	91 e0       	ldi	r25, 0x01	; 1
    1514:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    1518:	84 e0       	ldi	r24, 0x04	; 4
    151a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lamp_Getstate>
    151e:	81 11       	cpse	r24, r1
    1520:	03 c0       	rjmp	.+6      	; 0x1528 <local_Menu_LED_Display+0x11a>
    1522:	8c e9       	ldi	r24, 0x9C	; 156
    1524:	91 e0       	ldi	r25, 0x01	; 1
    1526:	02 c0       	rjmp	.+4      	; 0x152c <local_Menu_LED_Display+0x11e>
    1528:	86 e9       	ldi	r24, 0x96	; 150
    152a:	91 e0       	ldi	r25, 0x01	; 1
    152c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    1530:	61 e0       	ldi	r22, 0x01	; 1
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_goTo>
    1538:	85 ec       	ldi	r24, 0xC5	; 197
    153a:	91 e0       	ldi	r25, 0x01	; 1
    153c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    1540:	0e 94 2f 07 	call	0xe5e	; 0xe5e <Lamp_Service_Dim_state>
    1544:	81 11       	cpse	r24, r1
    1546:	03 c0       	rjmp	.+6      	; 0x154e <local_Menu_LED_Display+0x140>
    1548:	8c e9       	ldi	r24, 0x9C	; 156
    154a:	91 e0       	ldi	r25, 0x01	; 1
    154c:	18 c0       	rjmp	.+48     	; 0x157e <local_Menu_LED_Display+0x170>
    154e:	86 e9       	ldi	r24, 0x96	; 150
    1550:	91 e0       	ldi	r25, 0x01	; 1
    1552:	15 c0       	rjmp	.+42     	; 0x157e <local_Menu_LED_Display+0x170>
    1554:	85 ec       	ldi	r24, 0xC5	; 197
    1556:	91 e0       	ldi	r25, 0x01	; 1
    1558:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    155c:	0e 94 2f 07 	call	0xe5e	; 0xe5e <Lamp_Service_Dim_state>
    1560:	81 11       	cpse	r24, r1
    1562:	03 c0       	rjmp	.+6      	; 0x156a <local_Menu_LED_Display+0x15c>
    1564:	8c e9       	ldi	r24, 0x9C	; 156
    1566:	91 e0       	ldi	r25, 0x01	; 1
    1568:	02 c0       	rjmp	.+4      	; 0x156e <local_Menu_LED_Display+0x160>
    156a:	86 e9       	ldi	r24, 0x96	; 150
    156c:	91 e0       	ldi	r25, 0x01	; 1
    156e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    1572:	61 e0       	ldi	r22, 0x01	; 1
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_goTo>
    157a:	8e ec       	ldi	r24, 0xCE	; 206
    157c:	91 e0       	ldi	r25, 0x01	; 1
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <lcd_displayStr>
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	08 95       	ret

0000158c <local_Menu_AC_Display>:
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	8c 01       	movw	r16, r24
    1596:	eb 01       	movw	r28, r22
    1598:	61 e0       	ldi	r22, 0x01	; 1
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_goTo>
    15a0:	f8 01       	movw	r30, r16
    15a2:	80 81       	ld	r24, Z
    15a4:	81 30       	cpi	r24, 0x01	; 1
    15a6:	99 f1       	breq	.+102    	; 0x160e <local_Menu_AC_Display+0x82>
    15a8:	d0 f0       	brcs	.+52     	; 0x15de <local_Menu_AC_Display+0x52>
    15aa:	82 30       	cpi	r24, 0x02	; 2
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <local_Menu_AC_Display+0x24>
    15ae:	4d c0       	rjmp	.+154    	; 0x164a <local_Menu_AC_Display+0xbe>
    15b0:	88 ee       	ldi	r24, 0xE8	; 232
    15b2:	91 e0       	ldi	r25, 0x01	; 1
    15b4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 94 03 02 	call	0x406	; 0x406 <lcd_displayNums>
    15c0:	83 e4       	ldi	r24, 0x43	; 67
    15c2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <lcd_displayChar>
    15c6:	61 e0       	ldi	r22, 0x01	; 1
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_goTo>
    15ce:	8e ec       	ldi	r24, 0xCE	; 206
    15d0:	91 e0       	ldi	r25, 0x01	; 1
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	1f 91       	pop	r17
    15d8:	0f 91       	pop	r16
    15da:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <lcd_displayStr>
    15de:	8a ed       	ldi	r24, 0xDA	; 218
    15e0:	91 e0       	ldi	r25, 0x01	; 1
    15e2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    15e6:	88 81       	ld	r24, Y
    15e8:	81 11       	cpse	r24, r1
    15ea:	03 c0       	rjmp	.+6      	; 0x15f2 <local_Menu_AC_Display+0x66>
    15ec:	8c e9       	ldi	r24, 0x9C	; 156
    15ee:	91 e0       	ldi	r25, 0x01	; 1
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <local_Menu_AC_Display+0x6a>
    15f2:	85 ed       	ldi	r24, 0xD5	; 213
    15f4:	91 e0       	ldi	r25, 0x01	; 1
    15f6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    15fa:	61 e0       	ldi	r22, 0x01	; 1
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_goTo>
    1602:	8e ed       	ldi	r24, 0xDE	; 222
    1604:	91 e0       	ldi	r25, 0x01	; 1
    1606:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	14 c0       	rjmp	.+40     	; 0x1636 <local_Menu_AC_Display+0xaa>
    160e:	8e ed       	ldi	r24, 0xDE	; 222
    1610:	91 e0       	ldi	r25, 0x01	; 1
    1612:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	0e 94 03 02 	call	0x406	; 0x406 <lcd_displayNums>
    161e:	83 e4       	ldi	r24, 0x43	; 67
    1620:	0e 94 ee 01 	call	0x3dc	; 0x3dc <lcd_displayChar>
    1624:	61 e0       	ldi	r22, 0x01	; 1
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_goTo>
    162c:	88 ee       	ldi	r24, 0xE8	; 232
    162e:	91 e0       	ldi	r25, 0x01	; 1
    1630:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	0e 94 03 02 	call	0x406	; 0x406 <lcd_displayNums>
    163c:	83 e4       	ldi	r24, 0x43	; 67
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <lcd_displayChar>
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	1f 91       	pop	r17
    1650:	0f 91       	pop	r16
    1652:	08 95       	ret

00001654 <local_Menu_Move_Selector>:
    1654:	db 01       	movw	r26, r22
    1656:	fa 01       	movw	r30, r20
    1658:	3c 91       	ld	r19, X
    165a:	33 23       	and	r19, r19
    165c:	19 f0       	breq	.+6      	; 0x1664 <local_Menu_Move_Selector+0x10>
    165e:	31 30       	cpi	r19, 0x01	; 1
    1660:	79 f0       	breq	.+30     	; 0x1680 <local_Menu_Move_Selector+0x2c>
    1662:	08 95       	ret
    1664:	00 97       	sbiw	r24, 0x00	; 0
    1666:	19 f0       	breq	.+6      	; 0x166e <local_Menu_Move_Selector+0x1a>
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	39 f0       	breq	.+14     	; 0x167a <local_Menu_Move_Selector+0x26>
    166c:	08 95       	ret
    166e:	80 81       	ld	r24, Z
    1670:	88 23       	and	r24, r24
    1672:	11 f0       	breq	.+4      	; 0x1678 <local_Menu_Move_Selector+0x24>
    1674:	81 50       	subi	r24, 0x01	; 1
    1676:	0d c0       	rjmp	.+26     	; 0x1692 <local_Menu_Move_Selector+0x3e>
    1678:	20 83       	st	Z, r18
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	8c 93       	st	X, r24
    167e:	08 95       	ret
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	51 f0       	breq	.+20     	; 0x1698 <local_Menu_Move_Selector+0x44>
    1684:	01 97       	sbiw	r24, 0x01	; 1
    1686:	09 f0       	breq	.+2      	; 0x168a <local_Menu_Move_Selector+0x36>
    1688:	08 95       	ret
    168a:	80 81       	ld	r24, Z
    168c:	82 17       	cp	r24, r18
    168e:	18 f4       	brcc	.+6      	; 0x1696 <local_Menu_Move_Selector+0x42>
    1690:	8f 5f       	subi	r24, 0xFF	; 255
    1692:	80 83       	st	Z, r24
    1694:	08 95       	ret
    1696:	10 82       	st	Z, r1
    1698:	1c 92       	st	X, r1
    169a:	08 95       	ret

0000169c <local_Menu>:
    169c:	0f 93       	push	r16
    169e:	1f 93       	push	r17
    16a0:	cf 93       	push	r28
    16a2:	8c 01       	movw	r16, r24
    16a4:	0e 94 85 02 	call	0x50a	; 0x50a <MM74C922_GetKey>
    16a8:	c8 2f       	mov	r28, r24
    16aa:	8f 3f       	cpi	r24, 0xFF	; 255
    16ac:	19 f0       	breq	.+6      	; 0x16b4 <local_Menu+0x18>
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
    16b4:	84 eb       	ldi	r24, 0xB4	; 180
    16b6:	94 e0       	ldi	r25, 0x04	; 4
    16b8:	0e 94 df 09 	call	0x13be	; 0x13be <local_Menu_Display>
    16bc:	83 eb       	ldi	r24, 0xB3	; 179
    16be:	94 e0       	ldi	r25, 0x04	; 4
    16c0:	0e 94 ce 09 	call	0x139c	; 0x139c <local_Menu_Slector_Display>
    16c4:	c2 34       	cpi	r28, 0x42	; 66
    16c6:	69 f0       	breq	.+26     	; 0x16e2 <local_Menu+0x46>
    16c8:	c3 34       	cpi	r28, 0x43	; 67
    16ca:	11 f1       	breq	.+68     	; 0x1710 <local_Menu+0x74>
    16cc:	c1 34       	cpi	r28, 0x41	; 65
    16ce:	09 f0       	breq	.+2      	; 0x16d2 <local_Menu+0x36>
    16d0:	3f c0       	rjmp	.+126    	; 0x1750 <local_Menu+0xb4>
    16d2:	21 e0       	ldi	r18, 0x01	; 1
    16d4:	44 eb       	ldi	r20, 0xB4	; 180
    16d6:	54 e0       	ldi	r21, 0x04	; 4
    16d8:	63 eb       	ldi	r22, 0xB3	; 179
    16da:	74 e0       	ldi	r23, 0x04	; 4
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	07 c0       	rjmp	.+14     	; 0x16f0 <local_Menu+0x54>
    16e2:	21 e0       	ldi	r18, 0x01	; 1
    16e4:	44 eb       	ldi	r20, 0xB4	; 180
    16e6:	54 e0       	ldi	r21, 0x04	; 4
    16e8:	63 eb       	ldi	r22, 0xB3	; 179
    16ea:	74 e0       	ldi	r23, 0x04	; 4
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	0e 94 2a 0b 	call	0x1654	; 0x1654 <local_Menu_Move_Selector>
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
    16fa:	84 eb       	ldi	r24, 0xB4	; 180
    16fc:	94 e0       	ldi	r25, 0x04	; 4
    16fe:	0e 94 df 09 	call	0x13be	; 0x13be <local_Menu_Display>
    1702:	83 eb       	ldi	r24, 0xB3	; 179
    1704:	94 e0       	ldi	r25, 0x04	; 4
    1706:	cf 91       	pop	r28
    1708:	1f 91       	pop	r17
    170a:	0f 91       	pop	r16
    170c:	0c 94 ce 09 	jmp	0x139c	; 0x139c <local_Menu_Slector_Display>
    1710:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <menu_position.2015>
    1714:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <menu_selector_position.2016>
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	82 0f       	add	r24, r18
    171c:	91 1d       	adc	r25, r1
    171e:	81 30       	cpi	r24, 0x01	; 1
    1720:	91 05       	cpc	r25, r1
    1722:	49 f0       	breq	.+18     	; 0x1736 <local_Menu+0x9a>
    1724:	82 30       	cpi	r24, 0x02	; 2
    1726:	91 05       	cpc	r25, r1
    1728:	71 f0       	breq	.+28     	; 0x1746 <local_Menu+0xaa>
    172a:	89 2b       	or	r24, r25
    172c:	89 f4       	brne	.+34     	; 0x1750 <local_Menu+0xb4>
    172e:	f8 01       	movw	r30, r16
    1730:	10 82       	st	Z, r1
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	03 c0       	rjmp	.+6      	; 0x173c <local_Menu+0xa0>
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	f8 01       	movw	r30, r16
    173a:	80 83       	st	Z, r24
    173c:	cf 91       	pop	r28
    173e:	1f 91       	pop	r17
    1740:	0f 91       	pop	r16
    1742:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <lcd_sendCommand>
    1746:	cf 91       	pop	r28
    1748:	1f 91       	pop	r17
    174a:	0f 91       	pop	r16
    174c:	0c 94 99 09 	jmp	0x1332	; 0x1332 <logout_local>
    1750:	cf 91       	pop	r28
    1752:	1f 91       	pop	r17
    1754:	0f 91       	pop	r16
    1756:	08 95       	ret

00001758 <local_Menu_LED>:

void local_Menu_LED(u8 *current_menu)
{
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	cf 93       	push	r28
    175e:	8c 01       	movw	r16, r24
    static u8 menu_position = 0;
    static u8 menu_selector_position = 0;
    static u8 max_menu_position = 5;
	
    u8 menu_key = MM74C922_GetKey();
    1760:	0e 94 85 02 	call	0x50a	; 0x50a <MM74C922_GetKey>
    1764:	c8 2f       	mov	r28, r24
	
    if (menu_key != NO_DATA)
    1766:	8f 3f       	cpi	r24, 0xFF	; 255
    1768:	19 f0       	breq	.+6      	; 0x1770 <local_Menu_LED+0x18>
    {
	    lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
    }
	    local_Menu_LED_Display(&menu_position);
    1770:	8b ea       	ldi	r24, 0xAB	; 171
    1772:	94 e0       	ldi	r25, 0x04	; 4
    1774:	0e 94 07 0a 	call	0x140e	; 0x140e <local_Menu_LED_Display>
	    local_Menu_Slector_Display(&menu_selector_position);
    1778:	8a ea       	ldi	r24, 0xAA	; 170
    177a:	94 e0       	ldi	r25, 0x04	; 4
    177c:	0e 94 ce 09 	call	0x139c	; 0x139c <local_Menu_Slector_Display>
    switch (menu_key)
    1780:	c2 34       	cpi	r28, 0x42	; 66
    1782:	69 f0       	breq	.+26     	; 0x179e <local_Menu_LED+0x46>
    1784:	c3 34       	cpi	r28, 0x43	; 67
    1786:	11 f1       	breq	.+68     	; 0x17cc <local_Menu_LED+0x74>
    1788:	c1 34       	cpi	r28, 0x41	; 65
    178a:	09 f0       	breq	.+2      	; 0x178e <local_Menu_LED+0x36>
    178c:	48 c0       	rjmp	.+144    	; 0x181e <local_Menu_LED+0xc6>
    {
    case KEY_A:
        local_Menu_Move_Selector(MOVE_UP,&menu_selector_position, &menu_position, max_menu_position);
    178e:	25 e0       	ldi	r18, 0x05	; 5
    1790:	4b ea       	ldi	r20, 0xAB	; 171
    1792:	54 e0       	ldi	r21, 0x04	; 4
    1794:	6a ea       	ldi	r22, 0xAA	; 170
    1796:	74 e0       	ldi	r23, 0x04	; 4
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	07 c0       	rjmp	.+14     	; 0x17ac <local_Menu_LED+0x54>
		lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
		local_Menu_LED_Display(&menu_position);
		local_Menu_Slector_Display(&menu_selector_position);
        break;
    case KEY_B:
        local_Menu_Move_Selector(MOVE_DOWN,&menu_selector_position, &menu_position, max_menu_position);
    179e:	25 e0       	ldi	r18, 0x05	; 5
    17a0:	4b ea       	ldi	r20, 0xAB	; 171
    17a2:	54 e0       	ldi	r21, 0x04	; 4
    17a4:	6a ea       	ldi	r22, 0xAA	; 170
    17a6:	74 e0       	ldi	r23, 0x04	; 4
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	0e 94 2a 0b 	call	0x1654	; 0x1654 <local_Menu_Move_Selector>
		lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
		local_Menu_LED_Display(&menu_position);
    17b6:	8b ea       	ldi	r24, 0xAB	; 171
    17b8:	94 e0       	ldi	r25, 0x04	; 4
    17ba:	0e 94 07 0a 	call	0x140e	; 0x140e <local_Menu_LED_Display>
		local_Menu_Slector_Display(&menu_selector_position);
    17be:	8a ea       	ldi	r24, 0xAA	; 170
    17c0:	94 e0       	ldi	r25, 0x04	; 4
            break;
        }
    default:
        break;
    }
}
    17c2:	cf 91       	pop	r28
    17c4:	1f 91       	pop	r17
    17c6:	0f 91       	pop	r16
        break;
    case KEY_B:
        local_Menu_Move_Selector(MOVE_DOWN,&menu_selector_position, &menu_position, max_menu_position);
		lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
		local_Menu_LED_Display(&menu_position);
		local_Menu_Slector_Display(&menu_selector_position);
    17c8:	0c 94 ce 09 	jmp	0x139c	; 0x139c <local_Menu_Slector_Display>
        break;
    case KEY_C:
        switch (menu_position+menu_selector_position)
    17cc:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <menu_position.2064>
    17d0:	e0 91 aa 04 	lds	r30, 0x04AA	; 0x8004aa <menu_selector_position.2065>
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	e8 0f       	add	r30, r24
    17d8:	f1 1d       	adc	r31, r1
    17da:	e7 30       	cpi	r30, 0x07	; 7
    17dc:	f1 05       	cpc	r31, r1
    17de:	f8 f4       	brcc	.+62     	; 0x181e <local_Menu_LED+0xc6>
    17e0:	e6 5d       	subi	r30, 0xD6	; 214
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__tablejump2__>
        {
        case 0:
            // Lamp1 ON/OFF (Toggle LED1 Status)
			lamp_toggle(LAMP1_ID);
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	01 c0       	rjmp	.+2      	; 0x17ee <local_Menu_LED+0x96>
            break;
        case 1:
            // LED2 ON/OFF (Toggle LED2 Status)
			lamp_toggle(LAMP2_ID);
    17ec:	82 e0       	ldi	r24, 0x02	; 2
            break;
        }
    default:
        break;
    }
}
    17ee:	cf 91       	pop	r28
    17f0:	1f 91       	pop	r17
    17f2:	0f 91       	pop	r16
            // Lamp1 ON/OFF (Toggle LED1 Status)
			lamp_toggle(LAMP1_ID);
            break;
        case 1:
            // LED2 ON/OFF (Toggle LED2 Status)
			lamp_toggle(LAMP2_ID);
    17f4:	0c 94 c9 00 	jmp	0x192	; 0x192 <lamp_toggle>
            break;
        case 2:
            // LED3 ON/OFF (Toggle LED3 Status)
			lamp_toggle(LAMP3_ID);
    17f8:	83 e0       	ldi	r24, 0x03	; 3
    17fa:	f9 cf       	rjmp	.-14     	; 0x17ee <local_Menu_LED+0x96>
            break;
        case 3:
            // LED4 ON/OFF (Toggle LED4 Status)
			lamp_toggle(LAMP4_ID);
    17fc:	84 e0       	ldi	r24, 0x04	; 4
    17fe:	f7 cf       	rjmp	.-18     	; 0x17ee <local_Menu_LED+0x96>
            break;
        case 4:
            // LED5 ON/OFF (Toggle LED5 Status)
			lamp_toggle(LAMP5_ID);
    1800:	85 e0       	ldi	r24, 0x05	; 5
    1802:	f5 cf       	rjmp	.-22     	; 0x17ee <local_Menu_LED+0x96>
            break;
        }
    default:
        break;
    }
}
    1804:	cf 91       	pop	r28
    1806:	1f 91       	pop	r17
    1808:	0f 91       	pop	r16
            // LED5 ON/OFF (Toggle LED5 Status)
			lamp_toggle(LAMP5_ID);
            break;
        case 5:
            // DimmerLED ON/OFF (Toggle DimmerLED Status)
			Lamp_Service_Dim_Toggle();
    180a:	0c 94 28 07 	jmp	0xe50	; 0xe50 <Lamp_Service_Dim_Toggle>
            break;
        case 6:
            // Return
            *current_menu = LOCAL_MENU;
    180e:	83 e0       	ldi	r24, 0x03	; 3
    1810:	f8 01       	movw	r30, r16
    1812:	80 83       	st	Z, r24
			lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
			menu_position = 0;
    181a:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <menu_position.2064>
            break;
        }
    default:
        break;
    }
}
    181e:	cf 91       	pop	r28
    1820:	1f 91       	pop	r17
    1822:	0f 91       	pop	r16
    1824:	08 95       	ret

00001826 <local_Menu_AC_value_adj>:

void local_Menu_AC_value_adj(u8 *value, u8 *v_adj_flag)
{
    1826:	0f 93       	push	r16
    1828:	1f 93       	push	r17
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	ec 01       	movw	r28, r24
    1830:	8b 01       	movw	r16, r22
    switch (MM74C922_GetKey())
    1832:	0e 94 85 02 	call	0x50a	; 0x50a <MM74C922_GetKey>
    1836:	82 34       	cpi	r24, 0x42	; 66
    1838:	39 f0       	breq	.+14     	; 0x1848 <local_Menu_AC_value_adj+0x22>
    183a:	83 34       	cpi	r24, 0x43	; 67
    183c:	49 f0       	breq	.+18     	; 0x1850 <local_Menu_AC_value_adj+0x2a>
    183e:	81 34       	cpi	r24, 0x41	; 65
    1840:	49 f4       	brne	.+18     	; 0x1854 <local_Menu_AC_value_adj+0x2e>
    {
    case KEY_A:
        (*value)++;
    1842:	88 81       	ld	r24, Y
    1844:	8f 5f       	subi	r24, 0xFF	; 255
    1846:	02 c0       	rjmp	.+4      	; 0x184c <local_Menu_AC_value_adj+0x26>
        break;
    case KEY_B:
        (*value)--;
    1848:	88 81       	ld	r24, Y
    184a:	81 50       	subi	r24, 0x01	; 1
    184c:	88 83       	st	Y, r24
        break;
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <local_Menu_AC_value_adj+0x2e>
    case KEY_C:
        (*v_adj_flag) = FALSE;
    1850:	f8 01       	movw	r30, r16
    1852:	10 82       	st	Z, r1
        break;
    default:
        break;
    }
}
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	1f 91       	pop	r17
    185a:	0f 91       	pop	r16
    185c:	08 95       	ret

0000185e <local_Menu_AC>:
        break;
    }
}

void local_Menu_AC(u8 *current_menu)
{
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    1862:	ec 01       	movw	r28, r24
    static u8 max_menu_position = 2;
	
	static u8 menu_key = 0;
	static boolean v_adj_flag = FALSE;
	static AC AC_CFG;
	switch (v_adj_flag)
    1864:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <v_adj_flag.2036>
    1868:	81 11       	cpse	r24, r1
    186a:	04 c0       	rjmp	.+8      	; 0x1874 <local_Menu_AC+0x16>
	{
		case FALSE:
			menu_key = MM74C922_GetKey();
    186c:	0e 94 85 02 	call	0x50a	; 0x50a <MM74C922_GetKey>
    1870:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <menu_key.2035>
			break;
		default:
			break;
	}
	if (menu_key != NO_DATA && v_adj_flag == FALSE)
    1874:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <menu_key.2035>
    1878:	8f 3f       	cpi	r24, 0xFF	; 255
    187a:	39 f0       	breq	.+14     	; 0x188a <local_Menu_AC+0x2c>
    187c:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <v_adj_flag.2036>
    1880:	81 11       	cpse	r24, r1
    1882:	03 c0       	rjmp	.+6      	; 0x188a <local_Menu_AC+0x2c>
	{
		lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
	}
	AC_CFG = airConditioner_Status();
    188a:	0e 94 b1 06 	call	0xd62	; 0xd62 <airConditioner_Status>
    188e:	60 93 ae 04 	sts	0x04AE, r22	; 0x8004ae <AC_CFG.2037>
    1892:	70 93 af 04 	sts	0x04AF, r23	; 0x8004af <AC_CFG.2037+0x1>
    1896:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <AC_CFG.2037+0x2>
	local_Menu_AC_Display(&menu_position, &AC_CFG);
    189a:	6e ea       	ldi	r22, 0xAE	; 174
    189c:	74 e0       	ldi	r23, 0x04	; 4
    189e:	8d ea       	ldi	r24, 0xAD	; 173
    18a0:	94 e0       	ldi	r25, 0x04	; 4
    18a2:	0e 94 c6 0a 	call	0x158c	; 0x158c <local_Menu_AC_Display>
	local_Menu_Slector_Display(&menu_selector_position);
    18a6:	8c ea       	ldi	r24, 0xAC	; 172
    18a8:	94 e0       	ldi	r25, 0x04	; 4
    18aa:	0e 94 ce 09 	call	0x139c	; 0x139c <local_Menu_Slector_Display>
    switch (menu_key)
    18ae:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <menu_key.2035>
    18b2:	82 34       	cpi	r24, 0x42	; 66
    18b4:	69 f0       	breq	.+26     	; 0x18d0 <local_Menu_AC+0x72>
    18b6:	83 34       	cpi	r24, 0x43	; 67
    18b8:	19 f1       	breq	.+70     	; 0x1900 <local_Menu_AC+0xa2>
    18ba:	81 34       	cpi	r24, 0x41	; 65
    18bc:	09 f0       	breq	.+2      	; 0x18c0 <local_Menu_AC+0x62>
    18be:	70 c0       	rjmp	.+224    	; 0x19a0 <local_Menu_AC+0x142>
    {
    case KEY_A:
        local_Menu_Move_Selector(MOVE_UP,&menu_selector_position, &menu_position, max_menu_position);
    18c0:	22 e0       	ldi	r18, 0x02	; 2
    18c2:	4d ea       	ldi	r20, 0xAD	; 173
    18c4:	54 e0       	ldi	r21, 0x04	; 4
    18c6:	6c ea       	ldi	r22, 0xAC	; 172
    18c8:	74 e0       	ldi	r23, 0x04	; 4
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	07 c0       	rjmp	.+14     	; 0x18de <local_Menu_AC+0x80>
		lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
		local_Menu_AC_Display(&menu_position, &AC_CFG);
		local_Menu_Slector_Display(&menu_selector_position);
        break;
    case KEY_B:
        local_Menu_Move_Selector(MOVE_DOWN,&menu_selector_position, &menu_position, max_menu_position);
    18d0:	22 e0       	ldi	r18, 0x02	; 2
    18d2:	4d ea       	ldi	r20, 0xAD	; 173
    18d4:	54 e0       	ldi	r21, 0x04	; 4
    18d6:	6c ea       	ldi	r22, 0xAC	; 172
    18d8:	74 e0       	ldi	r23, 0x04	; 4
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 94 2a 0b 	call	0x1654	; 0x1654 <local_Menu_Move_Selector>
		lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
		local_Menu_AC_Display(&menu_position, &AC_CFG);
    18e8:	6e ea       	ldi	r22, 0xAE	; 174
    18ea:	74 e0       	ldi	r23, 0x04	; 4
    18ec:	8d ea       	ldi	r24, 0xAD	; 173
    18ee:	94 e0       	ldi	r25, 0x04	; 4
    18f0:	0e 94 c6 0a 	call	0x158c	; 0x158c <local_Menu_AC_Display>
		local_Menu_Slector_Display(&menu_selector_position);
    18f4:	8c ea       	ldi	r24, 0xAC	; 172
    18f6:	94 e0       	ldi	r25, 0x04	; 4
            break;
        }
    default:
        break;
    }
}
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
        break;
    case KEY_B:
        local_Menu_Move_Selector(MOVE_DOWN,&menu_selector_position, &menu_position, max_menu_position);
		lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
		local_Menu_AC_Display(&menu_position, &AC_CFG);
		local_Menu_Slector_Display(&menu_selector_position);
    18fc:	0c 94 ce 09 	jmp	0x139c	; 0x139c <local_Menu_Slector_Display>
        break;
    case KEY_C:
        switch (menu_position+menu_selector_position)
    1900:	20 91 ad 04 	lds	r18, 0x04AD	; 0x8004ad <menu_position.2032>
    1904:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <menu_selector_position.2033>
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	82 0f       	add	r24, r18
    190c:	91 1d       	adc	r25, r1
    190e:	81 30       	cpi	r24, 0x01	; 1
    1910:	91 05       	cpc	r25, r1
    1912:	a9 f0       	breq	.+42     	; 0x193e <local_Menu_AC+0xe0>
    1914:	3c f4       	brge	.+14     	; 0x1924 <local_Menu_AC+0xc6>
    1916:	89 2b       	or	r24, r25
    1918:	09 f0       	breq	.+2      	; 0x191c <local_Menu_AC+0xbe>
    191a:	42 c0       	rjmp	.+132    	; 0x19a0 <local_Menu_AC+0x142>
            break;
        }
    default:
        break;
    }
}
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    case KEY_C:
        switch (menu_position+menu_selector_position)
        {
        case AC_ON_OFF:
            // AC1 ON/OFF
            airConditioner_Toggle();
    1920:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <airConditioner_Toggle>
		lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
		local_Menu_AC_Display(&menu_position, &AC_CFG);
		local_Menu_Slector_Display(&menu_selector_position);
        break;
    case KEY_C:
        switch (menu_position+menu_selector_position)
    1924:	82 30       	cpi	r24, 0x02	; 2
    1926:	91 05       	cpc	r25, r1
    1928:	01 f1       	breq	.+64     	; 0x196a <local_Menu_AC+0x10c>
    192a:	03 97       	sbiw	r24, 0x03	; 3
    192c:	c9 f5       	brne	.+114    	; 0x19a0 <local_Menu_AC+0x142>
			airConditioner_Set_Config(&AC_CFG);
			
			break;
        case AC_RETURN:
            // Return
            *current_menu = LOCAL_MENU;
    192e:	83 e0       	ldi	r24, 0x03	; 3
    1930:	88 83       	st	Y, r24
			lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
			menu_position = 0;
    1938:	10 92 ad 04 	sts	0x04AD, r1	; 0x8004ad <menu_position.2032>
            break;
        }
    default:
        break;
    }
}
    193c:	31 c0       	rjmp	.+98     	; 0x19a0 <local_Menu_AC+0x142>
            // AC1 ON/OFF
            airConditioner_Toggle();
            break;
        case AC_RUN_TEMP:
            // AC1 Run Temp
			v_adj_flag=TRUE;
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <v_adj_flag.2036>
			local_Menu_AC_value_adj(&AC_CFG.AC_Run_Temperature_threshold,&v_adj_flag);
    1944:	62 eb       	ldi	r22, 0xB2	; 178
    1946:	74 e0       	ldi	r23, 0x04	; 4
    1948:	8f ea       	ldi	r24, 0xAF	; 175
    194a:	94 e0       	ldi	r25, 0x04	; 4
    194c:	0e 94 13 0c 	call	0x1826	; 0x1826 <local_Menu_AC_value_adj>
			AC_CFG.AC_Run_Temperature_threshold = AC_CFG.AC_Run_Temperature_threshold > 32 ? 32 : AC_CFG.AC_Run_Temperature_threshold;
			AC_CFG.AC_Run_Temperature_threshold = AC_CFG.AC_Run_Temperature_threshold < AC_CFG.AC_Stop_Temperature_threshold ? AC_CFG.AC_Stop_Temperature_threshold : AC_CFG.AC_Run_Temperature_threshold;
    1950:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <AC_CFG.2037+0x1>
    1954:	81 32       	cpi	r24, 0x21	; 33
    1956:	08 f0       	brcs	.+2      	; 0x195a <local_Menu_AC+0xfc>
    1958:	80 e2       	ldi	r24, 0x20	; 32
    195a:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <AC_CFG.2037+0x2>
    195e:	89 17       	cp	r24, r25
    1960:	08 f4       	brcc	.+2      	; 0x1964 <local_Menu_AC+0x106>
    1962:	89 2f       	mov	r24, r25
    1964:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <AC_CFG.2037+0x1>
    1968:	15 c0       	rjmp	.+42     	; 0x1994 <local_Menu_AC+0x136>
			airConditioner_Set_Config(&AC_CFG);
            break;
        case AC_STOP_TEMP:
            // AC1 Stop Temp
			v_adj_flag=TRUE;
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <v_adj_flag.2036>
			local_Menu_AC_value_adj(&AC_CFG.AC_Stop_Temperature_threshold,&v_adj_flag);
    1970:	62 eb       	ldi	r22, 0xB2	; 178
    1972:	74 e0       	ldi	r23, 0x04	; 4
    1974:	80 eb       	ldi	r24, 0xB0	; 176
    1976:	94 e0       	ldi	r25, 0x04	; 4
    1978:	0e 94 13 0c 	call	0x1826	; 0x1826 <local_Menu_AC_value_adj>
			AC_CFG.AC_Stop_Temperature_threshold = AC_CFG.AC_Stop_Temperature_threshold < 18 ? 18 : AC_CFG.AC_Stop_Temperature_threshold;
			AC_CFG.AC_Stop_Temperature_threshold = AC_CFG.AC_Stop_Temperature_threshold > AC_CFG.AC_Run_Temperature_threshold ? AC_CFG.AC_Run_Temperature_threshold : AC_CFG.AC_Stop_Temperature_threshold;
    197c:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <AC_CFG.2037+0x2>
    1980:	82 31       	cpi	r24, 0x12	; 18
    1982:	08 f4       	brcc	.+2      	; 0x1986 <local_Menu_AC+0x128>
    1984:	82 e1       	ldi	r24, 0x12	; 18
    1986:	90 91 af 04 	lds	r25, 0x04AF	; 0x8004af <AC_CFG.2037+0x1>
    198a:	98 17       	cp	r25, r24
    198c:	08 f4       	brcc	.+2      	; 0x1990 <local_Menu_AC+0x132>
    198e:	89 2f       	mov	r24, r25
    1990:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <AC_CFG.2037+0x2>
			airConditioner_Set_Config(&AC_CFG);
    1994:	8e ea       	ldi	r24, 0xAE	; 174
    1996:	94 e0       	ldi	r25, 0x04	; 4
            break;
        }
    default:
        break;
    }
}
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
            // AC1 Stop Temp
			v_adj_flag=TRUE;
			local_Menu_AC_value_adj(&AC_CFG.AC_Stop_Temperature_threshold,&v_adj_flag);
			AC_CFG.AC_Stop_Temperature_threshold = AC_CFG.AC_Stop_Temperature_threshold < 18 ? 18 : AC_CFG.AC_Stop_Temperature_threshold;
			AC_CFG.AC_Stop_Temperature_threshold = AC_CFG.AC_Stop_Temperature_threshold > AC_CFG.AC_Run_Temperature_threshold ? AC_CFG.AC_Run_Temperature_threshold : AC_CFG.AC_Stop_Temperature_threshold;
			airConditioner_Set_Config(&AC_CFG);
    199c:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <airConditioner_Set_Config>
            break;
        }
    default:
        break;
    }
}
    19a0:	df 91       	pop	r29
    19a2:	cf 91       	pop	r28
    19a4:	08 95       	ret

000019a6 <local_menu_Idle>:
 		scrollUsersOnLCD();
 	}
}

void local_menu_Idle()
{	if(!local_idle_Show_display)
    19a6:	cf 93       	push	r28
    19a8:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <local_idle_Show_display>
    19ac:	88 23       	and	r24, r24
    19ae:	51 f1       	breq	.+84     	; 0x1a04 <local_menu_Idle+0x5e>
	{return;}
	local_idle_Show_display=FALSE;
    19b0:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <local_idle_Show_display>
	lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_sendCommand>
	lcd_displayStr("Active Devices:");
    19ba:	83 ef       	ldi	r24, 0xF3	; 243
    19bc:	91 e0       	ldi	r25, 0x01	; 1
    19be:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_displayStr>
	lcd_goTo(1,7);
    19c2:	67 e0       	ldi	r22, 0x07	; 7
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_goTo>
	number_of_active_devices=0;
    19ca:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <number_of_active_devices>
	for (u8 i=1;i<6;i++)
    19ce:	c1 e0       	ldi	r28, 0x01	; 1
	{
		number_of_active_devices += lamp_Getstate(i);
    19d0:	8c 2f       	mov	r24, r28
    19d2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lamp_Getstate>
    19d6:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <number_of_active_devices>
    19da:	89 0f       	add	r24, r25
    19dc:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <number_of_active_devices>
	local_idle_Show_display=FALSE;
	lcd_sendCommand(LCD_CMD_CLEAR_DISPLAY);
	lcd_displayStr("Active Devices:");
	lcd_goTo(1,7);
	number_of_active_devices=0;
	for (u8 i=1;i<6;i++)
    19e0:	cf 5f       	subi	r28, 0xFF	; 255
    19e2:	c6 30       	cpi	r28, 0x06	; 6
    19e4:	a9 f7       	brne	.-22     	; 0x19d0 <local_menu_Idle+0x2a>
	{
		number_of_active_devices += lamp_Getstate(i);
	}
	number_of_active_devices += Lamp_Service_Dim_state() + airConditioner_State();
    19e6:	0e 94 2f 07 	call	0xe5e	; 0xe5e <Lamp_Service_Dim_state>
    19ea:	c8 2f       	mov	r28, r24
    19ec:	0e 94 b8 06 	call	0xd70	; 0xd70 <airConditioner_State>
    19f0:	8c 0f       	add	r24, r28
    19f2:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <number_of_active_devices>
    19f6:	89 0f       	add	r24, r25
    19f8:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <number_of_active_devices>
	lcd_displayNums(number_of_active_devices);
    19fc:	90 e0       	ldi	r25, 0x00	; 0
}
    19fe:	cf 91       	pop	r28
	for (u8 i=1;i<6;i++)
	{
		number_of_active_devices += lamp_Getstate(i);
	}
	number_of_active_devices += Lamp_Service_Dim_state() + airConditioner_State();
	lcd_displayNums(number_of_active_devices);
    1a00:	0c 94 03 02 	jmp	0x406	; 0x406 <lcd_displayNums>
}
    1a04:	cf 91       	pop	r28
    1a06:	08 95       	ret

00001a08 <local_menu_Service>:

void local_menu_Service()
{
	static u8 current_menu = LOCAL_MENU;
	//check if login & not in idle mode
	if(loginAck_local() && local_idle == FALSE)
    1a08:	0e 94 96 09 	call	0x132c	; 0x132c <loginAck_local>
    1a0c:	90 91 b8 04 	lds	r25, 0x04B8	; 0x8004b8 <local_idle>
    1a10:	88 23       	and	r24, r24
    1a12:	c9 f0       	breq	.+50     	; 0x1a46 <local_menu_Service+0x3e>
    1a14:	91 11       	cpse	r25, r1
    1a16:	17 c0       	rjmp	.+46     	; 0x1a46 <local_menu_Service+0x3e>
	{
		switch(current_menu)
    1a18:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <current_menu.2093>
    1a1c:	81 30       	cpi	r24, 0x01	; 1
    1a1e:	39 f0       	breq	.+14     	; 0x1a2e <local_menu_Service+0x26>
    1a20:	50 f0       	brcs	.+20     	; 0x1a36 <local_menu_Service+0x2e>
    1a22:	83 30       	cpi	r24, 0x03	; 3
    1a24:	61 f4       	brne	.+24     	; 0x1a3e <local_menu_Service+0x36>
		{
			case LOCAL_MENU:
				local_Menu(&current_menu);
    1a26:	89 e6       	ldi	r24, 0x69	; 105
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <local_Menu>
				break;
			case AC_MENU:
				local_Menu_AC(&current_menu);
    1a2e:	89 e6       	ldi	r24, 0x69	; 105
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	0c 94 2f 0c 	jmp	0x185e	; 0x185e <local_Menu_AC>
				break;
			case LED_MENU:
				local_Menu_LED(&current_menu);
    1a36:	89 e6       	ldi	r24, 0x69	; 105
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <local_Menu_LED>
				break;
			default:
				lcd_displayStr("ERROR");
    1a3e:	83 e0       	ldi	r24, 0x03	; 3
    1a40:	92 e0       	ldi	r25, 0x02	; 2
    1a42:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <lcd_displayStr>
				break;
		}
	}
	else if(local_idle || loginAck_remote())
    1a46:	99 23       	and	r25, r25
    1a48:	21 f0       	breq	.+8      	; 0x1a52 <local_menu_Service+0x4a>
	{
		local_menu_Idle();
    1a4a:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <local_menu_Idle>
		logout_local();
    1a4e:	0c 94 99 09 	jmp	0x1332	; 0x1332 <logout_local>
			default:
				lcd_displayStr("ERROR");
				break;
		}
	}
	else if(local_idle || loginAck_remote())
    1a52:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <loginAck_remote>
    1a56:	81 11       	cpse	r24, r1
    1a58:	f8 cf       	rjmp	.-16     	; 0x1a4a <local_menu_Service+0x42>
		local_menu_Idle();
		logout_local();
	}
 	else
 	{
 		scrollUsersOnLCD();
    1a5a:	0c 94 49 09 	jmp	0x1292	; 0x1292 <scrollUsersOnLCD>

00001a5e <local_menu_Idle_Reset>:
	}
}

void local_menu_Idle_Reset()
{
	local_idle=FALSE;
    1a5e:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <local_idle>
	Idle_timerCounter=0;
    1a62:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <Idle_timerCounter+0x1>
    1a66:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <Idle_timerCounter>
    1a6a:	08 95       	ret

00001a6c <local_menu_init>:
}
void local_menu_init()
{
	gie_enableAllInterrupts();
    1a6c:	0e 94 33 05 	call	0xa66	; 0xa66 <gie_enableAllInterrupts>
	timer2_init(TIMER2_MODE_NORMAL);
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <timer2_init>
	timer2_setPreLoad(6);
    1a76:	86 e0       	ldi	r24, 0x06	; 6
    1a78:	0e 94 e5 05 	call	0xbca	; 0xbca <timer2_setPreLoad>
	timer2_setOvCallBack(&local_menu_Idle_timer);
    1a7c:	8c e9       	ldi	r24, 0x9C	; 156
    1a7e:	99 e0       	ldi	r25, 0x09	; 9
    1a80:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <timer2_setOvCallBack>
	timer2_enableOvInterrupt();
    1a84:	0e 94 e7 05 	call	0xbce	; 0xbce <timer2_enableOvInterrupt>
	timer2_start(TIMER2_F_CPU_DIV_1024);
    1a88:	87 e0       	ldi	r24, 0x07	; 7
    1a8a:	0e 94 df 05 	call	0xbbe	; 0xbbe <timer2_start>
	
	lcd_init();
    1a8e:	0e 94 82 01 	call	0x304	; 0x304 <lcd_init>
	
	MM74C922_Init(PORTB_ID,PIN4_ID,PIN7_ID);
    1a92:	47 e0       	ldi	r20, 0x07	; 7
    1a94:	50 e0       	ldi	r21, 0x00	; 0
    1a96:	64 e0       	ldi	r22, 0x04	; 4
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <MM74C922_Init>

00001aa2 <getPassword_remote>:
	uart_init(BAUD_RATE_9600);
}

// Function to get an 8-digit password from the user securely
void getPassword_remote(u8* password)
{
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	ec 01       	movw	r28, r24
	uart_sendString("Enter Password:");
    1aa8:	88 ed       	ldi	r24, 0xD8	; 216
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>

	// Simulate getting user input for the password
	uart_receiveString(password);
    1ab0:	ce 01       	movw	r24, r28
    1ab2:	0e 94 78 06 	call	0xcf0	; 0xcf0 <uart_receiveString>

	uart_sendString("\n");  // Move to the next line after password entry
    1ab6:	82 e4       	ldi	r24, 0x42	; 66
    1ab8:	93 e0       	ldi	r25, 0x03	; 3
}
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
	uart_sendString("Enter Password:");

	// Simulate getting user input for the password
	uart_receiveString(password);

	uart_sendString("\n");  // Move to the next line after password entry
    1abe:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <uart_sendString>

00001ac2 <writeUserToEEPROM>:
}

void writeUserToEEPROM(user_remote *user) {
    1ac2:	0f 93       	push	r16
    1ac4:	1f 93       	push	r17
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	8c 01       	movw	r16, r24
	u16 startAddress = EEPROM_USER_DATA_ADDR_REMOTE + (userCount * 26);
    1acc:	c0 91 ba 04 	lds	r28, 0x04BA	; 0x8004ba <userCount>
    1ad0:	8a e1       	ldi	r24, 0x1A	; 26
    1ad2:	c8 9f       	mul	r28, r24
    1ad4:	e0 01       	movw	r28, r0
    1ad6:	11 24       	eor	r1, r1
    1ad8:	cf 5f       	subi	r28, 0xFF	; 255
    1ada:	dd 4f       	sbci	r29, 0xFD	; 253
	EEPROM_write_block(user->uname, startAddress, 16);
    1adc:	40 e1       	ldi	r20, 0x10	; 16
    1ade:	be 01       	movw	r22, r28
    1ae0:	c8 01       	movw	r24, r16
    1ae2:	0e 94 13 04 	call	0x826	; 0x826 <EEPROM_write_block>
	startAddress+=16;
	EEPROM_write_block(user->password,startAddress, 9);
    1ae6:	be 01       	movw	r22, r28
    1ae8:	60 5f       	subi	r22, 0xF0	; 240
    1aea:	7f 4f       	sbci	r23, 0xFF	; 255
    1aec:	49 e0       	ldi	r20, 0x09	; 9
    1aee:	c8 01       	movw	r24, r16
    1af0:	40 96       	adiw	r24, 0x10	; 16
    1af2:	0e 94 13 04 	call	0x826	; 0x826 <EEPROM_write_block>
	startAddress+=9;
	EEPROM_write(startAddress,user->id);
    1af6:	f8 01       	movw	r30, r16
    1af8:	61 8d       	ldd	r22, Z+25	; 0x19
    1afa:	ce 01       	movw	r24, r28
    1afc:	49 96       	adiw	r24, 0x19	; 25
}
    1afe:	df 91       	pop	r29
    1b00:	cf 91       	pop	r28
    1b02:	1f 91       	pop	r17
    1b04:	0f 91       	pop	r16
	u16 startAddress = EEPROM_USER_DATA_ADDR_REMOTE + (userCount * 26);
	EEPROM_write_block(user->uname, startAddress, 16);
	startAddress+=16;
	EEPROM_write_block(user->password,startAddress, 9);
	startAddress+=9;
	EEPROM_write(startAddress,user->id);
    1b06:	0c 94 04 04 	jmp	0x808	; 0x808 <EEPROM_write>

00001b0a <readUserFromEEPROM>:
}

void readUserFromEEPROM(user_remote *user, u8 id) {
    1b0a:	0f 93       	push	r16
    1b0c:	1f 93       	push	r17
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	8c 01       	movw	r16, r24
	u16 startAddress = EEPROM_USER_DATA_ADDR_REMOTE + (id * 26);
    1b14:	8a e1       	ldi	r24, 0x1A	; 26
    1b16:	68 9f       	mul	r22, r24
    1b18:	e0 01       	movw	r28, r0
    1b1a:	11 24       	eor	r1, r1
    1b1c:	cf 5f       	subi	r28, 0xFF	; 255
    1b1e:	dd 4f       	sbci	r29, 0xFD	; 253
	EEPROM_read_block(user->uname, startAddress, 16);
    1b20:	40 e1       	ldi	r20, 0x10	; 16
    1b22:	be 01       	movw	r22, r28
    1b24:	c8 01       	movw	r24, r16
    1b26:	0e 94 30 04 	call	0x860	; 0x860 <EEPROM_read_block>
	startAddress+=16;
	EEPROM_read_block(user->password, startAddress, 9);
    1b2a:	be 01       	movw	r22, r28
    1b2c:	60 5f       	subi	r22, 0xF0	; 240
    1b2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b30:	49 e0       	ldi	r20, 0x09	; 9
    1b32:	c8 01       	movw	r24, r16
    1b34:	40 96       	adiw	r24, 0x10	; 16
    1b36:	0e 94 30 04 	call	0x860	; 0x860 <EEPROM_read_block>
	startAddress+=9;
	user->id = EEPROM_read(startAddress);
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	49 96       	adiw	r24, 0x19	; 25
    1b3e:	0e 94 0c 04 	call	0x818	; 0x818 <EEPROM_read>
    1b42:	f8 01       	movw	r30, r16
    1b44:	81 8f       	std	Z+25, r24	; 0x19
}
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	1f 91       	pop	r17
    1b4c:	0f 91       	pop	r16
    1b4e:	08 95       	ret

00001b50 <remoteDB_init>:
u8 userCount = 0;

void readUserFromEEPROM(user_remote *user,u8 id);

void remoteDB_init()
{
    1b50:	cf 93       	push	r28
    1b52:	df 93       	push	r29
	if (EEPROM_read(EEPROM_USER_COUNT_ADDR) == 0xFF)
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	0e 94 0c 04 	call	0x818	; 0x818 <EEPROM_read>
    1b5c:	8f 3f       	cpi	r24, 0xFF	; 255
    1b5e:	39 f4       	brne	.+14     	; 0x1b6e <remoteDB_init+0x1e>
	{
		EEPROM_write(EEPROM_USER_COUNT_ADDR, userCount);
    1b60:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <userCount>
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	0e 94 04 04 	call	0x808	; 0x808 <EEPROM_write>
    1b6c:	16 c0       	rjmp	.+44     	; 0x1b9a <remoteDB_init+0x4a>
	}
	else
	{
		userCount = EEPROM_read(EEPROM_USER_COUNT_ADDR);
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	0e 94 0c 04 	call	0x818	; 0x818 <EEPROM_read>
    1b76:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <userCount>
		for (u8 id = 0; id < userCount; id++) {
    1b7a:	c0 e0       	ldi	r28, 0x00	; 0
			readUserFromEEPROM(&remoteUsers[id],id);
    1b7c:	da e1       	ldi	r29, 0x1A	; 26
		EEPROM_write(EEPROM_USER_COUNT_ADDR, userCount);
	}
	else
	{
		userCount = EEPROM_read(EEPROM_USER_COUNT_ADDR);
		for (u8 id = 0; id < userCount; id++) {
    1b7e:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <userCount>
    1b82:	c8 17       	cp	r28, r24
    1b84:	50 f4       	brcc	.+20     	; 0x1b9a <remoteDB_init+0x4a>
			readUserFromEEPROM(&remoteUsers[id],id);
    1b86:	dc 9f       	mul	r29, r28
    1b88:	c0 01       	movw	r24, r0
    1b8a:	11 24       	eor	r1, r1
    1b8c:	6c 2f       	mov	r22, r28
    1b8e:	86 53       	subi	r24, 0x36	; 54
    1b90:	9a 4f       	sbci	r25, 0xFA	; 250
    1b92:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <readUserFromEEPROM>
		EEPROM_write(EEPROM_USER_COUNT_ADDR, userCount);
	}
	else
	{
		userCount = EEPROM_read(EEPROM_USER_COUNT_ADDR);
		for (u8 id = 0; id < userCount; id++) {
    1b96:	cf 5f       	subi	r28, 0xFF	; 255
    1b98:	f2 cf       	rjmp	.-28     	; 0x1b7e <remoteDB_init+0x2e>
			readUserFromEEPROM(&remoteUsers[id],id);
			
		}
		
	}
	uart_init(BAUD_RATE_9600);
    1b9a:	87 e6       	ldi	r24, 0x67	; 103
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
}
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
			readUserFromEEPROM(&remoteUsers[id],id);
			
		}
		
	}
	uart_init(BAUD_RATE_9600);
    1ba2:	0c 94 42 06 	jmp	0xc84	; 0xc84 <uart_init>

00001ba6 <addUserToEEPROM_remote>:
	user->id = EEPROM_read(startAddress);
}


u8 addUserToEEPROM_remote(const u8 *username, const u8* password)
{
    1ba6:	cf 92       	push	r12
    1ba8:	df 92       	push	r13
    1baa:	ef 92       	push	r14
    1bac:	ff 92       	push	r15
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	cf 93       	push	r28

	if (userCount < 10) {  // Assuming a maximum of 10 users
    1bb4:	c0 91 ba 04 	lds	r28, 0x04BA	; 0x8004ba <userCount>
    1bb8:	ca 30       	cpi	r28, 0x0A	; 10
    1bba:	18 f5       	brcc	.+70     	; 0x1c02 <addUserToEEPROM_remote+0x5c>
    1bbc:	7b 01       	movw	r14, r22
    1bbe:	bc 01       	movw	r22, r24
		strcpy(remoteUsers[userCount].uname, username);
    1bc0:	8a e1       	ldi	r24, 0x1A	; 26
    1bc2:	c8 9f       	mul	r28, r24
    1bc4:	60 01       	movw	r12, r0
    1bc6:	11 24       	eor	r1, r1
    1bc8:	86 01       	movw	r16, r12
    1bca:	06 53       	subi	r16, 0x36	; 54
    1bcc:	1a 4f       	sbci	r17, 0xFA	; 250
    1bce:	c8 01       	movw	r24, r16
    1bd0:	0e 94 81 12 	call	0x2502	; 0x2502 <strcpy>
		strcpy(remoteUsers[userCount].password, password);
    1bd4:	b7 01       	movw	r22, r14
    1bd6:	c6 01       	movw	r24, r12
    1bd8:	86 52       	subi	r24, 0x26	; 38
    1bda:	9a 4f       	sbci	r25, 0xFA	; 250
    1bdc:	0e 94 81 12 	call	0x2502	; 0x2502 <strcpy>
		remoteUsers[userCount].id = userCount + 1;
    1be0:	cf 5f       	subi	r28, 0xFF	; 255
    1be2:	f8 01       	movw	r30, r16
    1be4:	c1 8f       	std	Z+25, r28	; 0x19

		writeUserToEEPROM(&remoteUsers[userCount]);
    1be6:	c8 01       	movw	r24, r16
    1be8:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <writeUserToEEPROM>

		userCount++;
    1bec:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <userCount>
    1bf0:	6f 5f       	subi	r22, 0xFF	; 255
    1bf2:	60 93 ba 04 	sts	0x04BA, r22	; 0x8004ba <userCount>
		EEPROM_write(EEPROM_USER_COUNT_ADDR, userCount);
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	0e 94 04 04 	call	0x808	; 0x808 <EEPROM_write>
		return REGISTRATION_SUCCESS;
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	01 c0       	rjmp	.+2      	; 0x1c04 <addUserToEEPROM_remote+0x5e>
		} else {
		// Handle error: User array is full
		return ERROR_USER_ARRAY_FULL;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    1c04:	cf 91       	pop	r28
    1c06:	1f 91       	pop	r17
    1c08:	0f 91       	pop	r16
    1c0a:	ff 90       	pop	r15
    1c0c:	ef 90       	pop	r14
    1c0e:	df 90       	pop	r13
    1c10:	cf 90       	pop	r12
    1c12:	08 95       	ret

00001c14 <displayAllUsersOnRemote>:
			//EEPROM_write_block(&userCount, (void*)EEPROM_USER_COUNT_ADDR_REMOTE, sizeof(userCount));
		//}
	//}
//}

void displayAllUsersOnRemote() {
    1c14:	bf 92       	push	r11
    1c16:	cf 92       	push	r12
    1c18:	df 92       	push	r13
    1c1a:	ef 92       	push	r14
    1c1c:	ff 92       	push	r15
    1c1e:	0f 93       	push	r16
    1c20:	1f 93       	push	r17
    1c22:	cf 93       	push	r28
    1c24:	df 93       	push	r29
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	e2 97       	sbiw	r28, 0x32	; 50
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	f8 94       	cli
    1c30:	de bf       	out	0x3e, r29	; 62
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	cd bf       	out	0x3d, r28	; 61
	uart_sendString("Displaying all users:\n");
    1c36:	89 e0       	ldi	r24, 0x09	; 9
    1c38:	92 e0       	ldi	r25, 0x02	; 2
    1c3a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>

	for (u8 i = 0; i < userCount; i++) {
    1c3e:	10 e0       	ldi	r17, 0x00	; 0
		char displayText[50];
		snprintf(displayText, sizeof(displayText), "Remote: User: %s, ID: %d\n", remoteUsers[i].uname, remoteUsers[i].id);
    1c40:	0a e1       	ldi	r16, 0x1A	; 26
    1c42:	80 e2       	ldi	r24, 0x20	; 32
    1c44:	e8 2e       	mov	r14, r24
    1c46:	82 e0       	ldi	r24, 0x02	; 2
    1c48:	f8 2e       	mov	r15, r24
    1c4a:	92 e3       	ldi	r25, 0x32	; 50
    1c4c:	b9 2e       	mov	r11, r25
    1c4e:	ce 01       	movw	r24, r28
    1c50:	01 96       	adiw	r24, 0x01	; 1
    1c52:	6c 01       	movw	r12, r24
//}

void displayAllUsersOnRemote() {
	uart_sendString("Displaying all users:\n");

	for (u8 i = 0; i < userCount; i++) {
    1c54:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <userCount>
    1c58:	18 17       	cp	r17, r24
    1c5a:	e0 f4       	brcc	.+56     	; 0x1c94 <displayAllUsersOnRemote+0x80>
		char displayText[50];
		snprintf(displayText, sizeof(displayText), "Remote: User: %s, ID: %d\n", remoteUsers[i].uname, remoteUsers[i].id);
    1c5c:	01 9f       	mul	r16, r17
    1c5e:	f0 01       	movw	r30, r0
    1c60:	11 24       	eor	r1, r1
    1c62:	e6 53       	subi	r30, 0x36	; 54
    1c64:	fa 4f       	sbci	r31, 0xFA	; 250
    1c66:	81 8d       	ldd	r24, Z+25	; 0x19
    1c68:	1f 92       	push	r1
    1c6a:	8f 93       	push	r24
    1c6c:	ff 93       	push	r31
    1c6e:	ef 93       	push	r30
    1c70:	ff 92       	push	r15
    1c72:	ef 92       	push	r14
    1c74:	1f 92       	push	r1
    1c76:	bf 92       	push	r11
    1c78:	df 92       	push	r13
    1c7a:	cf 92       	push	r12
    1c7c:	0e 94 88 12 	call	0x2510	; 0x2510 <snprintf>
		uart_sendString(displayText);
    1c80:	c6 01       	movw	r24, r12
    1c82:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
//}

void displayAllUsersOnRemote() {
	uart_sendString("Displaying all users:\n");

	for (u8 i = 0; i < userCount; i++) {
    1c86:	1f 5f       	subi	r17, 0xFF	; 255
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	e0 cf       	rjmp	.-64     	; 0x1c54 <displayAllUsersOnRemote+0x40>
		char displayText[50];
		snprintf(displayText, sizeof(displayText), "Remote: User: %s, ID: %d\n", remoteUsers[i].uname, remoteUsers[i].id);
		uart_sendString(displayText);
	}
}
    1c94:	e2 96       	adiw	r28, 0x32	; 50
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	de bf       	out	0x3e, r29	; 62
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	cd bf       	out	0x3d, r28	; 61
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	1f 91       	pop	r17
    1ca6:	0f 91       	pop	r16
    1ca8:	ff 90       	pop	r15
    1caa:	ef 90       	pop	r14
    1cac:	df 90       	pop	r13
    1cae:	cf 90       	pop	r12
    1cb0:	bf 90       	pop	r11
    1cb2:	08 95       	ret

00001cb4 <selectUserAndLogin_remote>:


u8 selectUserAndLogin_remote()
{
    1cb4:	0f 93       	push	r16
    1cb6:	1f 93       	push	r17
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	29 97       	sbiw	r28, 0x09	; 9
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	f8 94       	cli
    1cc6:	de bf       	out	0x3e, r29	; 62
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	cd bf       	out	0x3d, r28	; 61
    u8 selectedID;
	static u8 Display_Flag = TRUE;
	if (Display_Flag)
    1ccc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Display_Flag.2180>
    1cd0:	88 23       	and	r24, r24
    1cd2:	31 f0       	breq	.+12     	; 0x1ce0 <selectUserAndLogin_remote+0x2c>
	{
		uart_sendString("Enter User ID:");
    1cd4:	82 e1       	ldi	r24, 0x12	; 18
    1cd6:	91 e0       	ldi	r25, 0x01	; 1
    1cd8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		Display_Flag = FALSE;
    1cdc:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <Display_Flag.2180>
	}
    selectedID = uart_receiveByte();
    1ce0:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <uart_receiveByte>
    1ce4:	18 2f       	mov	r17, r24

    

    if (selectedID != 255) // Check if the received byte is not 255
    1ce6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ce8:	89 f1       	breq	.+98     	; 0x1d4c <selectUserAndLogin_remote+0x98>
    {
		uart_sendString("\n");
    1cea:	82 e4       	ldi	r24, 0x42	; 66
    1cec:	93 e0       	ldi	r25, 0x03	; 3
    1cee:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		selectedID -= '0';
    1cf2:	00 ed       	ldi	r16, 0xD0	; 208
    1cf4:	01 0f       	add	r16, r17
        if (selectedID >= 1 && selectedID <= 10)
    1cf6:	11 53       	subi	r17, 0x31	; 49
    1cf8:	1a 30       	cpi	r17, 0x0A	; 10
    1cfa:	00 f5       	brcc	.+64     	; 0x1d3c <selectUserAndLogin_remote+0x88>
        { // Assuming a maximum of 10 users

            char enteredPassword[9];
            getPassword_remote(enteredPassword);
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	01 96       	adiw	r24, 0x01	; 1
    1d00:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <getPassword_remote>

            if (strcmp(enteredPassword, remoteUsers[selectedID - 1].password) == 0)
    1d04:	80 2f       	mov	r24, r16
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	2a e1       	ldi	r18, 0x1A	; 26
    1d0c:	28 9f       	mul	r18, r24
    1d0e:	b0 01       	movw	r22, r0
    1d10:	29 9f       	mul	r18, r25
    1d12:	70 0d       	add	r23, r0
    1d14:	11 24       	eor	r1, r1
    1d16:	66 52       	subi	r22, 0x26	; 38
    1d18:	7a 4f       	sbci	r23, 0xFA	; 250
    1d1a:	ce 01       	movw	r24, r28
    1d1c:	01 96       	adiw	r24, 0x01	; 1
    1d1e:	0e 94 78 12 	call	0x24f0	; 0x24f0 <strcmp>
    1d22:	89 2b       	or	r24, r25
    1d24:	41 f4       	brne	.+16     	; 0x1d36 <selectUserAndLogin_remote+0x82>
            {
                uart_sendString("Login Successful\n");
    1d26:	8a e3       	ldi	r24, 0x3A	; 58
    1d28:	92 e0       	ldi	r25, 0x02	; 2
    1d2a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>

                login_flag_remote = TRUE;
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <login_flag_remote>
    1d34:	07 c0       	rjmp	.+14     	; 0x1d44 <selectUserAndLogin_remote+0x90>
            }
            else
            {
                uart_sendString("Error: Incorrect Password\n");
    1d36:	8c e4       	ldi	r24, 0x4C	; 76
    1d38:	92 e0       	ldi	r25, 0x02	; 2
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <selectUserAndLogin_remote+0x8c>
            }
        }
        else
        {
            uart_sendString("Error: Invalid User ID\n");
    1d3c:	87 e6       	ldi	r24, 0x67	; 103
    1d3e:	92 e0       	ldi	r25, 0x02	; 2
    1d40:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
        }
		Display_Flag = TRUE;
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Display_Flag.2180>
    

    if (selectedID != 255) // Check if the received byte is not 255
    {
		uart_sendString("\n");
		selectedID -= '0';
    1d4a:	10 2f       	mov	r17, r16
            uart_sendString("Error: Invalid User ID\n");
        }
		Display_Flag = TRUE;
    }
    return selectedID;
}
    1d4c:	81 2f       	mov	r24, r17
    1d4e:	29 96       	adiw	r28, 0x09	; 9
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	f8 94       	cli
    1d54:	de bf       	out	0x3e, r29	; 62
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	cd bf       	out	0x3d, r28	; 61
    1d5a:	df 91       	pop	r29
    1d5c:	cf 91       	pop	r28
    1d5e:	1f 91       	pop	r17
    1d60:	0f 91       	pop	r16
    1d62:	08 95       	ret

00001d64 <loginAck_remote>:


boolean loginAck_remote()
{
	return login_flag_remote;
}
    1d64:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <login_flag_remote>
    1d68:	08 95       	ret

00001d6a <logout_remote>:

void logout_remote()
{
	login_flag_remote = FALSE;
    1d6a:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <login_flag_remote>
    1d6e:	08 95       	ret

00001d70 <remote_admin_register>:
void lamp_menu(void);
void AC_menu(void);
void remote_menu_Service(void);

void remote_admin_register()
{
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	69 97       	sbiw	r28, 0x19	; 25
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
	if (EEPROM_read(EEPROM_USER_COUNT_ADDR)>0)
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	0e 94 0c 04 	call	0x818	; 0x818 <EEPROM_read>
    1d8c:	81 11       	cpse	r24, r1
    1d8e:	29 c0       	rjmp	.+82     	; 0x1de2 <remote_admin_register+0x72>
	{return;}
	else
	{
		uart_sendString("Register as an admin\n");
    1d90:	8f e7       	ldi	r24, 0x7F	; 127
    1d92:	92 e0       	ldi	r25, 0x02	; 2
    1d94:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		uart_sendString("Enter username: ");
    1d98:	85 e9       	ldi	r24, 0x95	; 149
    1d9a:	92 e0       	ldi	r25, 0x02	; 2
    1d9c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		u8 username[16];
		uart_receiveString(&username);
    1da0:	ce 01       	movw	r24, r28
    1da2:	01 96       	adiw	r24, 0x01	; 1
    1da4:	0e 94 78 06 	call	0xcf0	; 0xcf0 <uart_receiveString>
		uart_sendString("\n");
    1da8:	82 e4       	ldi	r24, 0x42	; 66
    1daa:	93 e0       	ldi	r25, 0x03	; 3
    1dac:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		u8 password[9];
		getPassword_remote(&password);  // Get password from user
    1db0:	ce 01       	movw	r24, r28
    1db2:	41 96       	adiw	r24, 0x11	; 17
    1db4:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <getPassword_remote>
		u8 registrationResult = addUserToEEPROM_remote(&username,&password);
    1db8:	be 01       	movw	r22, r28
    1dba:	6f 5e       	subi	r22, 0xEF	; 239
    1dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	01 96       	adiw	r24, 0x01	; 1
    1dc2:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <addUserToEEPROM_remote>
		if (registrationResult == REGISTRATION_SUCCESS)
    1dc6:	81 11       	cpse	r24, r1
    1dc8:	03 c0       	rjmp	.+6      	; 0x1dd0 <remote_admin_register+0x60>
		{
			// Registration successful
			uart_sendString("Registration successful\n");
    1dca:	86 ea       	ldi	r24, 0xA6	; 166
    1dcc:	92 e0       	ldi	r25, 0x02	; 2
    1dce:	07 c0       	rjmp	.+14     	; 0x1dde <remote_admin_register+0x6e>
		}
		else if (registrationResult == ERROR_USER_ARRAY_FULL)
    1dd0:	81 30       	cpi	r24, 0x01	; 1
    1dd2:	19 f4       	brne	.+6      	; 0x1dda <remote_admin_register+0x6a>
		{
			// User array is full
			uart_sendString("Error: User array is full\n");
    1dd4:	8f eb       	ldi	r24, 0xBF	; 191
    1dd6:	92 e0       	ldi	r25, 0x02	; 2
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <remote_admin_register+0x6e>
		}
		else
		{
			// Other error occurred during EEPROM write
			uart_sendString("Error: EEPROM write failed\n");
    1dda:	8a ed       	ldi	r24, 0xDA	; 218
    1ddc:	92 e0       	ldi	r25, 0x02	; 2
    1dde:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		}
	}
}
    1de2:	69 96       	adiw	r28, 0x19	; 25
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	f8 94       	cli
    1de8:	de bf       	out	0x3e, r29	; 62
    1dea:	0f be       	out	0x3f, r0	; 63
    1dec:	cd bf       	out	0x3d, r28	; 61
    1dee:	df 91       	pop	r29
    1df0:	cf 91       	pop	r28
    1df2:	08 95       	ret

00001df4 <registerUserRemote>:

void registerUserRemote(void)
{
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	69 97       	sbiw	r28, 0x19	; 25
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	de bf       	out	0x3e, r29	; 62
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	cd bf       	out	0x3d, r28	; 61
	u8 registrationResult = ERROR_USER_ARRAY_FULL;
	uart_sendString("Register a new user\n");
    1e08:	86 ef       	ldi	r24, 0xF6	; 246
    1e0a:	92 e0       	ldi	r25, 0x02	; 2
    1e0c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
	uart_sendString("Enter username: ");
    1e10:	85 e9       	ldi	r24, 0x95	; 149
    1e12:	92 e0       	ldi	r25, 0x02	; 2
    1e14:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
	u8 username[16];
	uart_receiveString(&username);
    1e18:	ce 01       	movw	r24, r28
    1e1a:	01 96       	adiw	r24, 0x01	; 1
    1e1c:	0e 94 78 06 	call	0xcf0	; 0xcf0 <uart_receiveString>
	u8 password[9];
	getPassword_remote(&password);  // Get password from user
    1e20:	ce 01       	movw	r24, r28
    1e22:	41 96       	adiw	r24, 0x11	; 17
    1e24:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <getPassword_remote>
	registrationResult = addUserToEEPROM_remote(&username,&password);
    1e28:	be 01       	movw	r22, r28
    1e2a:	6f 5e       	subi	r22, 0xEF	; 239
    1e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2e:	ce 01       	movw	r24, r28
    1e30:	01 96       	adiw	r24, 0x01	; 1
    1e32:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <addUserToEEPROM_remote>
	if (registrationResult == REGISTRATION_SUCCESS)
    1e36:	81 11       	cpse	r24, r1
    1e38:	03 c0       	rjmp	.+6      	; 0x1e40 <registerUserRemote+0x4c>
	{
		// Registration successful
		uart_sendString("Registration successful\n");
    1e3a:	86 ea       	ldi	r24, 0xA6	; 166
    1e3c:	92 e0       	ldi	r25, 0x02	; 2
    1e3e:	07 c0       	rjmp	.+14     	; 0x1e4e <registerUserRemote+0x5a>
	}
	else if (registrationResult == ERROR_USER_ARRAY_FULL)
    1e40:	81 30       	cpi	r24, 0x01	; 1
    1e42:	19 f4       	brne	.+6      	; 0x1e4a <registerUserRemote+0x56>
	{
		// User array is full
		uart_sendString("Error: User array is full\n");
    1e44:	8f eb       	ldi	r24, 0xBF	; 191
    1e46:	92 e0       	ldi	r25, 0x02	; 2
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <registerUserRemote+0x5a>
	}
	else
	{
		// Other error occurred during EEPROM write
		uart_sendString("Error: EEPROM write failed\n");
    1e4a:	8a ed       	ldi	r24, 0xDA	; 218
    1e4c:	92 e0       	ldi	r25, 0x02	; 2
    1e4e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
	}
	Get_Choice = TRUE;
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Get_Choice>
	Display_user_menu = TRUE;
    1e58:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <Display_user_menu>
	Display_admin_menu = TRUE;
    1e5c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Display_admin_menu>
}
    1e60:	69 96       	adiw	r28, 0x19	; 25
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	f8 94       	cli
    1e66:	de bf       	out	0x3e, r29	; 62
    1e68:	0f be       	out	0x3f, r0	; 63
    1e6a:	cd bf       	out	0x3d, r28	; 61
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	08 95       	ret

00001e72 <registerUserLocal>:

void registerUserLocal()
{
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	69 97       	sbiw	r28, 0x19	; 25
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	cd bf       	out	0x3d, r28	; 61
	uart_sendString("Register a new user\n");
    1e86:	86 ef       	ldi	r24, 0xF6	; 246
    1e88:	92 e0       	ldi	r25, 0x02	; 2
    1e8a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
	uart_sendString("Enter username: ");
    1e8e:	85 e9       	ldi	r24, 0x95	; 149
    1e90:	92 e0       	ldi	r25, 0x02	; 2
    1e92:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
	u8 username[16];
	uart_receiveString(&username);
    1e96:	ce 01       	movw	r24, r28
    1e98:	01 96       	adiw	r24, 0x01	; 1
    1e9a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <uart_receiveString>
	u8 password[9];
	getPassword_remote(&password);  // Get password from user
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	41 96       	adiw	r24, 0x11	; 17
    1ea2:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <getPassword_remote>
	u8 registrationResult = addUserToEEPROM_local(&username,&password);
    1ea6:	be 01       	movw	r22, r28
    1ea8:	6f 5e       	subi	r22, 0xEF	; 239
    1eaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1eac:	ce 01       	movw	r24, r28
    1eae:	01 96       	adiw	r24, 0x01	; 1
    1eb0:	0e 94 11 08 	call	0x1022	; 0x1022 <addUserToEEPROM_local>
	if (registrationResult == REGISTRATION_SUCCESS)
    1eb4:	81 11       	cpse	r24, r1
    1eb6:	03 c0       	rjmp	.+6      	; 0x1ebe <registerUserLocal+0x4c>
	{
		// Registration successful
		uart_sendString("Registration successful\n");
    1eb8:	86 ea       	ldi	r24, 0xA6	; 166
    1eba:	92 e0       	ldi	r25, 0x02	; 2
    1ebc:	07 c0       	rjmp	.+14     	; 0x1ecc <registerUserLocal+0x5a>
	}
	else if (registrationResult == ERROR_USER_ARRAY_FULL)
    1ebe:	81 30       	cpi	r24, 0x01	; 1
    1ec0:	19 f4       	brne	.+6      	; 0x1ec8 <registerUserLocal+0x56>
	{
		// User array is full
		uart_sendString("Error: User array is full\n");
    1ec2:	8f eb       	ldi	r24, 0xBF	; 191
    1ec4:	92 e0       	ldi	r25, 0x02	; 2
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <registerUserLocal+0x5a>
	}
	else
	{
		// Other error occurred during EEPROM write
		uart_sendString("Error: EEPROM write failed\n");
    1ec8:	8a ed       	ldi	r24, 0xDA	; 218
    1eca:	92 e0       	ldi	r25, 0x02	; 2
    1ecc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
	}
	Get_Choice = TRUE;
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Get_Choice>
	Display_user_menu = TRUE;
    1ed6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <Display_user_menu>
	Display_admin_menu = TRUE;
    1eda:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Display_admin_menu>
}
    1ede:	69 96       	adiw	r28, 0x19	; 25
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	f8 94       	cli
    1ee4:	de bf       	out	0x3e, r29	; 62
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	cd bf       	out	0x3d, r28	; 61
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	08 95       	ret

00001ef0 <lamp_menu>:
}

void lamp_menu(void)
{
	static u8 Display_lamp_menu = TRUE;
	if (Display_lamp_menu)
    1ef0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <Display_lamp_menu.1743>
    1ef4:	88 23       	and	r24, r24
    1ef6:	31 f1       	breq	.+76     	; 0x1f44 <lamp_menu+0x54>
	{
		uart_sendString("Lamp Menu\n");
    1ef8:	8b e0       	ldi	r24, 0x0B	; 11
    1efa:	93 e0       	ldi	r25, 0x03	; 3
    1efc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		uart_sendString("Choose lamp number you want to turn on/off: \n");
    1f00:	86 e1       	ldi	r24, 0x16	; 22
    1f02:	93 e0       	ldi	r25, 0x03	; 3
    1f04:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		uart_sendString("1. Lamp1\n");
    1f08:	84 e4       	ldi	r24, 0x44	; 68
    1f0a:	93 e0       	ldi	r25, 0x03	; 3
    1f0c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		uart_sendString("2. Lamp2\n");
    1f10:	8e e4       	ldi	r24, 0x4E	; 78
    1f12:	93 e0       	ldi	r25, 0x03	; 3
    1f14:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		uart_sendString("3. Lamp3\n");
    1f18:	88 e5       	ldi	r24, 0x58	; 88
    1f1a:	93 e0       	ldi	r25, 0x03	; 3
    1f1c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		uart_sendString("4. Lamp4\n");
    1f20:	82 e6       	ldi	r24, 0x62	; 98
    1f22:	93 e0       	ldi	r25, 0x03	; 3
    1f24:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		uart_sendString("5. Lamp5\n");
    1f28:	8c e6       	ldi	r24, 0x6C	; 108
    1f2a:	93 e0       	ldi	r25, 0x03	; 3
    1f2c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		uart_sendString("6. Dimmer\n");
    1f30:	86 e7       	ldi	r24, 0x76	; 118
    1f32:	93 e0       	ldi	r25, 0x03	; 3
    1f34:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		uart_sendString("7. Return\n");
    1f38:	81 e8       	ldi	r24, 0x81	; 129
    1f3a:	93 e0       	ldi	r25, 0x03	; 3
    1f3c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		Display_lamp_menu = FALSE;
    1f40:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <Display_lamp_menu.1743>
	}
	u8 lamp_choice = uart_receiveByte();
    1f44:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <uart_receiveByte>
	if (lamp_choice!=255)
    1f48:	8f 3f       	cpi	r24, 0xFF	; 255
    1f4a:	59 f1       	breq	.+86     	; 0x1fa2 <lamp_menu+0xb2>
	{
		lamp_choice -= '0'; 
		switch (lamp_choice)
    1f4c:	e0 ed       	ldi	r30, 0xD0	; 208
    1f4e:	e8 0f       	add	r30, r24
    1f50:	8e 2f       	mov	r24, r30
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	fc 01       	movw	r30, r24
    1f56:	31 97       	sbiw	r30, 0x01	; 1
    1f58:	e7 30       	cpi	r30, 0x07	; 7
    1f5a:	f1 05       	cpc	r31, r1
    1f5c:	d8 f4       	brcc	.+54     	; 0x1f94 <lamp_menu+0xa4>
    1f5e:	ef 5c       	subi	r30, 0xCF	; 207
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__tablejump2__>
		{
			case 1:
				// Lamp1 ON/OFF (Toggle LED1 Status)
				lamp_toggle(LAMP1_ID);
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	01 c0       	rjmp	.+2      	; 0x1f6c <lamp_menu+0x7c>
				break;
			case 2:
				// LED2 ON/OFF (Toggle LED2 Status)
				lamp_toggle(LAMP2_ID);
    1f6a:	82 e0       	ldi	r24, 0x02	; 2
    1f6c:	0e 94 c9 00 	call	0x192	; 0x192 <lamp_toggle>
				break;
    1f70:	15 c0       	rjmp	.+42     	; 0x1f9c <lamp_menu+0xac>
			case 3:
				// LED3 ON/OFF (Toggle LED3 Status)
				lamp_toggle(LAMP3_ID);
    1f72:	83 e0       	ldi	r24, 0x03	; 3
    1f74:	fb cf       	rjmp	.-10     	; 0x1f6c <lamp_menu+0x7c>
				break;
			case 4:
				// LED4 ON/OFF (Toggle LED4 Status)
				lamp_toggle(LAMP4_ID);
    1f76:	84 e0       	ldi	r24, 0x04	; 4
    1f78:	f9 cf       	rjmp	.-14     	; 0x1f6c <lamp_menu+0x7c>
				break;
			case 5:
				// LED5 ON/OFF (Toggle LED5 Status)
				lamp_toggle(LAMP5_ID);
    1f7a:	85 e0       	ldi	r24, 0x05	; 5
    1f7c:	f7 cf       	rjmp	.-18     	; 0x1f6c <lamp_menu+0x7c>
				break;
			case 6:
				// DimmerLED ON/OFF (Toggle DimmerLED Status)
				Lamp_Service_Dim_Toggle();
    1f7e:	0e 94 28 07 	call	0xe50	; 0xe50 <Lamp_Service_Dim_Toggle>
				break;
    1f82:	0c c0       	rjmp	.+24     	; 0x1f9c <lamp_menu+0xac>
			case 7:
				Get_Choice = TRUE;
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Get_Choice>
				Display_user_menu = TRUE;
    1f8a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <Display_user_menu>
				Display_admin_menu = TRUE;
    1f8e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Display_admin_menu>
				break;
    1f92:	04 c0       	rjmp	.+8      	; 0x1f9c <lamp_menu+0xac>
			default:
				uart_sendString("Invalid choice. Please try again.\n");
    1f94:	8c e8       	ldi	r24, 0x8C	; 140
    1f96:	93 e0       	ldi	r25, 0x03	; 3
    1f98:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
				break;
		}
		Display_lamp_menu = TRUE;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Display_lamp_menu.1743>
    1fa2:	08 95       	ret

00001fa4 <AC_menu>:
	}
}

void AC_menu(void)
{
    1fa4:	cf 93       	push	r28
	static u8 Display_AC_menu = TRUE;
	if (Display_AC_menu)
    1fa6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <Display_AC_menu.1757>
    1faa:	88 23       	and	r24, r24
    1fac:	19 f1       	breq	.+70     	; 0x1ff4 <AC_menu+0x50>
	{
		uart_sendString("AC Menu");
    1fae:	8f ea       	ldi	r24, 0xAF	; 175
    1fb0:	93 e0       	ldi	r25, 0x03	; 3
    1fb2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		AC ac_struct = airConditioner_Status();
    1fb6:	0e 94 b1 06 	call	0xd62	; 0xd62 <airConditioner_Status>
    1fba:	c6 2f       	mov	r28, r22
		uart_sendString(ac_struct.AC_Status ? "[ON]" : "[OFF]");
    1fbc:	61 11       	cpse	r22, r1
    1fbe:	03 c0       	rjmp	.+6      	; 0x1fc6 <AC_menu+0x22>
    1fc0:	8c e9       	ldi	r24, 0x9C	; 156
    1fc2:	91 e0       	ldi	r25, 0x01	; 1
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <AC_menu+0x26>
    1fc6:	85 ed       	ldi	r24, 0xD5	; 213
    1fc8:	91 e0       	ldi	r25, 0x01	; 1
    1fca:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		uart_sendString("Press (T) to turn ");
    1fce:	87 eb       	ldi	r24, 0xB7	; 183
    1fd0:	93 e0       	ldi	r25, 0x03	; 3
    1fd2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		uart_sendString(ac_struct.AC_Status ? "[OFF]" : "[ON]");
    1fd6:	c1 11       	cpse	r28, r1
    1fd8:	03 c0       	rjmp	.+6      	; 0x1fe0 <AC_menu+0x3c>
    1fda:	85 ed       	ldi	r24, 0xD5	; 213
    1fdc:	91 e0       	ldi	r25, 0x01	; 1
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <AC_menu+0x40>
    1fe0:	8c e9       	ldi	r24, 0x9C	; 156
    1fe2:	91 e0       	ldi	r25, 0x01	; 1
    1fe4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		uart_sendString("Press (E) to Exit\n");
    1fe8:	8a ec       	ldi	r24, 0xCA	; 202
    1fea:	93 e0       	ldi	r25, 0x03	; 3
    1fec:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		Display_AC_menu=FALSE;
    1ff0:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <Display_AC_menu.1757>
	}
	
	u8 AC_choice = uart_receiveByte();
    1ff4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <uart_receiveByte>
	if (AC_choice!=255)
    1ff8:	8f 3f       	cpi	r24, 0xFF	; 255
    1ffa:	a1 f0       	breq	.+40     	; 0x2024 <AC_menu+0x80>
	{
		switch(AC_choice)
    1ffc:	85 34       	cpi	r24, 0x45	; 69
    1ffe:	29 f0       	breq	.+10     	; 0x200a <AC_menu+0x66>
    2000:	84 35       	cpi	r24, 0x54	; 84
    2002:	59 f4       	brne	.+22     	; 0x201a <AC_menu+0x76>
			uart_sendString("Wrong Input");
			break;
		}
	}

}
    2004:	cf 91       	pop	r28
	if (AC_choice!=255)
	{
		switch(AC_choice)
		{
			case 'T':
			airConditioner_Toggle();
    2006:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <airConditioner_Toggle>
			break;
			case 'E':
			Get_Choice = TRUE;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Get_Choice>
			Display_user_menu = TRUE;
    2010:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <Display_user_menu>
			Display_admin_menu = TRUE;
    2014:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Display_admin_menu>
    2018:	05 c0       	rjmp	.+10     	; 0x2024 <AC_menu+0x80>
			break;
			default:
			uart_sendString("Wrong Input");
    201a:	8d ed       	ldi	r24, 0xDD	; 221
    201c:	93 e0       	ldi	r25, 0x03	; 3
			break;
		}
	}

}
    201e:	cf 91       	pop	r28
			Get_Choice = TRUE;
			Display_user_menu = TRUE;
			Display_admin_menu = TRUE;
			break;
			default:
			uart_sendString("Wrong Input");
    2020:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <uart_sendString>
			break;
		}
	}

}
    2024:	cf 91       	pop	r28
    2026:	08 95       	ret

00002028 <remote_Menu_User>:

void remote_Menu_User()
{
	static u8 userChoice;
	
	if (Display_user_menu)
    2028:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <Display_user_menu>
    202c:	88 23       	and	r24, r24
    202e:	91 f0       	breq	.+36     	; 0x2054 <remote_Menu_User+0x2c>
	{
		uart_sendString("User Menu:\n");
    2030:	89 ee       	ldi	r24, 0xE9	; 233
    2032:	93 e0       	ldi	r25, 0x03	; 3
    2034:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		uart_sendString("1. Lamps\n");
    2038:	85 ef       	ldi	r24, 0xF5	; 245
    203a:	93 e0       	ldi	r25, 0x03	; 3
    203c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		uart_sendString("2. AC\n");
    2040:	8f ef       	ldi	r24, 0xFF	; 255
    2042:	93 e0       	ldi	r25, 0x03	; 3
    2044:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		uart_sendString("3. Logout\n");
    2048:	86 e0       	ldi	r24, 0x06	; 6
    204a:	94 e0       	ldi	r25, 0x04	; 4
    204c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		Display_user_menu = FALSE;
    2050:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <Display_user_menu>
	}
	if (Get_Choice)
    2054:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <Get_Choice>
    2058:	88 23       	and	r24, r24
    205a:	21 f0       	breq	.+8      	; 0x2064 <remote_Menu_User+0x3c>
	{
		 userChoice = uart_receiveByte();
    205c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <uart_receiveByte>
    2060:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <userChoice.1722>
	}
	if (userChoice!=255)
    2064:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <userChoice.1722>
    2068:	8f 3f       	cpi	r24, 0xFF	; 255
    206a:	e1 f0       	breq	.+56     	; 0x20a4 <remote_Menu_User+0x7c>
	{
		Get_Choice = FALSE;
    206c:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <Get_Choice>
		switch (userChoice) {
    2070:	82 33       	cpi	r24, 0x32	; 50
    2072:	31 f0       	breq	.+12     	; 0x2080 <remote_Menu_User+0x58>
    2074:	83 33       	cpi	r24, 0x33	; 51
    2076:	31 f0       	breq	.+12     	; 0x2084 <remote_Menu_User+0x5c>
    2078:	81 33       	cpi	r24, 0x31	; 49
    207a:	69 f4       	brne	.+26     	; 0x2096 <remote_Menu_User+0x6e>
			case '1':
			lamp_menu();
    207c:	0c 94 78 0f 	jmp	0x1ef0	; 0x1ef0 <lamp_menu>
			break;
			case '2':
			AC_menu();
    2080:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <AC_menu>
			break;
			case '3':
			logout_remote();
    2084:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <logout_remote>
			Get_Choice = TRUE;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Get_Choice>
			users_Dispaly = TRUE;
    208e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <users_Dispaly>
			Display_user_menu = TRUE; 
    2092:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <Display_user_menu>
			default:
			uart_sendString("Invalid choice. Please try again.\n");
    2096:	8c e8       	ldi	r24, 0x8C	; 140
    2098:	93 e0       	ldi	r25, 0x03	; 3
    209a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
			Get_Choice = TRUE;
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Get_Choice>
    20a4:	08 95       	ret

000020a6 <remote_Menu_Admin>:
}

void remote_Menu_Admin(void)
{
	static u8 adminChoice;
	if (Display_admin_menu)
    20a6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Display_admin_menu>
    20aa:	88 23       	and	r24, r24
    20ac:	f1 f0       	breq	.+60     	; 0x20ea <remote_Menu_Admin+0x44>
	{
		uart_sendString("Admin Menu:\n");
    20ae:	81 e1       	ldi	r24, 0x11	; 17
    20b0:	94 e0       	ldi	r25, 0x04	; 4
    20b2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		uart_sendString("1. Register User (Remote)\n");
    20b6:	8e e1       	ldi	r24, 0x1E	; 30
    20b8:	94 e0       	ldi	r25, 0x04	; 4
    20ba:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		uart_sendString("2. Register User (Local)\n");
    20be:	89 e3       	ldi	r24, 0x39	; 57
    20c0:	94 e0       	ldi	r25, 0x04	; 4
    20c2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		uart_sendString("3. Lamps\n");
    20c6:	83 e5       	ldi	r24, 0x53	; 83
    20c8:	94 e0       	ldi	r25, 0x04	; 4
    20ca:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		uart_sendString("4. AC\n");
    20ce:	8d e5       	ldi	r24, 0x5D	; 93
    20d0:	94 e0       	ldi	r25, 0x04	; 4
    20d2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		uart_sendString("5. Control Door (Open/Close)\n");
    20d6:	84 e6       	ldi	r24, 0x64	; 100
    20d8:	94 e0       	ldi	r25, 0x04	; 4
    20da:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		uart_sendString("6. Logout\n");
    20de:	82 e8       	ldi	r24, 0x82	; 130
    20e0:	94 e0       	ldi	r25, 0x04	; 4
    20e2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
		Display_admin_menu = FALSE;
    20e6:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <Display_admin_menu>
	}
	if (Get_Choice)
    20ea:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <Get_Choice>
    20ee:	88 23       	and	r24, r24
    20f0:	21 f0       	breq	.+8      	; 0x20fa <remote_Menu_Admin+0x54>
	{
		adminChoice = uart_receiveByte();
    20f2:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <uart_receiveByte>
    20f6:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <adminChoice.1731>
	}
	
	if (adminChoice!=255)
    20fa:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <adminChoice.1731>
    20fe:	8f 3f       	cpi	r24, 0xFF	; 255
    2100:	49 f1       	breq	.+82     	; 0x2154 <remote_Menu_Admin+0xae>
	{
		Get_Choice = FALSE;
    2102:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <Get_Choice>
		switch (adminChoice) {
    2106:	83 33       	cpi	r24, 0x33	; 51
    2108:	c1 f0       	breq	.+48     	; 0x213a <remote_Menu_Admin+0x94>
    210a:	30 f4       	brcc	.+12     	; 0x2118 <remote_Menu_Admin+0x72>
    210c:	81 33       	cpi	r24, 0x31	; 49
    210e:	99 f0       	breq	.+38     	; 0x2136 <remote_Menu_Admin+0x90>
    2110:	82 33       	cpi	r24, 0x32	; 50
    2112:	c9 f4       	brne	.+50     	; 0x2146 <remote_Menu_Admin+0xa0>
			case '1':
			registerUserRemote();
			break;
			case '2':
			registerUserLocal();
    2114:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <registerUserLocal>
	}
	
	if (adminChoice!=255)
	{
		Get_Choice = FALSE;
		switch (adminChoice) {
    2118:	85 33       	cpi	r24, 0x35	; 53
    211a:	99 f0       	breq	.+38     	; 0x2142 <remote_Menu_Admin+0x9c>
    211c:	80 f0       	brcs	.+32     	; 0x213e <remote_Menu_Admin+0x98>
    211e:	86 33       	cpi	r24, 0x36	; 54
    2120:	91 f4       	brne	.+36     	; 0x2146 <remote_Menu_Admin+0xa0>
			break;
			case '5':
			doorService();
			break;
			case '6':
			logout_remote();
    2122:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <logout_remote>
			users_Dispaly = TRUE;
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <users_Dispaly>
			Get_Choice = TRUE;
    212c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Get_Choice>
			Display_admin_menu = TRUE;
    2130:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Display_admin_menu>
			break;
    2134:	08 95       	ret
	if (adminChoice!=255)
	{
		Get_Choice = FALSE;
		switch (adminChoice) {
			case '1':
			registerUserRemote();
    2136:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <registerUserRemote>
			break;
			case '2':
			registerUserLocal();
			break;
			case '3':
			lamp_menu();
    213a:	0c 94 78 0f 	jmp	0x1ef0	; 0x1ef0 <lamp_menu>
			break;
			case '4':
			AC_menu();
    213e:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <AC_menu>
			break;
			case '5':
			doorService();
    2142:	0c 94 ee 06 	jmp	0xddc	; 0xddc <doorService>
			users_Dispaly = TRUE;
			Get_Choice = TRUE;
			Display_admin_menu = TRUE;
			break;
			default:
			uart_sendString("Invalid choice. Please try again.\n");
    2146:	8c e8       	ldi	r24, 0x8C	; 140
    2148:	93 e0       	ldi	r25, 0x03	; 3
    214a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_sendString>
			Get_Choice = TRUE;
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Get_Choice>
    2154:	08 95       	ret

00002156 <remote_login_menu>:
}

void remote_login_menu()
{
	static u8 id = 0;
	if (users_Dispaly && loginAck_remote()!=TRUE)
    2156:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <users_Dispaly>
    215a:	88 23       	and	r24, r24
    215c:	41 f0       	breq	.+16     	; 0x216e <remote_login_menu+0x18>
    215e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <loginAck_remote>
    2162:	81 30       	cpi	r24, 0x01	; 1
    2164:	21 f0       	breq	.+8      	; 0x216e <remote_login_menu+0x18>
	{
		displayAllUsersOnRemote();
    2166:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <displayAllUsersOnRemote>
		users_Dispaly = FALSE;
    216a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <users_Dispaly>
	}
	switch(loginAck_remote())
    216e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <loginAck_remote>
    2172:	88 23       	and	r24, r24
    2174:	19 f0       	breq	.+6      	; 0x217c <remote_login_menu+0x26>
    2176:	81 30       	cpi	r24, 0x01	; 1
    2178:	31 f0       	breq	.+12     	; 0x2186 <remote_login_menu+0x30>
    217a:	08 95       	ret
	{
		case FALSE:
			id = selectUserAndLogin_remote();
    217c:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <selectUserAndLogin_remote>
    2180:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <id.1712>
			break;
    2184:	08 95       	ret
		case TRUE:
			switch(id)
    2186:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <id.1712>
    218a:	81 30       	cpi	r24, 0x01	; 1
    218c:	11 f4       	brne	.+4      	; 0x2192 <remote_login_menu+0x3c>
			{
				case 1:
					remote_Menu_Admin();
    218e:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <remote_Menu_Admin>
					break;
				default:
					remote_Menu_User();
    2192:	0c 94 14 10 	jmp	0x2028	; 0x2028 <remote_Menu_User>

00002196 <remote_menu_Service>:
}

void remote_menu_Service(void)
{
// 	uart_sendString("System is starting in remote mode\n");
	remote_login_menu();
    2196:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <remote_login_menu>

0000219a <remote_menu_init>:
}
void remote_menu_init()
{
	remote_admin_register();
    219a:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <remote_admin_register>

0000219e <System_Stop>:
boolean System_Stop_Status = FALSE;

boolean System_Stop()
{
	return System_Stop_Status;
}
    219e:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <System_Stop_Status>
    21a2:	08 95       	ret

000021a4 <Set_System_Stop>:

void Set_System_Stop()
{
	System_Stop_Status = TRUE;
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <System_Stop_Status>
    21aa:	08 95       	ret

000021ac <__divsf3>:
    21ac:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__divsf3x>
    21b0:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__fp_round>
    21b4:	0e 94 c4 11 	call	0x2388	; 0x2388 <__fp_pscB>
    21b8:	58 f0       	brcs	.+22     	; 0x21d0 <__divsf3+0x24>
    21ba:	0e 94 bd 11 	call	0x237a	; 0x237a <__fp_pscA>
    21be:	40 f0       	brcs	.+16     	; 0x21d0 <__divsf3+0x24>
    21c0:	29 f4       	brne	.+10     	; 0x21cc <__divsf3+0x20>
    21c2:	5f 3f       	cpi	r21, 0xFF	; 255
    21c4:	29 f0       	breq	.+10     	; 0x21d0 <__divsf3+0x24>
    21c6:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <__fp_inf>
    21ca:	51 11       	cpse	r21, r1
    21cc:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__fp_szero>
    21d0:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__fp_nan>

000021d4 <__divsf3x>:
    21d4:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__fp_split3>
    21d8:	68 f3       	brcs	.-38     	; 0x21b4 <__divsf3+0x8>

000021da <__divsf3_pse>:
    21da:	99 23       	and	r25, r25
    21dc:	b1 f3       	breq	.-20     	; 0x21ca <__divsf3+0x1e>
    21de:	55 23       	and	r21, r21
    21e0:	91 f3       	breq	.-28     	; 0x21c6 <__divsf3+0x1a>
    21e2:	95 1b       	sub	r25, r21
    21e4:	55 0b       	sbc	r21, r21
    21e6:	bb 27       	eor	r27, r27
    21e8:	aa 27       	eor	r26, r26
    21ea:	62 17       	cp	r22, r18
    21ec:	73 07       	cpc	r23, r19
    21ee:	84 07       	cpc	r24, r20
    21f0:	38 f0       	brcs	.+14     	; 0x2200 <__divsf3_pse+0x26>
    21f2:	9f 5f       	subi	r25, 0xFF	; 255
    21f4:	5f 4f       	sbci	r21, 0xFF	; 255
    21f6:	22 0f       	add	r18, r18
    21f8:	33 1f       	adc	r19, r19
    21fa:	44 1f       	adc	r20, r20
    21fc:	aa 1f       	adc	r26, r26
    21fe:	a9 f3       	breq	.-22     	; 0x21ea <__divsf3_pse+0x10>
    2200:	35 d0       	rcall	.+106    	; 0x226c <__divsf3_pse+0x92>
    2202:	0e 2e       	mov	r0, r30
    2204:	3a f0       	brmi	.+14     	; 0x2214 <__divsf3_pse+0x3a>
    2206:	e0 e8       	ldi	r30, 0x80	; 128
    2208:	32 d0       	rcall	.+100    	; 0x226e <__divsf3_pse+0x94>
    220a:	91 50       	subi	r25, 0x01	; 1
    220c:	50 40       	sbci	r21, 0x00	; 0
    220e:	e6 95       	lsr	r30
    2210:	00 1c       	adc	r0, r0
    2212:	ca f7       	brpl	.-14     	; 0x2206 <__divsf3_pse+0x2c>
    2214:	2b d0       	rcall	.+86     	; 0x226c <__divsf3_pse+0x92>
    2216:	fe 2f       	mov	r31, r30
    2218:	29 d0       	rcall	.+82     	; 0x226c <__divsf3_pse+0x92>
    221a:	66 0f       	add	r22, r22
    221c:	77 1f       	adc	r23, r23
    221e:	88 1f       	adc	r24, r24
    2220:	bb 1f       	adc	r27, r27
    2222:	26 17       	cp	r18, r22
    2224:	37 07       	cpc	r19, r23
    2226:	48 07       	cpc	r20, r24
    2228:	ab 07       	cpc	r26, r27
    222a:	b0 e8       	ldi	r27, 0x80	; 128
    222c:	09 f0       	breq	.+2      	; 0x2230 <__divsf3_pse+0x56>
    222e:	bb 0b       	sbc	r27, r27
    2230:	80 2d       	mov	r24, r0
    2232:	bf 01       	movw	r22, r30
    2234:	ff 27       	eor	r31, r31
    2236:	93 58       	subi	r25, 0x83	; 131
    2238:	5f 4f       	sbci	r21, 0xFF	; 255
    223a:	3a f0       	brmi	.+14     	; 0x224a <__divsf3_pse+0x70>
    223c:	9e 3f       	cpi	r25, 0xFE	; 254
    223e:	51 05       	cpc	r21, r1
    2240:	78 f0       	brcs	.+30     	; 0x2260 <__divsf3_pse+0x86>
    2242:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <__fp_inf>
    2246:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__fp_szero>
    224a:	5f 3f       	cpi	r21, 0xFF	; 255
    224c:	e4 f3       	brlt	.-8      	; 0x2246 <__divsf3_pse+0x6c>
    224e:	98 3e       	cpi	r25, 0xE8	; 232
    2250:	d4 f3       	brlt	.-12     	; 0x2246 <__divsf3_pse+0x6c>
    2252:	86 95       	lsr	r24
    2254:	77 95       	ror	r23
    2256:	67 95       	ror	r22
    2258:	b7 95       	ror	r27
    225a:	f7 95       	ror	r31
    225c:	9f 5f       	subi	r25, 0xFF	; 255
    225e:	c9 f7       	brne	.-14     	; 0x2252 <__divsf3_pse+0x78>
    2260:	88 0f       	add	r24, r24
    2262:	91 1d       	adc	r25, r1
    2264:	96 95       	lsr	r25
    2266:	87 95       	ror	r24
    2268:	97 f9       	bld	r25, 7
    226a:	08 95       	ret
    226c:	e1 e0       	ldi	r30, 0x01	; 1
    226e:	66 0f       	add	r22, r22
    2270:	77 1f       	adc	r23, r23
    2272:	88 1f       	adc	r24, r24
    2274:	bb 1f       	adc	r27, r27
    2276:	62 17       	cp	r22, r18
    2278:	73 07       	cpc	r23, r19
    227a:	84 07       	cpc	r24, r20
    227c:	ba 07       	cpc	r27, r26
    227e:	20 f0       	brcs	.+8      	; 0x2288 <__divsf3_pse+0xae>
    2280:	62 1b       	sub	r22, r18
    2282:	73 0b       	sbc	r23, r19
    2284:	84 0b       	sbc	r24, r20
    2286:	ba 0b       	sbc	r27, r26
    2288:	ee 1f       	adc	r30, r30
    228a:	88 f7       	brcc	.-30     	; 0x226e <__divsf3_pse+0x94>
    228c:	e0 95       	com	r30
    228e:	08 95       	ret

00002290 <__fixunssfsi>:
    2290:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__fp_splitA>
    2294:	88 f0       	brcs	.+34     	; 0x22b8 <__fixunssfsi+0x28>
    2296:	9f 57       	subi	r25, 0x7F	; 127
    2298:	98 f0       	brcs	.+38     	; 0x22c0 <__fixunssfsi+0x30>
    229a:	b9 2f       	mov	r27, r25
    229c:	99 27       	eor	r25, r25
    229e:	b7 51       	subi	r27, 0x17	; 23
    22a0:	b0 f0       	brcs	.+44     	; 0x22ce <__fixunssfsi+0x3e>
    22a2:	e1 f0       	breq	.+56     	; 0x22dc <__fixunssfsi+0x4c>
    22a4:	66 0f       	add	r22, r22
    22a6:	77 1f       	adc	r23, r23
    22a8:	88 1f       	adc	r24, r24
    22aa:	99 1f       	adc	r25, r25
    22ac:	1a f0       	brmi	.+6      	; 0x22b4 <__fixunssfsi+0x24>
    22ae:	ba 95       	dec	r27
    22b0:	c9 f7       	brne	.-14     	; 0x22a4 <__fixunssfsi+0x14>
    22b2:	14 c0       	rjmp	.+40     	; 0x22dc <__fixunssfsi+0x4c>
    22b4:	b1 30       	cpi	r27, 0x01	; 1
    22b6:	91 f0       	breq	.+36     	; 0x22dc <__fixunssfsi+0x4c>
    22b8:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__fp_zero>
    22bc:	b1 e0       	ldi	r27, 0x01	; 1
    22be:	08 95       	ret
    22c0:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__fp_zero>
    22c4:	67 2f       	mov	r22, r23
    22c6:	78 2f       	mov	r23, r24
    22c8:	88 27       	eor	r24, r24
    22ca:	b8 5f       	subi	r27, 0xF8	; 248
    22cc:	39 f0       	breq	.+14     	; 0x22dc <__fixunssfsi+0x4c>
    22ce:	b9 3f       	cpi	r27, 0xF9	; 249
    22d0:	cc f3       	brlt	.-14     	; 0x22c4 <__fixunssfsi+0x34>
    22d2:	86 95       	lsr	r24
    22d4:	77 95       	ror	r23
    22d6:	67 95       	ror	r22
    22d8:	b3 95       	inc	r27
    22da:	d9 f7       	brne	.-10     	; 0x22d2 <__fixunssfsi+0x42>
    22dc:	3e f4       	brtc	.+14     	; 0x22ec <__fixunssfsi+0x5c>
    22de:	90 95       	com	r25
    22e0:	80 95       	com	r24
    22e2:	70 95       	com	r23
    22e4:	61 95       	neg	r22
    22e6:	7f 4f       	sbci	r23, 0xFF	; 255
    22e8:	8f 4f       	sbci	r24, 0xFF	; 255
    22ea:	9f 4f       	sbci	r25, 0xFF	; 255
    22ec:	08 95       	ret

000022ee <__floatunsisf>:
    22ee:	e8 94       	clt
    22f0:	09 c0       	rjmp	.+18     	; 0x2304 <__floatsisf+0x12>

000022f2 <__floatsisf>:
    22f2:	97 fb       	bst	r25, 7
    22f4:	3e f4       	brtc	.+14     	; 0x2304 <__floatsisf+0x12>
    22f6:	90 95       	com	r25
    22f8:	80 95       	com	r24
    22fa:	70 95       	com	r23
    22fc:	61 95       	neg	r22
    22fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2300:	8f 4f       	sbci	r24, 0xFF	; 255
    2302:	9f 4f       	sbci	r25, 0xFF	; 255
    2304:	99 23       	and	r25, r25
    2306:	a9 f0       	breq	.+42     	; 0x2332 <__floatsisf+0x40>
    2308:	f9 2f       	mov	r31, r25
    230a:	96 e9       	ldi	r25, 0x96	; 150
    230c:	bb 27       	eor	r27, r27
    230e:	93 95       	inc	r25
    2310:	f6 95       	lsr	r31
    2312:	87 95       	ror	r24
    2314:	77 95       	ror	r23
    2316:	67 95       	ror	r22
    2318:	b7 95       	ror	r27
    231a:	f1 11       	cpse	r31, r1
    231c:	f8 cf       	rjmp	.-16     	; 0x230e <__floatsisf+0x1c>
    231e:	fa f4       	brpl	.+62     	; 0x235e <__floatsisf+0x6c>
    2320:	bb 0f       	add	r27, r27
    2322:	11 f4       	brne	.+4      	; 0x2328 <__floatsisf+0x36>
    2324:	60 ff       	sbrs	r22, 0
    2326:	1b c0       	rjmp	.+54     	; 0x235e <__floatsisf+0x6c>
    2328:	6f 5f       	subi	r22, 0xFF	; 255
    232a:	7f 4f       	sbci	r23, 0xFF	; 255
    232c:	8f 4f       	sbci	r24, 0xFF	; 255
    232e:	9f 4f       	sbci	r25, 0xFF	; 255
    2330:	16 c0       	rjmp	.+44     	; 0x235e <__floatsisf+0x6c>
    2332:	88 23       	and	r24, r24
    2334:	11 f0       	breq	.+4      	; 0x233a <__floatsisf+0x48>
    2336:	96 e9       	ldi	r25, 0x96	; 150
    2338:	11 c0       	rjmp	.+34     	; 0x235c <__floatsisf+0x6a>
    233a:	77 23       	and	r23, r23
    233c:	21 f0       	breq	.+8      	; 0x2346 <__floatsisf+0x54>
    233e:	9e e8       	ldi	r25, 0x8E	; 142
    2340:	87 2f       	mov	r24, r23
    2342:	76 2f       	mov	r23, r22
    2344:	05 c0       	rjmp	.+10     	; 0x2350 <__floatsisf+0x5e>
    2346:	66 23       	and	r22, r22
    2348:	71 f0       	breq	.+28     	; 0x2366 <__floatsisf+0x74>
    234a:	96 e8       	ldi	r25, 0x86	; 134
    234c:	86 2f       	mov	r24, r22
    234e:	70 e0       	ldi	r23, 0x00	; 0
    2350:	60 e0       	ldi	r22, 0x00	; 0
    2352:	2a f0       	brmi	.+10     	; 0x235e <__floatsisf+0x6c>
    2354:	9a 95       	dec	r25
    2356:	66 0f       	add	r22, r22
    2358:	77 1f       	adc	r23, r23
    235a:	88 1f       	adc	r24, r24
    235c:	da f7       	brpl	.-10     	; 0x2354 <__floatsisf+0x62>
    235e:	88 0f       	add	r24, r24
    2360:	96 95       	lsr	r25
    2362:	87 95       	ror	r24
    2364:	97 f9       	bld	r25, 7
    2366:	08 95       	ret

00002368 <__fp_inf>:
    2368:	97 f9       	bld	r25, 7
    236a:	9f 67       	ori	r25, 0x7F	; 127
    236c:	80 e8       	ldi	r24, 0x80	; 128
    236e:	70 e0       	ldi	r23, 0x00	; 0
    2370:	60 e0       	ldi	r22, 0x00	; 0
    2372:	08 95       	ret

00002374 <__fp_nan>:
    2374:	9f ef       	ldi	r25, 0xFF	; 255
    2376:	80 ec       	ldi	r24, 0xC0	; 192
    2378:	08 95       	ret

0000237a <__fp_pscA>:
    237a:	00 24       	eor	r0, r0
    237c:	0a 94       	dec	r0
    237e:	16 16       	cp	r1, r22
    2380:	17 06       	cpc	r1, r23
    2382:	18 06       	cpc	r1, r24
    2384:	09 06       	cpc	r0, r25
    2386:	08 95       	ret

00002388 <__fp_pscB>:
    2388:	00 24       	eor	r0, r0
    238a:	0a 94       	dec	r0
    238c:	12 16       	cp	r1, r18
    238e:	13 06       	cpc	r1, r19
    2390:	14 06       	cpc	r1, r20
    2392:	05 06       	cpc	r0, r21
    2394:	08 95       	ret

00002396 <__fp_round>:
    2396:	09 2e       	mov	r0, r25
    2398:	03 94       	inc	r0
    239a:	00 0c       	add	r0, r0
    239c:	11 f4       	brne	.+4      	; 0x23a2 <__fp_round+0xc>
    239e:	88 23       	and	r24, r24
    23a0:	52 f0       	brmi	.+20     	; 0x23b6 <__fp_round+0x20>
    23a2:	bb 0f       	add	r27, r27
    23a4:	40 f4       	brcc	.+16     	; 0x23b6 <__fp_round+0x20>
    23a6:	bf 2b       	or	r27, r31
    23a8:	11 f4       	brne	.+4      	; 0x23ae <__fp_round+0x18>
    23aa:	60 ff       	sbrs	r22, 0
    23ac:	04 c0       	rjmp	.+8      	; 0x23b6 <__fp_round+0x20>
    23ae:	6f 5f       	subi	r22, 0xFF	; 255
    23b0:	7f 4f       	sbci	r23, 0xFF	; 255
    23b2:	8f 4f       	sbci	r24, 0xFF	; 255
    23b4:	9f 4f       	sbci	r25, 0xFF	; 255
    23b6:	08 95       	ret

000023b8 <__fp_split3>:
    23b8:	57 fd       	sbrc	r21, 7
    23ba:	90 58       	subi	r25, 0x80	; 128
    23bc:	44 0f       	add	r20, r20
    23be:	55 1f       	adc	r21, r21
    23c0:	59 f0       	breq	.+22     	; 0x23d8 <__fp_splitA+0x10>
    23c2:	5f 3f       	cpi	r21, 0xFF	; 255
    23c4:	71 f0       	breq	.+28     	; 0x23e2 <__fp_splitA+0x1a>
    23c6:	47 95       	ror	r20

000023c8 <__fp_splitA>:
    23c8:	88 0f       	add	r24, r24
    23ca:	97 fb       	bst	r25, 7
    23cc:	99 1f       	adc	r25, r25
    23ce:	61 f0       	breq	.+24     	; 0x23e8 <__fp_splitA+0x20>
    23d0:	9f 3f       	cpi	r25, 0xFF	; 255
    23d2:	79 f0       	breq	.+30     	; 0x23f2 <__fp_splitA+0x2a>
    23d4:	87 95       	ror	r24
    23d6:	08 95       	ret
    23d8:	12 16       	cp	r1, r18
    23da:	13 06       	cpc	r1, r19
    23dc:	14 06       	cpc	r1, r20
    23de:	55 1f       	adc	r21, r21
    23e0:	f2 cf       	rjmp	.-28     	; 0x23c6 <__fp_split3+0xe>
    23e2:	46 95       	lsr	r20
    23e4:	f1 df       	rcall	.-30     	; 0x23c8 <__fp_splitA>
    23e6:	08 c0       	rjmp	.+16     	; 0x23f8 <__fp_splitA+0x30>
    23e8:	16 16       	cp	r1, r22
    23ea:	17 06       	cpc	r1, r23
    23ec:	18 06       	cpc	r1, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	f1 cf       	rjmp	.-30     	; 0x23d4 <__fp_splitA+0xc>
    23f2:	86 95       	lsr	r24
    23f4:	71 05       	cpc	r23, r1
    23f6:	61 05       	cpc	r22, r1
    23f8:	08 94       	sec
    23fa:	08 95       	ret

000023fc <__fp_zero>:
    23fc:	e8 94       	clt

000023fe <__fp_szero>:
    23fe:	bb 27       	eor	r27, r27
    2400:	66 27       	eor	r22, r22
    2402:	77 27       	eor	r23, r23
    2404:	cb 01       	movw	r24, r22
    2406:	97 f9       	bld	r25, 7
    2408:	08 95       	ret

0000240a <__mulsf3>:
    240a:	0e 94 18 12 	call	0x2430	; 0x2430 <__mulsf3x>
    240e:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__fp_round>
    2412:	0e 94 bd 11 	call	0x237a	; 0x237a <__fp_pscA>
    2416:	38 f0       	brcs	.+14     	; 0x2426 <__mulsf3+0x1c>
    2418:	0e 94 c4 11 	call	0x2388	; 0x2388 <__fp_pscB>
    241c:	20 f0       	brcs	.+8      	; 0x2426 <__mulsf3+0x1c>
    241e:	95 23       	and	r25, r21
    2420:	11 f0       	breq	.+4      	; 0x2426 <__mulsf3+0x1c>
    2422:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <__fp_inf>
    2426:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__fp_nan>
    242a:	11 24       	eor	r1, r1
    242c:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__fp_szero>

00002430 <__mulsf3x>:
    2430:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__fp_split3>
    2434:	70 f3       	brcs	.-36     	; 0x2412 <__mulsf3+0x8>

00002436 <__mulsf3_pse>:
    2436:	95 9f       	mul	r25, r21
    2438:	c1 f3       	breq	.-16     	; 0x242a <__mulsf3+0x20>
    243a:	95 0f       	add	r25, r21
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	55 1f       	adc	r21, r21
    2440:	62 9f       	mul	r22, r18
    2442:	f0 01       	movw	r30, r0
    2444:	72 9f       	mul	r23, r18
    2446:	bb 27       	eor	r27, r27
    2448:	f0 0d       	add	r31, r0
    244a:	b1 1d       	adc	r27, r1
    244c:	63 9f       	mul	r22, r19
    244e:	aa 27       	eor	r26, r26
    2450:	f0 0d       	add	r31, r0
    2452:	b1 1d       	adc	r27, r1
    2454:	aa 1f       	adc	r26, r26
    2456:	64 9f       	mul	r22, r20
    2458:	66 27       	eor	r22, r22
    245a:	b0 0d       	add	r27, r0
    245c:	a1 1d       	adc	r26, r1
    245e:	66 1f       	adc	r22, r22
    2460:	82 9f       	mul	r24, r18
    2462:	22 27       	eor	r18, r18
    2464:	b0 0d       	add	r27, r0
    2466:	a1 1d       	adc	r26, r1
    2468:	62 1f       	adc	r22, r18
    246a:	73 9f       	mul	r23, r19
    246c:	b0 0d       	add	r27, r0
    246e:	a1 1d       	adc	r26, r1
    2470:	62 1f       	adc	r22, r18
    2472:	83 9f       	mul	r24, r19
    2474:	a0 0d       	add	r26, r0
    2476:	61 1d       	adc	r22, r1
    2478:	22 1f       	adc	r18, r18
    247a:	74 9f       	mul	r23, r20
    247c:	33 27       	eor	r19, r19
    247e:	a0 0d       	add	r26, r0
    2480:	61 1d       	adc	r22, r1
    2482:	23 1f       	adc	r18, r19
    2484:	84 9f       	mul	r24, r20
    2486:	60 0d       	add	r22, r0
    2488:	21 1d       	adc	r18, r1
    248a:	82 2f       	mov	r24, r18
    248c:	76 2f       	mov	r23, r22
    248e:	6a 2f       	mov	r22, r26
    2490:	11 24       	eor	r1, r1
    2492:	9f 57       	subi	r25, 0x7F	; 127
    2494:	50 40       	sbci	r21, 0x00	; 0
    2496:	9a f0       	brmi	.+38     	; 0x24be <__mulsf3_pse+0x88>
    2498:	f1 f0       	breq	.+60     	; 0x24d6 <__mulsf3_pse+0xa0>
    249a:	88 23       	and	r24, r24
    249c:	4a f0       	brmi	.+18     	; 0x24b0 <__mulsf3_pse+0x7a>
    249e:	ee 0f       	add	r30, r30
    24a0:	ff 1f       	adc	r31, r31
    24a2:	bb 1f       	adc	r27, r27
    24a4:	66 1f       	adc	r22, r22
    24a6:	77 1f       	adc	r23, r23
    24a8:	88 1f       	adc	r24, r24
    24aa:	91 50       	subi	r25, 0x01	; 1
    24ac:	50 40       	sbci	r21, 0x00	; 0
    24ae:	a9 f7       	brne	.-22     	; 0x249a <__mulsf3_pse+0x64>
    24b0:	9e 3f       	cpi	r25, 0xFE	; 254
    24b2:	51 05       	cpc	r21, r1
    24b4:	80 f0       	brcs	.+32     	; 0x24d6 <__mulsf3_pse+0xa0>
    24b6:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <__fp_inf>
    24ba:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__fp_szero>
    24be:	5f 3f       	cpi	r21, 0xFF	; 255
    24c0:	e4 f3       	brlt	.-8      	; 0x24ba <__mulsf3_pse+0x84>
    24c2:	98 3e       	cpi	r25, 0xE8	; 232
    24c4:	d4 f3       	brlt	.-12     	; 0x24ba <__mulsf3_pse+0x84>
    24c6:	86 95       	lsr	r24
    24c8:	77 95       	ror	r23
    24ca:	67 95       	ror	r22
    24cc:	b7 95       	ror	r27
    24ce:	f7 95       	ror	r31
    24d0:	e7 95       	ror	r30
    24d2:	9f 5f       	subi	r25, 0xFF	; 255
    24d4:	c1 f7       	brne	.-16     	; 0x24c6 <__mulsf3_pse+0x90>
    24d6:	fe 2b       	or	r31, r30
    24d8:	88 0f       	add	r24, r24
    24da:	91 1d       	adc	r25, r1
    24dc:	96 95       	lsr	r25
    24de:	87 95       	ror	r24
    24e0:	97 f9       	bld	r25, 7
    24e2:	08 95       	ret

000024e4 <__tablejump2__>:
    24e4:	ee 0f       	add	r30, r30
    24e6:	ff 1f       	adc	r31, r31
    24e8:	05 90       	lpm	r0, Z+
    24ea:	f4 91       	lpm	r31, Z
    24ec:	e0 2d       	mov	r30, r0
    24ee:	09 94       	ijmp

000024f0 <strcmp>:
    24f0:	fb 01       	movw	r30, r22
    24f2:	dc 01       	movw	r26, r24
    24f4:	8d 91       	ld	r24, X+
    24f6:	01 90       	ld	r0, Z+
    24f8:	80 19       	sub	r24, r0
    24fa:	01 10       	cpse	r0, r1
    24fc:	d9 f3       	breq	.-10     	; 0x24f4 <strcmp+0x4>
    24fe:	99 0b       	sbc	r25, r25
    2500:	08 95       	ret

00002502 <strcpy>:
    2502:	fb 01       	movw	r30, r22
    2504:	dc 01       	movw	r26, r24
    2506:	01 90       	ld	r0, Z+
    2508:	0d 92       	st	X+, r0
    250a:	00 20       	and	r0, r0
    250c:	e1 f7       	brne	.-8      	; 0x2506 <strcpy+0x4>
    250e:	08 95       	ret

00002510 <snprintf>:
    2510:	ae e0       	ldi	r26, 0x0E	; 14
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	ee e8       	ldi	r30, 0x8E	; 142
    2516:	f2 e1       	ldi	r31, 0x12	; 18
    2518:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <__prologue_saves__+0x1c>
    251c:	0d 89       	ldd	r16, Y+21	; 0x15
    251e:	1e 89       	ldd	r17, Y+22	; 0x16
    2520:	8f 89       	ldd	r24, Y+23	; 0x17
    2522:	98 8d       	ldd	r25, Y+24	; 0x18
    2524:	26 e0       	ldi	r18, 0x06	; 6
    2526:	2c 83       	std	Y+4, r18	; 0x04
    2528:	1a 83       	std	Y+2, r17	; 0x02
    252a:	09 83       	std	Y+1, r16	; 0x01
    252c:	97 ff       	sbrs	r25, 7
    252e:	02 c0       	rjmp	.+4      	; 0x2534 <snprintf+0x24>
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	90 e8       	ldi	r25, 0x80	; 128
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	9e 83       	std	Y+6, r25	; 0x06
    2538:	8d 83       	std	Y+5, r24	; 0x05
    253a:	ae 01       	movw	r20, r28
    253c:	45 5e       	subi	r20, 0xE5	; 229
    253e:	5f 4f       	sbci	r21, 0xFF	; 255
    2540:	69 8d       	ldd	r22, Y+25	; 0x19
    2542:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2544:	ce 01       	movw	r24, r28
    2546:	01 96       	adiw	r24, 0x01	; 1
    2548:	0e 94 da 12 	call	0x25b4	; 0x25b4 <vfprintf>
    254c:	4d 81       	ldd	r20, Y+5	; 0x05
    254e:	5e 81       	ldd	r21, Y+6	; 0x06
    2550:	57 fd       	sbrc	r21, 7
    2552:	0a c0       	rjmp	.+20     	; 0x2568 <snprintf+0x58>
    2554:	2f 81       	ldd	r18, Y+7	; 0x07
    2556:	38 85       	ldd	r19, Y+8	; 0x08
    2558:	42 17       	cp	r20, r18
    255a:	53 07       	cpc	r21, r19
    255c:	0c f4       	brge	.+2      	; 0x2560 <snprintf+0x50>
    255e:	9a 01       	movw	r18, r20
    2560:	f8 01       	movw	r30, r16
    2562:	e2 0f       	add	r30, r18
    2564:	f3 1f       	adc	r31, r19
    2566:	10 82       	st	Z, r1
    2568:	2e 96       	adiw	r28, 0x0e	; 14
    256a:	e4 e0       	ldi	r30, 0x04	; 4
    256c:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__epilogue_restores__+0x1c>

00002570 <sprintf>:
    2570:	ae e0       	ldi	r26, 0x0E	; 14
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	ee eb       	ldi	r30, 0xBE	; 190
    2576:	f2 e1       	ldi	r31, 0x12	; 18
    2578:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <__prologue_saves__+0x1c>
    257c:	0d 89       	ldd	r16, Y+21	; 0x15
    257e:	1e 89       	ldd	r17, Y+22	; 0x16
    2580:	86 e0       	ldi	r24, 0x06	; 6
    2582:	8c 83       	std	Y+4, r24	; 0x04
    2584:	1a 83       	std	Y+2, r17	; 0x02
    2586:	09 83       	std	Y+1, r16	; 0x01
    2588:	8f ef       	ldi	r24, 0xFF	; 255
    258a:	9f e7       	ldi	r25, 0x7F	; 127
    258c:	9e 83       	std	Y+6, r25	; 0x06
    258e:	8d 83       	std	Y+5, r24	; 0x05
    2590:	ae 01       	movw	r20, r28
    2592:	47 5e       	subi	r20, 0xE7	; 231
    2594:	5f 4f       	sbci	r21, 0xFF	; 255
    2596:	6f 89       	ldd	r22, Y+23	; 0x17
    2598:	78 8d       	ldd	r23, Y+24	; 0x18
    259a:	ce 01       	movw	r24, r28
    259c:	01 96       	adiw	r24, 0x01	; 1
    259e:	0e 94 da 12 	call	0x25b4	; 0x25b4 <vfprintf>
    25a2:	ef 81       	ldd	r30, Y+7	; 0x07
    25a4:	f8 85       	ldd	r31, Y+8	; 0x08
    25a6:	e0 0f       	add	r30, r16
    25a8:	f1 1f       	adc	r31, r17
    25aa:	10 82       	st	Z, r1
    25ac:	2e 96       	adiw	r28, 0x0e	; 14
    25ae:	e4 e0       	ldi	r30, 0x04	; 4
    25b0:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__epilogue_restores__+0x1c>

000025b4 <vfprintf>:
    25b4:	ab e0       	ldi	r26, 0x0B	; 11
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	e0 ee       	ldi	r30, 0xE0	; 224
    25ba:	f2 e1       	ldi	r31, 0x12	; 18
    25bc:	0c 94 6b 15 	jmp	0x2ad6	; 0x2ad6 <__prologue_saves__>
    25c0:	6c 01       	movw	r12, r24
    25c2:	7b 01       	movw	r14, r22
    25c4:	8a 01       	movw	r16, r20
    25c6:	fc 01       	movw	r30, r24
    25c8:	17 82       	std	Z+7, r1	; 0x07
    25ca:	16 82       	std	Z+6, r1	; 0x06
    25cc:	83 81       	ldd	r24, Z+3	; 0x03
    25ce:	81 ff       	sbrs	r24, 1
    25d0:	cc c1       	rjmp	.+920    	; 0x296a <vfprintf+0x3b6>
    25d2:	ce 01       	movw	r24, r28
    25d4:	01 96       	adiw	r24, 0x01	; 1
    25d6:	3c 01       	movw	r6, r24
    25d8:	f6 01       	movw	r30, r12
    25da:	93 81       	ldd	r25, Z+3	; 0x03
    25dc:	f7 01       	movw	r30, r14
    25de:	93 fd       	sbrc	r25, 3
    25e0:	85 91       	lpm	r24, Z+
    25e2:	93 ff       	sbrs	r25, 3
    25e4:	81 91       	ld	r24, Z+
    25e6:	7f 01       	movw	r14, r30
    25e8:	88 23       	and	r24, r24
    25ea:	09 f4       	brne	.+2      	; 0x25ee <vfprintf+0x3a>
    25ec:	ba c1       	rjmp	.+884    	; 0x2962 <vfprintf+0x3ae>
    25ee:	85 32       	cpi	r24, 0x25	; 37
    25f0:	39 f4       	brne	.+14     	; 0x2600 <vfprintf+0x4c>
    25f2:	93 fd       	sbrc	r25, 3
    25f4:	85 91       	lpm	r24, Z+
    25f6:	93 ff       	sbrs	r25, 3
    25f8:	81 91       	ld	r24, Z+
    25fa:	7f 01       	movw	r14, r30
    25fc:	85 32       	cpi	r24, 0x25	; 37
    25fe:	29 f4       	brne	.+10     	; 0x260a <vfprintf+0x56>
    2600:	b6 01       	movw	r22, r12
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <fputc>
    2608:	e7 cf       	rjmp	.-50     	; 0x25d8 <vfprintf+0x24>
    260a:	91 2c       	mov	r9, r1
    260c:	21 2c       	mov	r2, r1
    260e:	31 2c       	mov	r3, r1
    2610:	ff e1       	ldi	r31, 0x1F	; 31
    2612:	f3 15       	cp	r31, r3
    2614:	d8 f0       	brcs	.+54     	; 0x264c <vfprintf+0x98>
    2616:	8b 32       	cpi	r24, 0x2B	; 43
    2618:	79 f0       	breq	.+30     	; 0x2638 <vfprintf+0x84>
    261a:	38 f4       	brcc	.+14     	; 0x262a <vfprintf+0x76>
    261c:	80 32       	cpi	r24, 0x20	; 32
    261e:	79 f0       	breq	.+30     	; 0x263e <vfprintf+0x8a>
    2620:	83 32       	cpi	r24, 0x23	; 35
    2622:	a1 f4       	brne	.+40     	; 0x264c <vfprintf+0x98>
    2624:	23 2d       	mov	r18, r3
    2626:	20 61       	ori	r18, 0x10	; 16
    2628:	1d c0       	rjmp	.+58     	; 0x2664 <vfprintf+0xb0>
    262a:	8d 32       	cpi	r24, 0x2D	; 45
    262c:	61 f0       	breq	.+24     	; 0x2646 <vfprintf+0x92>
    262e:	80 33       	cpi	r24, 0x30	; 48
    2630:	69 f4       	brne	.+26     	; 0x264c <vfprintf+0x98>
    2632:	23 2d       	mov	r18, r3
    2634:	21 60       	ori	r18, 0x01	; 1
    2636:	16 c0       	rjmp	.+44     	; 0x2664 <vfprintf+0xb0>
    2638:	83 2d       	mov	r24, r3
    263a:	82 60       	ori	r24, 0x02	; 2
    263c:	38 2e       	mov	r3, r24
    263e:	e3 2d       	mov	r30, r3
    2640:	e4 60       	ori	r30, 0x04	; 4
    2642:	3e 2e       	mov	r3, r30
    2644:	2a c0       	rjmp	.+84     	; 0x269a <vfprintf+0xe6>
    2646:	f3 2d       	mov	r31, r3
    2648:	f8 60       	ori	r31, 0x08	; 8
    264a:	1d c0       	rjmp	.+58     	; 0x2686 <vfprintf+0xd2>
    264c:	37 fc       	sbrc	r3, 7
    264e:	2d c0       	rjmp	.+90     	; 0x26aa <vfprintf+0xf6>
    2650:	20 ed       	ldi	r18, 0xD0	; 208
    2652:	28 0f       	add	r18, r24
    2654:	2a 30       	cpi	r18, 0x0A	; 10
    2656:	40 f0       	brcs	.+16     	; 0x2668 <vfprintf+0xb4>
    2658:	8e 32       	cpi	r24, 0x2E	; 46
    265a:	b9 f4       	brne	.+46     	; 0x268a <vfprintf+0xd6>
    265c:	36 fc       	sbrc	r3, 6
    265e:	81 c1       	rjmp	.+770    	; 0x2962 <vfprintf+0x3ae>
    2660:	23 2d       	mov	r18, r3
    2662:	20 64       	ori	r18, 0x40	; 64
    2664:	32 2e       	mov	r3, r18
    2666:	19 c0       	rjmp	.+50     	; 0x269a <vfprintf+0xe6>
    2668:	36 fe       	sbrs	r3, 6
    266a:	06 c0       	rjmp	.+12     	; 0x2678 <vfprintf+0xc4>
    266c:	8a e0       	ldi	r24, 0x0A	; 10
    266e:	98 9e       	mul	r9, r24
    2670:	20 0d       	add	r18, r0
    2672:	11 24       	eor	r1, r1
    2674:	92 2e       	mov	r9, r18
    2676:	11 c0       	rjmp	.+34     	; 0x269a <vfprintf+0xe6>
    2678:	ea e0       	ldi	r30, 0x0A	; 10
    267a:	2e 9e       	mul	r2, r30
    267c:	20 0d       	add	r18, r0
    267e:	11 24       	eor	r1, r1
    2680:	22 2e       	mov	r2, r18
    2682:	f3 2d       	mov	r31, r3
    2684:	f0 62       	ori	r31, 0x20	; 32
    2686:	3f 2e       	mov	r3, r31
    2688:	08 c0       	rjmp	.+16     	; 0x269a <vfprintf+0xe6>
    268a:	8c 36       	cpi	r24, 0x6C	; 108
    268c:	21 f4       	brne	.+8      	; 0x2696 <vfprintf+0xe2>
    268e:	83 2d       	mov	r24, r3
    2690:	80 68       	ori	r24, 0x80	; 128
    2692:	38 2e       	mov	r3, r24
    2694:	02 c0       	rjmp	.+4      	; 0x269a <vfprintf+0xe6>
    2696:	88 36       	cpi	r24, 0x68	; 104
    2698:	41 f4       	brne	.+16     	; 0x26aa <vfprintf+0xf6>
    269a:	f7 01       	movw	r30, r14
    269c:	93 fd       	sbrc	r25, 3
    269e:	85 91       	lpm	r24, Z+
    26a0:	93 ff       	sbrs	r25, 3
    26a2:	81 91       	ld	r24, Z+
    26a4:	7f 01       	movw	r14, r30
    26a6:	81 11       	cpse	r24, r1
    26a8:	b3 cf       	rjmp	.-154    	; 0x2610 <vfprintf+0x5c>
    26aa:	98 2f       	mov	r25, r24
    26ac:	9f 7d       	andi	r25, 0xDF	; 223
    26ae:	95 54       	subi	r25, 0x45	; 69
    26b0:	93 30       	cpi	r25, 0x03	; 3
    26b2:	28 f4       	brcc	.+10     	; 0x26be <vfprintf+0x10a>
    26b4:	0c 5f       	subi	r16, 0xFC	; 252
    26b6:	1f 4f       	sbci	r17, 0xFF	; 255
    26b8:	9f e3       	ldi	r25, 0x3F	; 63
    26ba:	99 83       	std	Y+1, r25	; 0x01
    26bc:	0d c0       	rjmp	.+26     	; 0x26d8 <vfprintf+0x124>
    26be:	83 36       	cpi	r24, 0x63	; 99
    26c0:	31 f0       	breq	.+12     	; 0x26ce <vfprintf+0x11a>
    26c2:	83 37       	cpi	r24, 0x73	; 115
    26c4:	71 f0       	breq	.+28     	; 0x26e2 <vfprintf+0x12e>
    26c6:	83 35       	cpi	r24, 0x53	; 83
    26c8:	09 f0       	breq	.+2      	; 0x26cc <vfprintf+0x118>
    26ca:	59 c0       	rjmp	.+178    	; 0x277e <vfprintf+0x1ca>
    26cc:	21 c0       	rjmp	.+66     	; 0x2710 <vfprintf+0x15c>
    26ce:	f8 01       	movw	r30, r16
    26d0:	80 81       	ld	r24, Z
    26d2:	89 83       	std	Y+1, r24	; 0x01
    26d4:	0e 5f       	subi	r16, 0xFE	; 254
    26d6:	1f 4f       	sbci	r17, 0xFF	; 255
    26d8:	88 24       	eor	r8, r8
    26da:	83 94       	inc	r8
    26dc:	91 2c       	mov	r9, r1
    26de:	53 01       	movw	r10, r6
    26e0:	13 c0       	rjmp	.+38     	; 0x2708 <vfprintf+0x154>
    26e2:	28 01       	movw	r4, r16
    26e4:	f2 e0       	ldi	r31, 0x02	; 2
    26e6:	4f 0e       	add	r4, r31
    26e8:	51 1c       	adc	r5, r1
    26ea:	f8 01       	movw	r30, r16
    26ec:	a0 80       	ld	r10, Z
    26ee:	b1 80       	ldd	r11, Z+1	; 0x01
    26f0:	36 fe       	sbrs	r3, 6
    26f2:	03 c0       	rjmp	.+6      	; 0x26fa <vfprintf+0x146>
    26f4:	69 2d       	mov	r22, r9
    26f6:	70 e0       	ldi	r23, 0x00	; 0
    26f8:	02 c0       	rjmp	.+4      	; 0x26fe <vfprintf+0x14a>
    26fa:	6f ef       	ldi	r22, 0xFF	; 255
    26fc:	7f ef       	ldi	r23, 0xFF	; 255
    26fe:	c5 01       	movw	r24, r10
    2700:	0e 94 c6 14 	call	0x298c	; 0x298c <strnlen>
    2704:	4c 01       	movw	r8, r24
    2706:	82 01       	movw	r16, r4
    2708:	f3 2d       	mov	r31, r3
    270a:	ff 77       	andi	r31, 0x7F	; 127
    270c:	3f 2e       	mov	r3, r31
    270e:	16 c0       	rjmp	.+44     	; 0x273c <vfprintf+0x188>
    2710:	28 01       	movw	r4, r16
    2712:	22 e0       	ldi	r18, 0x02	; 2
    2714:	42 0e       	add	r4, r18
    2716:	51 1c       	adc	r5, r1
    2718:	f8 01       	movw	r30, r16
    271a:	a0 80       	ld	r10, Z
    271c:	b1 80       	ldd	r11, Z+1	; 0x01
    271e:	36 fe       	sbrs	r3, 6
    2720:	03 c0       	rjmp	.+6      	; 0x2728 <vfprintf+0x174>
    2722:	69 2d       	mov	r22, r9
    2724:	70 e0       	ldi	r23, 0x00	; 0
    2726:	02 c0       	rjmp	.+4      	; 0x272c <vfprintf+0x178>
    2728:	6f ef       	ldi	r22, 0xFF	; 255
    272a:	7f ef       	ldi	r23, 0xFF	; 255
    272c:	c5 01       	movw	r24, r10
    272e:	0e 94 bb 14 	call	0x2976	; 0x2976 <strnlen_P>
    2732:	4c 01       	movw	r8, r24
    2734:	f3 2d       	mov	r31, r3
    2736:	f0 68       	ori	r31, 0x80	; 128
    2738:	3f 2e       	mov	r3, r31
    273a:	82 01       	movw	r16, r4
    273c:	33 fc       	sbrc	r3, 3
    273e:	1b c0       	rjmp	.+54     	; 0x2776 <vfprintf+0x1c2>
    2740:	82 2d       	mov	r24, r2
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	88 16       	cp	r8, r24
    2746:	99 06       	cpc	r9, r25
    2748:	b0 f4       	brcc	.+44     	; 0x2776 <vfprintf+0x1c2>
    274a:	b6 01       	movw	r22, r12
    274c:	80 e2       	ldi	r24, 0x20	; 32
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <fputc>
    2754:	2a 94       	dec	r2
    2756:	f4 cf       	rjmp	.-24     	; 0x2740 <vfprintf+0x18c>
    2758:	f5 01       	movw	r30, r10
    275a:	37 fc       	sbrc	r3, 7
    275c:	85 91       	lpm	r24, Z+
    275e:	37 fe       	sbrs	r3, 7
    2760:	81 91       	ld	r24, Z+
    2762:	5f 01       	movw	r10, r30
    2764:	b6 01       	movw	r22, r12
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <fputc>
    276c:	21 10       	cpse	r2, r1
    276e:	2a 94       	dec	r2
    2770:	21 e0       	ldi	r18, 0x01	; 1
    2772:	82 1a       	sub	r8, r18
    2774:	91 08       	sbc	r9, r1
    2776:	81 14       	cp	r8, r1
    2778:	91 04       	cpc	r9, r1
    277a:	71 f7       	brne	.-36     	; 0x2758 <vfprintf+0x1a4>
    277c:	e8 c0       	rjmp	.+464    	; 0x294e <vfprintf+0x39a>
    277e:	84 36       	cpi	r24, 0x64	; 100
    2780:	11 f0       	breq	.+4      	; 0x2786 <vfprintf+0x1d2>
    2782:	89 36       	cpi	r24, 0x69	; 105
    2784:	41 f5       	brne	.+80     	; 0x27d6 <vfprintf+0x222>
    2786:	f8 01       	movw	r30, r16
    2788:	37 fe       	sbrs	r3, 7
    278a:	07 c0       	rjmp	.+14     	; 0x279a <vfprintf+0x1e6>
    278c:	60 81       	ld	r22, Z
    278e:	71 81       	ldd	r23, Z+1	; 0x01
    2790:	82 81       	ldd	r24, Z+2	; 0x02
    2792:	93 81       	ldd	r25, Z+3	; 0x03
    2794:	0c 5f       	subi	r16, 0xFC	; 252
    2796:	1f 4f       	sbci	r17, 0xFF	; 255
    2798:	08 c0       	rjmp	.+16     	; 0x27aa <vfprintf+0x1f6>
    279a:	60 81       	ld	r22, Z
    279c:	71 81       	ldd	r23, Z+1	; 0x01
    279e:	07 2e       	mov	r0, r23
    27a0:	00 0c       	add	r0, r0
    27a2:	88 0b       	sbc	r24, r24
    27a4:	99 0b       	sbc	r25, r25
    27a6:	0e 5f       	subi	r16, 0xFE	; 254
    27a8:	1f 4f       	sbci	r17, 0xFF	; 255
    27aa:	f3 2d       	mov	r31, r3
    27ac:	ff 76       	andi	r31, 0x6F	; 111
    27ae:	3f 2e       	mov	r3, r31
    27b0:	97 ff       	sbrs	r25, 7
    27b2:	09 c0       	rjmp	.+18     	; 0x27c6 <vfprintf+0x212>
    27b4:	90 95       	com	r25
    27b6:	80 95       	com	r24
    27b8:	70 95       	com	r23
    27ba:	61 95       	neg	r22
    27bc:	7f 4f       	sbci	r23, 0xFF	; 255
    27be:	8f 4f       	sbci	r24, 0xFF	; 255
    27c0:	9f 4f       	sbci	r25, 0xFF	; 255
    27c2:	f0 68       	ori	r31, 0x80	; 128
    27c4:	3f 2e       	mov	r3, r31
    27c6:	2a e0       	ldi	r18, 0x0A	; 10
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	a3 01       	movw	r20, r6
    27cc:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <__ultoa_invert>
    27d0:	88 2e       	mov	r8, r24
    27d2:	86 18       	sub	r8, r6
    27d4:	45 c0       	rjmp	.+138    	; 0x2860 <vfprintf+0x2ac>
    27d6:	85 37       	cpi	r24, 0x75	; 117
    27d8:	31 f4       	brne	.+12     	; 0x27e6 <vfprintf+0x232>
    27da:	23 2d       	mov	r18, r3
    27dc:	2f 7e       	andi	r18, 0xEF	; 239
    27de:	b2 2e       	mov	r11, r18
    27e0:	2a e0       	ldi	r18, 0x0A	; 10
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	25 c0       	rjmp	.+74     	; 0x2830 <vfprintf+0x27c>
    27e6:	93 2d       	mov	r25, r3
    27e8:	99 7f       	andi	r25, 0xF9	; 249
    27ea:	b9 2e       	mov	r11, r25
    27ec:	8f 36       	cpi	r24, 0x6F	; 111
    27ee:	c1 f0       	breq	.+48     	; 0x2820 <vfprintf+0x26c>
    27f0:	18 f4       	brcc	.+6      	; 0x27f8 <vfprintf+0x244>
    27f2:	88 35       	cpi	r24, 0x58	; 88
    27f4:	79 f0       	breq	.+30     	; 0x2814 <vfprintf+0x260>
    27f6:	b5 c0       	rjmp	.+362    	; 0x2962 <vfprintf+0x3ae>
    27f8:	80 37       	cpi	r24, 0x70	; 112
    27fa:	19 f0       	breq	.+6      	; 0x2802 <vfprintf+0x24e>
    27fc:	88 37       	cpi	r24, 0x78	; 120
    27fe:	21 f0       	breq	.+8      	; 0x2808 <vfprintf+0x254>
    2800:	b0 c0       	rjmp	.+352    	; 0x2962 <vfprintf+0x3ae>
    2802:	e9 2f       	mov	r30, r25
    2804:	e0 61       	ori	r30, 0x10	; 16
    2806:	be 2e       	mov	r11, r30
    2808:	b4 fe       	sbrs	r11, 4
    280a:	0d c0       	rjmp	.+26     	; 0x2826 <vfprintf+0x272>
    280c:	fb 2d       	mov	r31, r11
    280e:	f4 60       	ori	r31, 0x04	; 4
    2810:	bf 2e       	mov	r11, r31
    2812:	09 c0       	rjmp	.+18     	; 0x2826 <vfprintf+0x272>
    2814:	34 fe       	sbrs	r3, 4
    2816:	0a c0       	rjmp	.+20     	; 0x282c <vfprintf+0x278>
    2818:	29 2f       	mov	r18, r25
    281a:	26 60       	ori	r18, 0x06	; 6
    281c:	b2 2e       	mov	r11, r18
    281e:	06 c0       	rjmp	.+12     	; 0x282c <vfprintf+0x278>
    2820:	28 e0       	ldi	r18, 0x08	; 8
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	05 c0       	rjmp	.+10     	; 0x2830 <vfprintf+0x27c>
    2826:	20 e1       	ldi	r18, 0x10	; 16
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	02 c0       	rjmp	.+4      	; 0x2830 <vfprintf+0x27c>
    282c:	20 e1       	ldi	r18, 0x10	; 16
    282e:	32 e0       	ldi	r19, 0x02	; 2
    2830:	f8 01       	movw	r30, r16
    2832:	b7 fe       	sbrs	r11, 7
    2834:	07 c0       	rjmp	.+14     	; 0x2844 <vfprintf+0x290>
    2836:	60 81       	ld	r22, Z
    2838:	71 81       	ldd	r23, Z+1	; 0x01
    283a:	82 81       	ldd	r24, Z+2	; 0x02
    283c:	93 81       	ldd	r25, Z+3	; 0x03
    283e:	0c 5f       	subi	r16, 0xFC	; 252
    2840:	1f 4f       	sbci	r17, 0xFF	; 255
    2842:	06 c0       	rjmp	.+12     	; 0x2850 <vfprintf+0x29c>
    2844:	60 81       	ld	r22, Z
    2846:	71 81       	ldd	r23, Z+1	; 0x01
    2848:	80 e0       	ldi	r24, 0x00	; 0
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	0e 5f       	subi	r16, 0xFE	; 254
    284e:	1f 4f       	sbci	r17, 0xFF	; 255
    2850:	a3 01       	movw	r20, r6
    2852:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <__ultoa_invert>
    2856:	88 2e       	mov	r8, r24
    2858:	86 18       	sub	r8, r6
    285a:	fb 2d       	mov	r31, r11
    285c:	ff 77       	andi	r31, 0x7F	; 127
    285e:	3f 2e       	mov	r3, r31
    2860:	36 fe       	sbrs	r3, 6
    2862:	0d c0       	rjmp	.+26     	; 0x287e <vfprintf+0x2ca>
    2864:	23 2d       	mov	r18, r3
    2866:	2e 7f       	andi	r18, 0xFE	; 254
    2868:	a2 2e       	mov	r10, r18
    286a:	89 14       	cp	r8, r9
    286c:	58 f4       	brcc	.+22     	; 0x2884 <vfprintf+0x2d0>
    286e:	34 fe       	sbrs	r3, 4
    2870:	0b c0       	rjmp	.+22     	; 0x2888 <vfprintf+0x2d4>
    2872:	32 fc       	sbrc	r3, 2
    2874:	09 c0       	rjmp	.+18     	; 0x2888 <vfprintf+0x2d4>
    2876:	83 2d       	mov	r24, r3
    2878:	8e 7e       	andi	r24, 0xEE	; 238
    287a:	a8 2e       	mov	r10, r24
    287c:	05 c0       	rjmp	.+10     	; 0x2888 <vfprintf+0x2d4>
    287e:	b8 2c       	mov	r11, r8
    2880:	a3 2c       	mov	r10, r3
    2882:	03 c0       	rjmp	.+6      	; 0x288a <vfprintf+0x2d6>
    2884:	b8 2c       	mov	r11, r8
    2886:	01 c0       	rjmp	.+2      	; 0x288a <vfprintf+0x2d6>
    2888:	b9 2c       	mov	r11, r9
    288a:	a4 fe       	sbrs	r10, 4
    288c:	0f c0       	rjmp	.+30     	; 0x28ac <vfprintf+0x2f8>
    288e:	fe 01       	movw	r30, r28
    2890:	e8 0d       	add	r30, r8
    2892:	f1 1d       	adc	r31, r1
    2894:	80 81       	ld	r24, Z
    2896:	80 33       	cpi	r24, 0x30	; 48
    2898:	21 f4       	brne	.+8      	; 0x28a2 <vfprintf+0x2ee>
    289a:	9a 2d       	mov	r25, r10
    289c:	99 7e       	andi	r25, 0xE9	; 233
    289e:	a9 2e       	mov	r10, r25
    28a0:	09 c0       	rjmp	.+18     	; 0x28b4 <vfprintf+0x300>
    28a2:	a2 fe       	sbrs	r10, 2
    28a4:	06 c0       	rjmp	.+12     	; 0x28b2 <vfprintf+0x2fe>
    28a6:	b3 94       	inc	r11
    28a8:	b3 94       	inc	r11
    28aa:	04 c0       	rjmp	.+8      	; 0x28b4 <vfprintf+0x300>
    28ac:	8a 2d       	mov	r24, r10
    28ae:	86 78       	andi	r24, 0x86	; 134
    28b0:	09 f0       	breq	.+2      	; 0x28b4 <vfprintf+0x300>
    28b2:	b3 94       	inc	r11
    28b4:	a3 fc       	sbrc	r10, 3
    28b6:	11 c0       	rjmp	.+34     	; 0x28da <vfprintf+0x326>
    28b8:	a0 fe       	sbrs	r10, 0
    28ba:	06 c0       	rjmp	.+12     	; 0x28c8 <vfprintf+0x314>
    28bc:	b2 14       	cp	r11, r2
    28be:	88 f4       	brcc	.+34     	; 0x28e2 <vfprintf+0x32e>
    28c0:	28 0c       	add	r2, r8
    28c2:	92 2c       	mov	r9, r2
    28c4:	9b 18       	sub	r9, r11
    28c6:	0e c0       	rjmp	.+28     	; 0x28e4 <vfprintf+0x330>
    28c8:	b2 14       	cp	r11, r2
    28ca:	60 f4       	brcc	.+24     	; 0x28e4 <vfprintf+0x330>
    28cc:	b6 01       	movw	r22, r12
    28ce:	80 e2       	ldi	r24, 0x20	; 32
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <fputc>
    28d6:	b3 94       	inc	r11
    28d8:	f7 cf       	rjmp	.-18     	; 0x28c8 <vfprintf+0x314>
    28da:	b2 14       	cp	r11, r2
    28dc:	18 f4       	brcc	.+6      	; 0x28e4 <vfprintf+0x330>
    28de:	2b 18       	sub	r2, r11
    28e0:	02 c0       	rjmp	.+4      	; 0x28e6 <vfprintf+0x332>
    28e2:	98 2c       	mov	r9, r8
    28e4:	21 2c       	mov	r2, r1
    28e6:	a4 fe       	sbrs	r10, 4
    28e8:	10 c0       	rjmp	.+32     	; 0x290a <vfprintf+0x356>
    28ea:	b6 01       	movw	r22, r12
    28ec:	80 e3       	ldi	r24, 0x30	; 48
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <fputc>
    28f4:	a2 fe       	sbrs	r10, 2
    28f6:	17 c0       	rjmp	.+46     	; 0x2926 <vfprintf+0x372>
    28f8:	a1 fc       	sbrc	r10, 1
    28fa:	03 c0       	rjmp	.+6      	; 0x2902 <vfprintf+0x34e>
    28fc:	88 e7       	ldi	r24, 0x78	; 120
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	02 c0       	rjmp	.+4      	; 0x2906 <vfprintf+0x352>
    2902:	88 e5       	ldi	r24, 0x58	; 88
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	b6 01       	movw	r22, r12
    2908:	0c c0       	rjmp	.+24     	; 0x2922 <vfprintf+0x36e>
    290a:	8a 2d       	mov	r24, r10
    290c:	86 78       	andi	r24, 0x86	; 134
    290e:	59 f0       	breq	.+22     	; 0x2926 <vfprintf+0x372>
    2910:	a1 fe       	sbrs	r10, 1
    2912:	02 c0       	rjmp	.+4      	; 0x2918 <vfprintf+0x364>
    2914:	8b e2       	ldi	r24, 0x2B	; 43
    2916:	01 c0       	rjmp	.+2      	; 0x291a <vfprintf+0x366>
    2918:	80 e2       	ldi	r24, 0x20	; 32
    291a:	a7 fc       	sbrc	r10, 7
    291c:	8d e2       	ldi	r24, 0x2D	; 45
    291e:	b6 01       	movw	r22, r12
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <fputc>
    2926:	89 14       	cp	r8, r9
    2928:	38 f4       	brcc	.+14     	; 0x2938 <vfprintf+0x384>
    292a:	b6 01       	movw	r22, r12
    292c:	80 e3       	ldi	r24, 0x30	; 48
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <fputc>
    2934:	9a 94       	dec	r9
    2936:	f7 cf       	rjmp	.-18     	; 0x2926 <vfprintf+0x372>
    2938:	8a 94       	dec	r8
    293a:	f3 01       	movw	r30, r6
    293c:	e8 0d       	add	r30, r8
    293e:	f1 1d       	adc	r31, r1
    2940:	80 81       	ld	r24, Z
    2942:	b6 01       	movw	r22, r12
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <fputc>
    294a:	81 10       	cpse	r8, r1
    294c:	f5 cf       	rjmp	.-22     	; 0x2938 <vfprintf+0x384>
    294e:	22 20       	and	r2, r2
    2950:	09 f4       	brne	.+2      	; 0x2954 <vfprintf+0x3a0>
    2952:	42 ce       	rjmp	.-892    	; 0x25d8 <vfprintf+0x24>
    2954:	b6 01       	movw	r22, r12
    2956:	80 e2       	ldi	r24, 0x20	; 32
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <fputc>
    295e:	2a 94       	dec	r2
    2960:	f6 cf       	rjmp	.-20     	; 0x294e <vfprintf+0x39a>
    2962:	f6 01       	movw	r30, r12
    2964:	86 81       	ldd	r24, Z+6	; 0x06
    2966:	97 81       	ldd	r25, Z+7	; 0x07
    2968:	02 c0       	rjmp	.+4      	; 0x296e <vfprintf+0x3ba>
    296a:	8f ef       	ldi	r24, 0xFF	; 255
    296c:	9f ef       	ldi	r25, 0xFF	; 255
    296e:	2b 96       	adiw	r28, 0x0b	; 11
    2970:	e2 e1       	ldi	r30, 0x12	; 18
    2972:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__epilogue_restores__>

00002976 <strnlen_P>:
    2976:	fc 01       	movw	r30, r24
    2978:	05 90       	lpm	r0, Z+
    297a:	61 50       	subi	r22, 0x01	; 1
    297c:	70 40       	sbci	r23, 0x00	; 0
    297e:	01 10       	cpse	r0, r1
    2980:	d8 f7       	brcc	.-10     	; 0x2978 <strnlen_P+0x2>
    2982:	80 95       	com	r24
    2984:	90 95       	com	r25
    2986:	8e 0f       	add	r24, r30
    2988:	9f 1f       	adc	r25, r31
    298a:	08 95       	ret

0000298c <strnlen>:
    298c:	fc 01       	movw	r30, r24
    298e:	61 50       	subi	r22, 0x01	; 1
    2990:	70 40       	sbci	r23, 0x00	; 0
    2992:	01 90       	ld	r0, Z+
    2994:	01 10       	cpse	r0, r1
    2996:	d8 f7       	brcc	.-10     	; 0x298e <strnlen+0x2>
    2998:	80 95       	com	r24
    299a:	90 95       	com	r25
    299c:	8e 0f       	add	r24, r30
    299e:	9f 1f       	adc	r25, r31
    29a0:	08 95       	ret

000029a2 <fputc>:
    29a2:	0f 93       	push	r16
    29a4:	1f 93       	push	r17
    29a6:	cf 93       	push	r28
    29a8:	df 93       	push	r29
    29aa:	fb 01       	movw	r30, r22
    29ac:	23 81       	ldd	r18, Z+3	; 0x03
    29ae:	21 fd       	sbrc	r18, 1
    29b0:	03 c0       	rjmp	.+6      	; 0x29b8 <fputc+0x16>
    29b2:	8f ef       	ldi	r24, 0xFF	; 255
    29b4:	9f ef       	ldi	r25, 0xFF	; 255
    29b6:	2c c0       	rjmp	.+88     	; 0x2a10 <fputc+0x6e>
    29b8:	22 ff       	sbrs	r18, 2
    29ba:	16 c0       	rjmp	.+44     	; 0x29e8 <fputc+0x46>
    29bc:	46 81       	ldd	r20, Z+6	; 0x06
    29be:	57 81       	ldd	r21, Z+7	; 0x07
    29c0:	24 81       	ldd	r18, Z+4	; 0x04
    29c2:	35 81       	ldd	r19, Z+5	; 0x05
    29c4:	42 17       	cp	r20, r18
    29c6:	53 07       	cpc	r21, r19
    29c8:	44 f4       	brge	.+16     	; 0x29da <fputc+0x38>
    29ca:	a0 81       	ld	r26, Z
    29cc:	b1 81       	ldd	r27, Z+1	; 0x01
    29ce:	9d 01       	movw	r18, r26
    29d0:	2f 5f       	subi	r18, 0xFF	; 255
    29d2:	3f 4f       	sbci	r19, 0xFF	; 255
    29d4:	31 83       	std	Z+1, r19	; 0x01
    29d6:	20 83       	st	Z, r18
    29d8:	8c 93       	st	X, r24
    29da:	26 81       	ldd	r18, Z+6	; 0x06
    29dc:	37 81       	ldd	r19, Z+7	; 0x07
    29de:	2f 5f       	subi	r18, 0xFF	; 255
    29e0:	3f 4f       	sbci	r19, 0xFF	; 255
    29e2:	37 83       	std	Z+7, r19	; 0x07
    29e4:	26 83       	std	Z+6, r18	; 0x06
    29e6:	14 c0       	rjmp	.+40     	; 0x2a10 <fputc+0x6e>
    29e8:	8b 01       	movw	r16, r22
    29ea:	ec 01       	movw	r28, r24
    29ec:	fb 01       	movw	r30, r22
    29ee:	00 84       	ldd	r0, Z+8	; 0x08
    29f0:	f1 85       	ldd	r31, Z+9	; 0x09
    29f2:	e0 2d       	mov	r30, r0
    29f4:	09 95       	icall
    29f6:	89 2b       	or	r24, r25
    29f8:	e1 f6       	brne	.-72     	; 0x29b2 <fputc+0x10>
    29fa:	d8 01       	movw	r26, r16
    29fc:	16 96       	adiw	r26, 0x06	; 6
    29fe:	8d 91       	ld	r24, X+
    2a00:	9c 91       	ld	r25, X
    2a02:	17 97       	sbiw	r26, 0x07	; 7
    2a04:	01 96       	adiw	r24, 0x01	; 1
    2a06:	17 96       	adiw	r26, 0x07	; 7
    2a08:	9c 93       	st	X, r25
    2a0a:	8e 93       	st	-X, r24
    2a0c:	16 97       	sbiw	r26, 0x06	; 6
    2a0e:	ce 01       	movw	r24, r28
    2a10:	df 91       	pop	r29
    2a12:	cf 91       	pop	r28
    2a14:	1f 91       	pop	r17
    2a16:	0f 91       	pop	r16
    2a18:	08 95       	ret

00002a1a <__ultoa_invert>:
    2a1a:	fa 01       	movw	r30, r20
    2a1c:	aa 27       	eor	r26, r26
    2a1e:	28 30       	cpi	r18, 0x08	; 8
    2a20:	51 f1       	breq	.+84     	; 0x2a76 <__ultoa_invert+0x5c>
    2a22:	20 31       	cpi	r18, 0x10	; 16
    2a24:	81 f1       	breq	.+96     	; 0x2a86 <__ultoa_invert+0x6c>
    2a26:	e8 94       	clt
    2a28:	6f 93       	push	r22
    2a2a:	6e 7f       	andi	r22, 0xFE	; 254
    2a2c:	6e 5f       	subi	r22, 0xFE	; 254
    2a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a30:	8f 4f       	sbci	r24, 0xFF	; 255
    2a32:	9f 4f       	sbci	r25, 0xFF	; 255
    2a34:	af 4f       	sbci	r26, 0xFF	; 255
    2a36:	b1 e0       	ldi	r27, 0x01	; 1
    2a38:	3e d0       	rcall	.+124    	; 0x2ab6 <__ultoa_invert+0x9c>
    2a3a:	b4 e0       	ldi	r27, 0x04	; 4
    2a3c:	3c d0       	rcall	.+120    	; 0x2ab6 <__ultoa_invert+0x9c>
    2a3e:	67 0f       	add	r22, r23
    2a40:	78 1f       	adc	r23, r24
    2a42:	89 1f       	adc	r24, r25
    2a44:	9a 1f       	adc	r25, r26
    2a46:	a1 1d       	adc	r26, r1
    2a48:	68 0f       	add	r22, r24
    2a4a:	79 1f       	adc	r23, r25
    2a4c:	8a 1f       	adc	r24, r26
    2a4e:	91 1d       	adc	r25, r1
    2a50:	a1 1d       	adc	r26, r1
    2a52:	6a 0f       	add	r22, r26
    2a54:	71 1d       	adc	r23, r1
    2a56:	81 1d       	adc	r24, r1
    2a58:	91 1d       	adc	r25, r1
    2a5a:	a1 1d       	adc	r26, r1
    2a5c:	20 d0       	rcall	.+64     	; 0x2a9e <__ultoa_invert+0x84>
    2a5e:	09 f4       	brne	.+2      	; 0x2a62 <__ultoa_invert+0x48>
    2a60:	68 94       	set
    2a62:	3f 91       	pop	r19
    2a64:	2a e0       	ldi	r18, 0x0A	; 10
    2a66:	26 9f       	mul	r18, r22
    2a68:	11 24       	eor	r1, r1
    2a6a:	30 19       	sub	r19, r0
    2a6c:	30 5d       	subi	r19, 0xD0	; 208
    2a6e:	31 93       	st	Z+, r19
    2a70:	de f6       	brtc	.-74     	; 0x2a28 <__ultoa_invert+0xe>
    2a72:	cf 01       	movw	r24, r30
    2a74:	08 95       	ret
    2a76:	46 2f       	mov	r20, r22
    2a78:	47 70       	andi	r20, 0x07	; 7
    2a7a:	40 5d       	subi	r20, 0xD0	; 208
    2a7c:	41 93       	st	Z+, r20
    2a7e:	b3 e0       	ldi	r27, 0x03	; 3
    2a80:	0f d0       	rcall	.+30     	; 0x2aa0 <__ultoa_invert+0x86>
    2a82:	c9 f7       	brne	.-14     	; 0x2a76 <__ultoa_invert+0x5c>
    2a84:	f6 cf       	rjmp	.-20     	; 0x2a72 <__ultoa_invert+0x58>
    2a86:	46 2f       	mov	r20, r22
    2a88:	4f 70       	andi	r20, 0x0F	; 15
    2a8a:	40 5d       	subi	r20, 0xD0	; 208
    2a8c:	4a 33       	cpi	r20, 0x3A	; 58
    2a8e:	18 f0       	brcs	.+6      	; 0x2a96 <__ultoa_invert+0x7c>
    2a90:	49 5d       	subi	r20, 0xD9	; 217
    2a92:	31 fd       	sbrc	r19, 1
    2a94:	40 52       	subi	r20, 0x20	; 32
    2a96:	41 93       	st	Z+, r20
    2a98:	02 d0       	rcall	.+4      	; 0x2a9e <__ultoa_invert+0x84>
    2a9a:	a9 f7       	brne	.-22     	; 0x2a86 <__ultoa_invert+0x6c>
    2a9c:	ea cf       	rjmp	.-44     	; 0x2a72 <__ultoa_invert+0x58>
    2a9e:	b4 e0       	ldi	r27, 0x04	; 4
    2aa0:	a6 95       	lsr	r26
    2aa2:	97 95       	ror	r25
    2aa4:	87 95       	ror	r24
    2aa6:	77 95       	ror	r23
    2aa8:	67 95       	ror	r22
    2aaa:	ba 95       	dec	r27
    2aac:	c9 f7       	brne	.-14     	; 0x2aa0 <__ultoa_invert+0x86>
    2aae:	00 97       	sbiw	r24, 0x00	; 0
    2ab0:	61 05       	cpc	r22, r1
    2ab2:	71 05       	cpc	r23, r1
    2ab4:	08 95       	ret
    2ab6:	9b 01       	movw	r18, r22
    2ab8:	ac 01       	movw	r20, r24
    2aba:	0a 2e       	mov	r0, r26
    2abc:	06 94       	lsr	r0
    2abe:	57 95       	ror	r21
    2ac0:	47 95       	ror	r20
    2ac2:	37 95       	ror	r19
    2ac4:	27 95       	ror	r18
    2ac6:	ba 95       	dec	r27
    2ac8:	c9 f7       	brne	.-14     	; 0x2abc <__ultoa_invert+0xa2>
    2aca:	62 0f       	add	r22, r18
    2acc:	73 1f       	adc	r23, r19
    2ace:	84 1f       	adc	r24, r20
    2ad0:	95 1f       	adc	r25, r21
    2ad2:	a0 1d       	adc	r26, r0
    2ad4:	08 95       	ret

00002ad6 <__prologue_saves__>:
    2ad6:	2f 92       	push	r2
    2ad8:	3f 92       	push	r3
    2ada:	4f 92       	push	r4
    2adc:	5f 92       	push	r5
    2ade:	6f 92       	push	r6
    2ae0:	7f 92       	push	r7
    2ae2:	8f 92       	push	r8
    2ae4:	9f 92       	push	r9
    2ae6:	af 92       	push	r10
    2ae8:	bf 92       	push	r11
    2aea:	cf 92       	push	r12
    2aec:	df 92       	push	r13
    2aee:	ef 92       	push	r14
    2af0:	ff 92       	push	r15
    2af2:	0f 93       	push	r16
    2af4:	1f 93       	push	r17
    2af6:	cf 93       	push	r28
    2af8:	df 93       	push	r29
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	ca 1b       	sub	r28, r26
    2b00:	db 0b       	sbc	r29, r27
    2b02:	0f b6       	in	r0, 0x3f	; 63
    2b04:	f8 94       	cli
    2b06:	de bf       	out	0x3e, r29	; 62
    2b08:	0f be       	out	0x3f, r0	; 63
    2b0a:	cd bf       	out	0x3d, r28	; 61
    2b0c:	09 94       	ijmp

00002b0e <__epilogue_restores__>:
    2b0e:	2a 88       	ldd	r2, Y+18	; 0x12
    2b10:	39 88       	ldd	r3, Y+17	; 0x11
    2b12:	48 88       	ldd	r4, Y+16	; 0x10
    2b14:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b16:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b18:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b1a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b1c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b1e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b20:	b9 84       	ldd	r11, Y+9	; 0x09
    2b22:	c8 84       	ldd	r12, Y+8	; 0x08
    2b24:	df 80       	ldd	r13, Y+7	; 0x07
    2b26:	ee 80       	ldd	r14, Y+6	; 0x06
    2b28:	fd 80       	ldd	r15, Y+5	; 0x05
    2b2a:	0c 81       	ldd	r16, Y+4	; 0x04
    2b2c:	1b 81       	ldd	r17, Y+3	; 0x03
    2b2e:	aa 81       	ldd	r26, Y+2	; 0x02
    2b30:	b9 81       	ldd	r27, Y+1	; 0x01
    2b32:	ce 0f       	add	r28, r30
    2b34:	d1 1d       	adc	r29, r1
    2b36:	0f b6       	in	r0, 0x3f	; 63
    2b38:	f8 94       	cli
    2b3a:	de bf       	out	0x3e, r29	; 62
    2b3c:	0f be       	out	0x3f, r0	; 63
    2b3e:	cd bf       	out	0x3d, r28	; 61
    2b40:	ed 01       	movw	r28, r26
    2b42:	08 95       	ret

00002b44 <_exit>:
    2b44:	f8 94       	cli

00002b46 <__stop_program>:
    2b46:	ff cf       	rjmp	.-2      	; 0x2b46 <__stop_program>
